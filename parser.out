Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD_COLS
    ADD_ROWS
    CTE_S
    FIND_DETERMINANT
    GOTO
    GOTOF
    GOTOT
    MULTIPLY_COLS
    MULTIPLY_MATRIX
    MULTIPLY_ROWS
    PRINT_MATRIX
    SWAP_COLS
    SWAP_ROWS
    TRANSPOSE_MATRIX

Grammar

Rule 0     S' -> start
Rule 1     start -> sem_start_program global_declaration
Rule 2     global_declaration -> var_declaration global_declaration
Rule 3     global_declaration -> func_declaration
Rule 4     var_declaration -> var_type ID sem_add_var array SEMICOLON
Rule 5     var_declaration -> empty
Rule 6     array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array
Rule 7     array -> empty
Rule 8     func_declaration -> func_signature func_declaration
Rule 9     func_declaration -> main
Rule 10    func_signature -> FUNCTION func_type array func_signature_1 sem_end_func
Rule 11    func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block
Rule 12    param_declaration -> var_type array ID sem_add_param
Rule 13    param_declaration -> var_type array ID sem_add_param COMMA param_declaration
Rule 14    param_declaration -> empty
Rule 15    var_type -> INT sem_get_type
Rule 16    var_type -> DOUBLE sem_get_type
Rule 17    var_type -> BOOL sem_get_type
Rule 18    var_cte -> CTE_I sem_push_constant_int
Rule 19    var_cte -> CTE_D sem_push_constant_double
Rule 20    var_cte -> cte_b sem_push_constant_bool
Rule 21    var_cte -> ID sem_push_operand array
Rule 22    var_cte -> function_call
Rule 23    cte_b -> TRUE
Rule 24    cte_b -> FALSE
Rule 25    func_type -> INT sem_get_type
Rule 26    func_type -> DOUBLE sem_get_type
Rule 27    func_type -> BOOL sem_get_type
Rule 28    func_type -> VOID sem_get_type
Rule 29    block -> LEFT_BRACE block_1
Rule 30    block_1 -> statement block_1
Rule 31    block_1 -> block_2
Rule 32    block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3
Rule 33    block_2 -> block_3
Rule 34    block_3 -> RIGHT_BRACE
Rule 35    statement -> var_declaration
Rule 36    statement -> assignment
Rule 37    statement -> condition
Rule 38    statement -> function_call SEMICOLON
Rule 39    statement -> while_cycle
Rule 40    statement -> read
Rule 41    statement -> write
Rule 42    assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
Rule 43    mega_exp -> hyper_exp mega_exp_1
Rule 44    mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical
Rule 45    mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical
Rule 46    mega_exp_1 -> empty
Rule 47    hyper_exp -> exp hyper_exp_1
Rule 48    hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 49    hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 50    hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational
Rule 51    hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational
Rule 52    hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 53    hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 54    hyper_exp_1 -> empty
Rule 55    exp -> term sem_top_term exp_1
Rule 56    exp_1 -> PLUS sem_push_operator exp
Rule 57    exp_1 -> MINUS sem_push_operator exp
Rule 58    exp_1 -> empty
Rule 59    term -> factor sem_top_factor term_1
Rule 60    term_1 -> MULTIPLY sem_push_operator term
Rule 61    term_1 -> DIVIDE sem_push_operator term
Rule 62    term_1 -> empty
Rule 63    factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
Rule 64    factor -> var_cte
Rule 65    factor -> factor_1 var_cte
Rule 66    factor_1 -> PLUS
Rule 67    factor_1 -> MINUS
Rule 68    factor_1 -> empty
Rule 69    condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
Rule 70    condition_1 -> ELSE sem_else_condition block
Rule 71    condition_1 -> empty
Rule 72    function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
Rule 73    param_call -> mega_exp sem_check_param
Rule 74    param_call -> mega_exp sem_check_param COMMA param_call
Rule 75    param_call -> empty
Rule 76    while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
Rule 77    read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
Rule 78    write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
Rule 79    main -> MAIN sem_fill_goto_main block sem_end_main
Rule 80    empty -> <empty>
Rule 81    sem_get_type -> empty
Rule 82    sem_add_func -> empty
Rule 83    sem_end_func -> empty
Rule 84    sem_add_var -> empty
Rule 85    sem_push_operator -> empty
Rule 86    sem_push_operand -> empty
Rule 87    sem_push_constant_int -> empty
Rule 88    sem_push_constant_double -> empty
Rule 89    sem_push_constant_bool -> empty
Rule 90    sem_top_factor -> empty
Rule 91    sem_top_term -> empty
Rule 92    sem_false_bottom_begin -> empty
Rule 93    sem_false_bottom_end -> empty
Rule 94    sem_assign_value -> empty
Rule 95    sem_read_write -> empty
Rule 96    sem_return_function -> empty
Rule 97    sem_top_logical -> <empty>
Rule 98    sem_top_relational -> <empty>
Rule 99    sem_end_condition -> empty
Rule 100   sem_fill_gotof -> empty
Rule 101   sem_else_condition -> empty
Rule 102   sem_start_while -> empty
Rule 103   sem_end_while -> empty
Rule 104   sem_add_param -> empty
Rule 105   sem_check_function -> empty
Rule 106   sem_create_era -> empty
Rule 107   sem_check_param -> empty
Rule 108   sem_count_params -> empty
Rule 109   sem_gosub -> empty
Rule 110   sem_start_program -> empty
Rule 111   sem_fill_goto_main -> empty
Rule 112   sem_end_main -> empty

Terminals, with rules where they appear

ADD_COLS             : 
ADD_ROWS             : 
AND                  : 44
ASSIGN               : 42
BOOL                 : 17 27
COMMA                : 13 74
CTE_D                : 19
CTE_I                : 18
CTE_S                : 
DIVIDE               : 61
DOUBLE               : 16 26
ELSE                 : 70
FALSE                : 24
FIND_DETERMINANT     : 
FUNCTION             : 10
GOTO                 : 
GOTOF                : 
GOTOT                : 
GREATER_THAN         : 50
GREATER_THAN_OR_EQUAL_TO : 52
ID                   : 4 11 12 13 21 42 72
IF                   : 69
INT                  : 15 25
IS_EQUAL_TO          : 48
LEFT_BRACE           : 29
LEFT_BRACKET         : 6
LEFT_PAR             : 11 63 69 72 76 77 78
LESS_THAN            : 51
LESS_THAN_OR_EQUAL_TO : 53
MAIN                 : 79
MINUS                : 57 67
MULTIPLY             : 60
MULTIPLY_COLS        : 
MULTIPLY_MATRIX      : 
MULTIPLY_ROWS        : 
NOT_EQUAL_TO         : 49
OR                   : 45
PLUS                 : 56 66
PRINT_MATRIX         : 
READ                 : 77
RETURN               : 32
RIGHT_BRACE          : 34
RIGHT_BRACKET        : 6
RIGHT_PAR            : 11 63 69 72 76 77 78
SEMICOLON            : 4 32 38 42 77 78
SWAP_COLS            : 
SWAP_ROWS            : 
TRANSPOSE_MATRIX     : 
TRUE                 : 23
VOID                 : 28
WHILE                : 76
WRITE                : 78
error                : 

Nonterminals, with rules where they appear

array                : 4 6 10 12 13 21
assignment           : 36
block                : 11 69 70 76 79
block_1              : 29 30
block_2              : 31
block_3              : 32 33
condition            : 37
condition_1          : 69
cte_b                : 20
empty                : 5 7 14 46 54 58 62 68 71 75 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 99 100 101 102 103 104 105 106 107 108 109 110 111 112
exp                  : 47 48 49 50 51 52 53 56 57
exp_1                : 55
factor               : 59
factor_1             : 65
func_declaration     : 3 8
func_signature       : 8
func_signature_1     : 10
func_type            : 10
function_call        : 22 38
global_declaration   : 1 2
hyper_exp            : 43
hyper_exp_1          : 47
main                 : 9
mega_exp             : 6 32 42 44 45 63 69 73 74 76 77 78
mega_exp_1           : 43
param_call           : 72 74
param_declaration    : 11 13
read                 : 40
sem_add_func         : 11
sem_add_param        : 12 13
sem_add_var          : 4
sem_assign_value     : 42
sem_check_function   : 72
sem_check_param      : 73 74
sem_count_params     : 72
sem_create_era       : 72
sem_else_condition   : 70
sem_end_condition    : 69 76
sem_end_func         : 10
sem_end_main         : 79
sem_end_while        : 76
sem_false_bottom_begin : 63
sem_false_bottom_end : 63
sem_fill_goto_main   : 79
sem_fill_gotof       : 69
sem_get_type         : 15 16 17 25 26 27 28
sem_gosub            : 72
sem_push_constant_bool : 20
sem_push_constant_double : 19
sem_push_constant_int : 18
sem_push_operand     : 21 42
sem_push_operator    : 32 42 44 45 48 49 50 51 52 53 56 57 60 61 77 78
sem_read_write       : 77 78
sem_return_function  : 32
sem_start_program    : 1
sem_start_while      : 76
sem_top_factor       : 59
sem_top_logical      : 44 45
sem_top_relational   : 48 49 50 51 52 53
sem_top_term         : 55
start                : 0
statement            : 30
term                 : 55 60 61
term_1               : 59
var_cte              : 64 65
var_declaration      : 2 35
var_type             : 4 12 13
while_cycle          : 39
write                : 41

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . sem_start_program global_declaration
    (110) sem_start_program -> . empty
    (80) empty -> .

    INT             reduce using rule 80 (empty -> .)
    DOUBLE          reduce using rule 80 (empty -> .)
    BOOL            reduce using rule 80 (empty -> .)
    FUNCTION        reduce using rule 80 (empty -> .)
    MAIN            reduce using rule 80 (empty -> .)

    start                          shift and go to state 1
    sem_start_program              shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> sem_start_program . global_declaration
    (2) global_declaration -> . var_declaration global_declaration
    (3) global_declaration -> . func_declaration
    (4) var_declaration -> . var_type ID sem_add_var array SEMICOLON
    (5) var_declaration -> . empty
    (8) func_declaration -> . func_signature func_declaration
    (9) func_declaration -> . main
    (15) var_type -> . INT sem_get_type
    (16) var_type -> . DOUBLE sem_get_type
    (17) var_type -> . BOOL sem_get_type
    (80) empty -> .
    (10) func_signature -> . FUNCTION func_type array func_signature_1 sem_end_func
    (79) main -> . MAIN sem_fill_goto_main block sem_end_main

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    FUNCTION        shift and go to state 14
    MAIN            shift and go to state 15

  ! INT             [ reduce using rule 80 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 80 (empty -> .) ]
  ! BOOL            [ reduce using rule 80 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 80 (empty -> .) ]
  ! MAIN            [ reduce using rule 80 (empty -> .) ]

    global_declaration             shift and go to state 4
    var_declaration                shift and go to state 5
    func_declaration               shift and go to state 6
    var_type                       shift and go to state 7
    empty                          shift and go to state 8
    func_signature                 shift and go to state 9
    main                           shift and go to state 10

state 3

    (110) sem_start_program -> empty .

    INT             reduce using rule 110 (sem_start_program -> empty .)
    DOUBLE          reduce using rule 110 (sem_start_program -> empty .)
    BOOL            reduce using rule 110 (sem_start_program -> empty .)
    FUNCTION        reduce using rule 110 (sem_start_program -> empty .)
    MAIN            reduce using rule 110 (sem_start_program -> empty .)


state 4

    (1) start -> sem_start_program global_declaration .

    $end            reduce using rule 1 (start -> sem_start_program global_declaration .)


state 5

    (2) global_declaration -> var_declaration . global_declaration
    (2) global_declaration -> . var_declaration global_declaration
    (3) global_declaration -> . func_declaration
    (4) var_declaration -> . var_type ID sem_add_var array SEMICOLON
    (5) var_declaration -> . empty
    (8) func_declaration -> . func_signature func_declaration
    (9) func_declaration -> . main
    (15) var_type -> . INT sem_get_type
    (16) var_type -> . DOUBLE sem_get_type
    (17) var_type -> . BOOL sem_get_type
    (80) empty -> .
    (10) func_signature -> . FUNCTION func_type array func_signature_1 sem_end_func
    (79) main -> . MAIN sem_fill_goto_main block sem_end_main

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    FUNCTION        shift and go to state 14
    MAIN            shift and go to state 15

  ! INT             [ reduce using rule 80 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 80 (empty -> .) ]
  ! BOOL            [ reduce using rule 80 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 80 (empty -> .) ]
  ! MAIN            [ reduce using rule 80 (empty -> .) ]

    var_declaration                shift and go to state 5
    global_declaration             shift and go to state 16
    func_declaration               shift and go to state 6
    var_type                       shift and go to state 7
    empty                          shift and go to state 8
    func_signature                 shift and go to state 9
    main                           shift and go to state 10

state 6

    (3) global_declaration -> func_declaration .

    $end            reduce using rule 3 (global_declaration -> func_declaration .)


state 7

    (4) var_declaration -> var_type . ID sem_add_var array SEMICOLON

    ID              shift and go to state 17


state 8

    (5) var_declaration -> empty .

    INT             reduce using rule 5 (var_declaration -> empty .)
    DOUBLE          reduce using rule 5 (var_declaration -> empty .)
    BOOL            reduce using rule 5 (var_declaration -> empty .)
    FUNCTION        reduce using rule 5 (var_declaration -> empty .)
    MAIN            reduce using rule 5 (var_declaration -> empty .)
    RETURN          reduce using rule 5 (var_declaration -> empty .)
    ID              reduce using rule 5 (var_declaration -> empty .)
    IF              reduce using rule 5 (var_declaration -> empty .)
    WHILE           reduce using rule 5 (var_declaration -> empty .)
    READ            reduce using rule 5 (var_declaration -> empty .)
    WRITE           reduce using rule 5 (var_declaration -> empty .)
    RIGHT_BRACE     reduce using rule 5 (var_declaration -> empty .)


state 9

    (8) func_declaration -> func_signature . func_declaration
    (8) func_declaration -> . func_signature func_declaration
    (9) func_declaration -> . main
    (10) func_signature -> . FUNCTION func_type array func_signature_1 sem_end_func
    (79) main -> . MAIN sem_fill_goto_main block sem_end_main

    FUNCTION        shift and go to state 14
    MAIN            shift and go to state 15

    func_signature                 shift and go to state 9
    func_declaration               shift and go to state 18
    main                           shift and go to state 10

state 10

    (9) func_declaration -> main .

    $end            reduce using rule 9 (func_declaration -> main .)


state 11

    (15) var_type -> INT . sem_get_type
    (81) sem_get_type -> . empty
    (80) empty -> .

    ID              reduce using rule 80 (empty -> .)
    LEFT_BRACKET    reduce using rule 80 (empty -> .)

    sem_get_type                   shift and go to state 19
    empty                          shift and go to state 20

state 12

    (16) var_type -> DOUBLE . sem_get_type
    (81) sem_get_type -> . empty
    (80) empty -> .

    ID              reduce using rule 80 (empty -> .)
    LEFT_BRACKET    reduce using rule 80 (empty -> .)

    sem_get_type                   shift and go to state 21
    empty                          shift and go to state 20

state 13

    (17) var_type -> BOOL . sem_get_type
    (81) sem_get_type -> . empty
    (80) empty -> .

    ID              reduce using rule 80 (empty -> .)
    LEFT_BRACKET    reduce using rule 80 (empty -> .)

    sem_get_type                   shift and go to state 22
    empty                          shift and go to state 20

state 14

    (10) func_signature -> FUNCTION . func_type array func_signature_1 sem_end_func
    (25) func_type -> . INT sem_get_type
    (26) func_type -> . DOUBLE sem_get_type
    (27) func_type -> . BOOL sem_get_type
    (28) func_type -> . VOID sem_get_type

    INT             shift and go to state 24
    DOUBLE          shift and go to state 25
    BOOL            shift and go to state 26
    VOID            shift and go to state 27

    func_type                      shift and go to state 23

state 15

    (79) main -> MAIN . sem_fill_goto_main block sem_end_main
    (111) sem_fill_goto_main -> . empty
    (80) empty -> .

    LEFT_BRACE      reduce using rule 80 (empty -> .)

    sem_fill_goto_main             shift and go to state 28
    empty                          shift and go to state 29

state 16

    (2) global_declaration -> var_declaration global_declaration .

    $end            reduce using rule 2 (global_declaration -> var_declaration global_declaration .)


state 17

    (4) var_declaration -> var_type ID . sem_add_var array SEMICOLON
    (84) sem_add_var -> . empty
    (80) empty -> .

    LEFT_BRACKET    reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)

    sem_add_var                    shift and go to state 30
    empty                          shift and go to state 31

state 18

    (8) func_declaration -> func_signature func_declaration .

    $end            reduce using rule 8 (func_declaration -> func_signature func_declaration .)


state 19

    (15) var_type -> INT sem_get_type .

    ID              reduce using rule 15 (var_type -> INT sem_get_type .)
    LEFT_BRACKET    reduce using rule 15 (var_type -> INT sem_get_type .)


state 20

    (81) sem_get_type -> empty .

    ID              reduce using rule 81 (sem_get_type -> empty .)
    LEFT_BRACKET    reduce using rule 81 (sem_get_type -> empty .)


state 21

    (16) var_type -> DOUBLE sem_get_type .

    ID              reduce using rule 16 (var_type -> DOUBLE sem_get_type .)
    LEFT_BRACKET    reduce using rule 16 (var_type -> DOUBLE sem_get_type .)


state 22

    (17) var_type -> BOOL sem_get_type .

    ID              reduce using rule 17 (var_type -> BOOL sem_get_type .)
    LEFT_BRACKET    reduce using rule 17 (var_type -> BOOL sem_get_type .)


state 23

    (10) func_signature -> FUNCTION func_type . array func_signature_1 sem_end_func
    (6) array -> . LEFT_BRACKET mega_exp RIGHT_BRACKET array
    (7) array -> . empty
    (80) empty -> .

    LEFT_BRACKET    shift and go to state 33
    ID              reduce using rule 80 (empty -> .)

    array                          shift and go to state 32
    empty                          shift and go to state 34

state 24

    (25) func_type -> INT . sem_get_type
    (81) sem_get_type -> . empty
    (80) empty -> .

    LEFT_BRACKET    reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sem_get_type                   shift and go to state 35
    empty                          shift and go to state 20

state 25

    (26) func_type -> DOUBLE . sem_get_type
    (81) sem_get_type -> . empty
    (80) empty -> .

    LEFT_BRACKET    reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sem_get_type                   shift and go to state 36
    empty                          shift and go to state 20

state 26

    (27) func_type -> BOOL . sem_get_type
    (81) sem_get_type -> . empty
    (80) empty -> .

    LEFT_BRACKET    reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sem_get_type                   shift and go to state 37
    empty                          shift and go to state 20

state 27

    (28) func_type -> VOID . sem_get_type
    (81) sem_get_type -> . empty
    (80) empty -> .

    LEFT_BRACKET    reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sem_get_type                   shift and go to state 38
    empty                          shift and go to state 20

state 28

    (79) main -> MAIN sem_fill_goto_main . block sem_end_main
    (29) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 40

    block                          shift and go to state 39

state 29

    (111) sem_fill_goto_main -> empty .

    LEFT_BRACE      reduce using rule 111 (sem_fill_goto_main -> empty .)


state 30

    (4) var_declaration -> var_type ID sem_add_var . array SEMICOLON
    (6) array -> . LEFT_BRACKET mega_exp RIGHT_BRACKET array
    (7) array -> . empty
    (80) empty -> .

    LEFT_BRACKET    shift and go to state 33
    SEMICOLON       reduce using rule 80 (empty -> .)

    array                          shift and go to state 41
    empty                          shift and go to state 34

state 31

    (84) sem_add_var -> empty .

    LEFT_BRACKET    reduce using rule 84 (sem_add_var -> empty .)
    SEMICOLON       reduce using rule 84 (sem_add_var -> empty .)


state 32

    (10) func_signature -> FUNCTION func_type array . func_signature_1 sem_end_func
    (11) func_signature_1 -> . ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block

    ID              shift and go to state 43

    func_signature_1               shift and go to state 42

state 33

    (6) array -> LEFT_BRACKET . mega_exp RIGHT_BRACKET array
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    mega_exp                       shift and go to state 44
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 34

    (7) array -> empty .

    ID              reduce using rule 7 (array -> empty .)
    SEMICOLON       reduce using rule 7 (array -> empty .)
    MULTIPLY        reduce using rule 7 (array -> empty .)
    DIVIDE          reduce using rule 7 (array -> empty .)
    PLUS            reduce using rule 7 (array -> empty .)
    MINUS           reduce using rule 7 (array -> empty .)
    IS_EQUAL_TO     reduce using rule 7 (array -> empty .)
    NOT_EQUAL_TO    reduce using rule 7 (array -> empty .)
    GREATER_THAN    reduce using rule 7 (array -> empty .)
    LESS_THAN       reduce using rule 7 (array -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 7 (array -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 7 (array -> empty .)
    AND             reduce using rule 7 (array -> empty .)
    OR              reduce using rule 7 (array -> empty .)
    RIGHT_BRACKET   reduce using rule 7 (array -> empty .)
    RIGHT_PAR       reduce using rule 7 (array -> empty .)
    COMMA           reduce using rule 7 (array -> empty .)


state 35

    (25) func_type -> INT sem_get_type .

    LEFT_BRACKET    reduce using rule 25 (func_type -> INT sem_get_type .)
    ID              reduce using rule 25 (func_type -> INT sem_get_type .)


state 36

    (26) func_type -> DOUBLE sem_get_type .

    LEFT_BRACKET    reduce using rule 26 (func_type -> DOUBLE sem_get_type .)
    ID              reduce using rule 26 (func_type -> DOUBLE sem_get_type .)


state 37

    (27) func_type -> BOOL sem_get_type .

    LEFT_BRACKET    reduce using rule 27 (func_type -> BOOL sem_get_type .)
    ID              reduce using rule 27 (func_type -> BOOL sem_get_type .)


state 38

    (28) func_type -> VOID sem_get_type .

    LEFT_BRACKET    reduce using rule 28 (func_type -> VOID sem_get_type .)
    ID              reduce using rule 28 (func_type -> VOID sem_get_type .)


state 39

    (79) main -> MAIN sem_fill_goto_main block . sem_end_main
    (112) sem_end_main -> . empty
    (80) empty -> .

    $end            reduce using rule 80 (empty -> .)

    sem_end_main                   shift and go to state 62
    empty                          shift and go to state 63

state 40

    (29) block -> LEFT_BRACE . block_1
    (30) block_1 -> . statement block_1
    (31) block_1 -> . block_2
    (35) statement -> . var_declaration
    (36) statement -> . assignment
    (37) statement -> . condition
    (38) statement -> . function_call SEMICOLON
    (39) statement -> . while_cycle
    (40) statement -> . read
    (41) statement -> . write
    (32) block_2 -> . RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3
    (33) block_2 -> . block_3
    (4) var_declaration -> . var_type ID sem_add_var array SEMICOLON
    (5) var_declaration -> . empty
    (42) assignment -> . ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (69) condition -> . IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (76) while_cycle -> . WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (77) read -> . READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (78) write -> . WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (34) block_3 -> . RIGHT_BRACE
    (15) var_type -> . INT sem_get_type
    (16) var_type -> . DOUBLE sem_get_type
    (17) var_type -> . BOOL sem_get_type
    (80) empty -> .

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RIGHT_BRACE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RETURN          shift and go to state 74
    ID              shift and go to state 76
    IF              shift and go to state 77
    WHILE           shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    RIGHT_BRACE     shift and go to state 81
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13

  ! RETURN          [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! IF              [ reduce using rule 80 (empty -> .) ]
  ! WHILE           [ reduce using rule 80 (empty -> .) ]
  ! READ            [ reduce using rule 80 (empty -> .) ]
  ! WRITE           [ reduce using rule 80 (empty -> .) ]
  ! RIGHT_BRACE     [ reduce using rule 80 (empty -> .) ]
  ! INT             [ reduce using rule 80 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 80 (empty -> .) ]
  ! BOOL            [ reduce using rule 80 (empty -> .) ]

    block_1                        shift and go to state 64
    statement                      shift and go to state 65
    block_2                        shift and go to state 66
    var_declaration                shift and go to state 67
    assignment                     shift and go to state 68
    condition                      shift and go to state 69
    function_call                  shift and go to state 70
    while_cycle                    shift and go to state 71
    read                           shift and go to state 72
    write                          shift and go to state 73
    block_3                        shift and go to state 75
    var_type                       shift and go to state 7
    empty                          shift and go to state 8

state 41

    (4) var_declaration -> var_type ID sem_add_var array . SEMICOLON

    SEMICOLON       shift and go to state 82


state 42

    (10) func_signature -> FUNCTION func_type array func_signature_1 . sem_end_func
    (83) sem_end_func -> . empty
    (80) empty -> .

    FUNCTION        reduce using rule 80 (empty -> .)
    MAIN            reduce using rule 80 (empty -> .)

    sem_end_func                   shift and go to state 83
    empty                          shift and go to state 84

state 43

    (11) func_signature_1 -> ID . sem_add_func LEFT_PAR param_declaration RIGHT_PAR block
    (82) sem_add_func -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)

    sem_add_func                   shift and go to state 85
    empty                          shift and go to state 86

state 44

    (6) array -> LEFT_BRACKET mega_exp . RIGHT_BRACKET array

    RIGHT_BRACKET   shift and go to state 87


state 45

    (43) mega_exp -> hyper_exp . mega_exp_1
    (44) mega_exp_1 -> . AND sem_push_operator mega_exp sem_top_logical
    (45) mega_exp_1 -> . OR sem_push_operator mega_exp sem_top_logical
    (46) mega_exp_1 -> . empty
    (80) empty -> .

    AND             shift and go to state 89
    OR              shift and go to state 90
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    mega_exp_1                     shift and go to state 88
    empty                          shift and go to state 91

state 46

    (47) hyper_exp -> exp . hyper_exp_1
    (48) hyper_exp_1 -> . IS_EQUAL_TO sem_push_operator exp sem_top_relational
    (49) hyper_exp_1 -> . NOT_EQUAL_TO sem_push_operator exp sem_top_relational
    (50) hyper_exp_1 -> . GREATER_THAN sem_push_operator exp sem_top_relational
    (51) hyper_exp_1 -> . LESS_THAN sem_push_operator exp sem_top_relational
    (52) hyper_exp_1 -> . GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
    (53) hyper_exp_1 -> . LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
    (54) hyper_exp_1 -> . empty
    (80) empty -> .

    IS_EQUAL_TO     shift and go to state 93
    NOT_EQUAL_TO    shift and go to state 94
    GREATER_THAN    shift and go to state 95
    LESS_THAN       shift and go to state 96
    GREATER_THAN_OR_EQUAL_TO shift and go to state 97
    LESS_THAN_OR_EQUAL_TO shift and go to state 98
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    hyper_exp_1                    shift and go to state 92
    empty                          shift and go to state 99

state 47

    (55) exp -> term . sem_top_term exp_1
    (91) sem_top_term -> . empty
    (80) empty -> .

    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    sem_top_term                   shift and go to state 100
    empty                          shift and go to state 101

state 48

    (59) term -> factor . sem_top_factor term_1
    (90) sem_top_factor -> . empty
    (80) empty -> .

    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    sem_top_factor                 shift and go to state 102
    empty                          shift and go to state 103

state 49

    (63) factor -> LEFT_PAR . sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (92) sem_false_bottom_begin -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_false_bottom_begin         shift and go to state 104
    empty                          shift and go to state 105

state 50

    (64) factor -> var_cte .

    MULTIPLY        reduce using rule 64 (factor -> var_cte .)
    DIVIDE          reduce using rule 64 (factor -> var_cte .)
    PLUS            reduce using rule 64 (factor -> var_cte .)
    MINUS           reduce using rule 64 (factor -> var_cte .)
    IS_EQUAL_TO     reduce using rule 64 (factor -> var_cte .)
    NOT_EQUAL_TO    reduce using rule 64 (factor -> var_cte .)
    GREATER_THAN    reduce using rule 64 (factor -> var_cte .)
    LESS_THAN       reduce using rule 64 (factor -> var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 64 (factor -> var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 64 (factor -> var_cte .)
    AND             reduce using rule 64 (factor -> var_cte .)
    OR              reduce using rule 64 (factor -> var_cte .)
    RIGHT_BRACKET   reduce using rule 64 (factor -> var_cte .)
    RIGHT_PAR       reduce using rule 64 (factor -> var_cte .)
    SEMICOLON       reduce using rule 64 (factor -> var_cte .)
    COMMA           reduce using rule 64 (factor -> var_cte .)


state 51

    (65) factor -> factor_1 . var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub

    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56

state 52

    (18) var_cte -> CTE_I . sem_push_constant_int
    (87) sem_push_constant_int -> . empty
    (80) empty -> .

    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    sem_push_constant_int          shift and go to state 107
    empty                          shift and go to state 108

state 53

    (19) var_cte -> CTE_D . sem_push_constant_double
    (88) sem_push_constant_double -> . empty
    (80) empty -> .

    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    sem_push_constant_double       shift and go to state 109
    empty                          shift and go to state 110

state 54

    (20) var_cte -> cte_b . sem_push_constant_bool
    (89) sem_push_constant_bool -> . empty
    (80) empty -> .

    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    sem_push_constant_bool         shift and go to state 111
    empty                          shift and go to state 112

state 55

    (21) var_cte -> ID . sem_push_operand array
    (72) function_call -> ID . sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (86) sem_push_operand -> . empty
    (105) sem_check_function -> . empty
    (80) empty -> .

    LEFT_BRACKET    reduce using rule 80 (empty -> .)
    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    LEFT_PAR        reduce using rule 80 (empty -> .)

    sem_push_operand               shift and go to state 113
    sem_check_function             shift and go to state 114
    empty                          shift and go to state 115

state 56

    (22) var_cte -> function_call .

    MULTIPLY        reduce using rule 22 (var_cte -> function_call .)
    DIVIDE          reduce using rule 22 (var_cte -> function_call .)
    PLUS            reduce using rule 22 (var_cte -> function_call .)
    MINUS           reduce using rule 22 (var_cte -> function_call .)
    IS_EQUAL_TO     reduce using rule 22 (var_cte -> function_call .)
    NOT_EQUAL_TO    reduce using rule 22 (var_cte -> function_call .)
    GREATER_THAN    reduce using rule 22 (var_cte -> function_call .)
    LESS_THAN       reduce using rule 22 (var_cte -> function_call .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> function_call .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> function_call .)
    AND             reduce using rule 22 (var_cte -> function_call .)
    OR              reduce using rule 22 (var_cte -> function_call .)
    RIGHT_BRACKET   reduce using rule 22 (var_cte -> function_call .)
    RIGHT_PAR       reduce using rule 22 (var_cte -> function_call .)
    SEMICOLON       reduce using rule 22 (var_cte -> function_call .)
    COMMA           reduce using rule 22 (var_cte -> function_call .)


state 57

    (66) factor_1 -> PLUS .

    CTE_I           reduce using rule 66 (factor_1 -> PLUS .)
    CTE_D           reduce using rule 66 (factor_1 -> PLUS .)
    ID              reduce using rule 66 (factor_1 -> PLUS .)
    TRUE            reduce using rule 66 (factor_1 -> PLUS .)
    FALSE           reduce using rule 66 (factor_1 -> PLUS .)


state 58

    (67) factor_1 -> MINUS .

    CTE_I           reduce using rule 67 (factor_1 -> MINUS .)
    CTE_D           reduce using rule 67 (factor_1 -> MINUS .)
    ID              reduce using rule 67 (factor_1 -> MINUS .)
    TRUE            reduce using rule 67 (factor_1 -> MINUS .)
    FALSE           reduce using rule 67 (factor_1 -> MINUS .)


state 59

    (68) factor_1 -> empty .

    CTE_I           reduce using rule 68 (factor_1 -> empty .)
    CTE_D           reduce using rule 68 (factor_1 -> empty .)
    ID              reduce using rule 68 (factor_1 -> empty .)
    TRUE            reduce using rule 68 (factor_1 -> empty .)
    FALSE           reduce using rule 68 (factor_1 -> empty .)


state 60

    (23) cte_b -> TRUE .

    MULTIPLY        reduce using rule 23 (cte_b -> TRUE .)
    DIVIDE          reduce using rule 23 (cte_b -> TRUE .)
    PLUS            reduce using rule 23 (cte_b -> TRUE .)
    MINUS           reduce using rule 23 (cte_b -> TRUE .)
    IS_EQUAL_TO     reduce using rule 23 (cte_b -> TRUE .)
    NOT_EQUAL_TO    reduce using rule 23 (cte_b -> TRUE .)
    GREATER_THAN    reduce using rule 23 (cte_b -> TRUE .)
    LESS_THAN       reduce using rule 23 (cte_b -> TRUE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 23 (cte_b -> TRUE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 23 (cte_b -> TRUE .)
    AND             reduce using rule 23 (cte_b -> TRUE .)
    OR              reduce using rule 23 (cte_b -> TRUE .)
    RIGHT_BRACKET   reduce using rule 23 (cte_b -> TRUE .)
    RIGHT_PAR       reduce using rule 23 (cte_b -> TRUE .)
    SEMICOLON       reduce using rule 23 (cte_b -> TRUE .)
    COMMA           reduce using rule 23 (cte_b -> TRUE .)


state 61

    (24) cte_b -> FALSE .

    MULTIPLY        reduce using rule 24 (cte_b -> FALSE .)
    DIVIDE          reduce using rule 24 (cte_b -> FALSE .)
    PLUS            reduce using rule 24 (cte_b -> FALSE .)
    MINUS           reduce using rule 24 (cte_b -> FALSE .)
    IS_EQUAL_TO     reduce using rule 24 (cte_b -> FALSE .)
    NOT_EQUAL_TO    reduce using rule 24 (cte_b -> FALSE .)
    GREATER_THAN    reduce using rule 24 (cte_b -> FALSE .)
    LESS_THAN       reduce using rule 24 (cte_b -> FALSE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 24 (cte_b -> FALSE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 24 (cte_b -> FALSE .)
    AND             reduce using rule 24 (cte_b -> FALSE .)
    OR              reduce using rule 24 (cte_b -> FALSE .)
    RIGHT_BRACKET   reduce using rule 24 (cte_b -> FALSE .)
    RIGHT_PAR       reduce using rule 24 (cte_b -> FALSE .)
    SEMICOLON       reduce using rule 24 (cte_b -> FALSE .)
    COMMA           reduce using rule 24 (cte_b -> FALSE .)


state 62

    (79) main -> MAIN sem_fill_goto_main block sem_end_main .

    $end            reduce using rule 79 (main -> MAIN sem_fill_goto_main block sem_end_main .)


state 63

    (112) sem_end_main -> empty .

    $end            reduce using rule 112 (sem_end_main -> empty .)


state 64

    (29) block -> LEFT_BRACE block_1 .

    $end            reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    FUNCTION        reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    MAIN            reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    ELSE            reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    RETURN          reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    ID              reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    IF              reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    WHILE           reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    READ            reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    WRITE           reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    RIGHT_BRACE     reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    INT             reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    DOUBLE          reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    BOOL            reduce using rule 29 (block -> LEFT_BRACE block_1 .)


state 65

    (30) block_1 -> statement . block_1
    (30) block_1 -> . statement block_1
    (31) block_1 -> . block_2
    (35) statement -> . var_declaration
    (36) statement -> . assignment
    (37) statement -> . condition
    (38) statement -> . function_call SEMICOLON
    (39) statement -> . while_cycle
    (40) statement -> . read
    (41) statement -> . write
    (32) block_2 -> . RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3
    (33) block_2 -> . block_3
    (4) var_declaration -> . var_type ID sem_add_var array SEMICOLON
    (5) var_declaration -> . empty
    (42) assignment -> . ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (69) condition -> . IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (76) while_cycle -> . WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (77) read -> . READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (78) write -> . WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (34) block_3 -> . RIGHT_BRACE
    (15) var_type -> . INT sem_get_type
    (16) var_type -> . DOUBLE sem_get_type
    (17) var_type -> . BOOL sem_get_type
    (80) empty -> .

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RIGHT_BRACE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RETURN          shift and go to state 74
    ID              shift and go to state 76
    IF              shift and go to state 77
    WHILE           shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    RIGHT_BRACE     shift and go to state 81
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13

  ! RETURN          [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! IF              [ reduce using rule 80 (empty -> .) ]
  ! WHILE           [ reduce using rule 80 (empty -> .) ]
  ! READ            [ reduce using rule 80 (empty -> .) ]
  ! WRITE           [ reduce using rule 80 (empty -> .) ]
  ! RIGHT_BRACE     [ reduce using rule 80 (empty -> .) ]
  ! INT             [ reduce using rule 80 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 80 (empty -> .) ]
  ! BOOL            [ reduce using rule 80 (empty -> .) ]

    statement                      shift and go to state 65
    block_1                        shift and go to state 116
    block_2                        shift and go to state 66
    var_declaration                shift and go to state 67
    assignment                     shift and go to state 68
    condition                      shift and go to state 69
    function_call                  shift and go to state 70
    while_cycle                    shift and go to state 71
    read                           shift and go to state 72
    write                          shift and go to state 73
    block_3                        shift and go to state 75
    var_type                       shift and go to state 7
    empty                          shift and go to state 8

state 66

    (31) block_1 -> block_2 .

    $end            reduce using rule 31 (block_1 -> block_2 .)
    FUNCTION        reduce using rule 31 (block_1 -> block_2 .)
    MAIN            reduce using rule 31 (block_1 -> block_2 .)
    ELSE            reduce using rule 31 (block_1 -> block_2 .)
    RETURN          reduce using rule 31 (block_1 -> block_2 .)
    ID              reduce using rule 31 (block_1 -> block_2 .)
    IF              reduce using rule 31 (block_1 -> block_2 .)
    WHILE           reduce using rule 31 (block_1 -> block_2 .)
    READ            reduce using rule 31 (block_1 -> block_2 .)
    WRITE           reduce using rule 31 (block_1 -> block_2 .)
    RIGHT_BRACE     reduce using rule 31 (block_1 -> block_2 .)
    INT             reduce using rule 31 (block_1 -> block_2 .)
    DOUBLE          reduce using rule 31 (block_1 -> block_2 .)
    BOOL            reduce using rule 31 (block_1 -> block_2 .)


state 67

    (35) statement -> var_declaration .

    RETURN          reduce using rule 35 (statement -> var_declaration .)
    ID              reduce using rule 35 (statement -> var_declaration .)
    IF              reduce using rule 35 (statement -> var_declaration .)
    WHILE           reduce using rule 35 (statement -> var_declaration .)
    READ            reduce using rule 35 (statement -> var_declaration .)
    WRITE           reduce using rule 35 (statement -> var_declaration .)
    RIGHT_BRACE     reduce using rule 35 (statement -> var_declaration .)
    INT             reduce using rule 35 (statement -> var_declaration .)
    DOUBLE          reduce using rule 35 (statement -> var_declaration .)
    BOOL            reduce using rule 35 (statement -> var_declaration .)


state 68

    (36) statement -> assignment .

    RETURN          reduce using rule 36 (statement -> assignment .)
    ID              reduce using rule 36 (statement -> assignment .)
    IF              reduce using rule 36 (statement -> assignment .)
    WHILE           reduce using rule 36 (statement -> assignment .)
    READ            reduce using rule 36 (statement -> assignment .)
    WRITE           reduce using rule 36 (statement -> assignment .)
    RIGHT_BRACE     reduce using rule 36 (statement -> assignment .)
    INT             reduce using rule 36 (statement -> assignment .)
    DOUBLE          reduce using rule 36 (statement -> assignment .)
    BOOL            reduce using rule 36 (statement -> assignment .)


state 69

    (37) statement -> condition .

    RETURN          reduce using rule 37 (statement -> condition .)
    ID              reduce using rule 37 (statement -> condition .)
    IF              reduce using rule 37 (statement -> condition .)
    WHILE           reduce using rule 37 (statement -> condition .)
    READ            reduce using rule 37 (statement -> condition .)
    WRITE           reduce using rule 37 (statement -> condition .)
    RIGHT_BRACE     reduce using rule 37 (statement -> condition .)
    INT             reduce using rule 37 (statement -> condition .)
    DOUBLE          reduce using rule 37 (statement -> condition .)
    BOOL            reduce using rule 37 (statement -> condition .)


state 70

    (38) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 117


state 71

    (39) statement -> while_cycle .

    RETURN          reduce using rule 39 (statement -> while_cycle .)
    ID              reduce using rule 39 (statement -> while_cycle .)
    IF              reduce using rule 39 (statement -> while_cycle .)
    WHILE           reduce using rule 39 (statement -> while_cycle .)
    READ            reduce using rule 39 (statement -> while_cycle .)
    WRITE           reduce using rule 39 (statement -> while_cycle .)
    RIGHT_BRACE     reduce using rule 39 (statement -> while_cycle .)
    INT             reduce using rule 39 (statement -> while_cycle .)
    DOUBLE          reduce using rule 39 (statement -> while_cycle .)
    BOOL            reduce using rule 39 (statement -> while_cycle .)


state 72

    (40) statement -> read .

    RETURN          reduce using rule 40 (statement -> read .)
    ID              reduce using rule 40 (statement -> read .)
    IF              reduce using rule 40 (statement -> read .)
    WHILE           reduce using rule 40 (statement -> read .)
    READ            reduce using rule 40 (statement -> read .)
    WRITE           reduce using rule 40 (statement -> read .)
    RIGHT_BRACE     reduce using rule 40 (statement -> read .)
    INT             reduce using rule 40 (statement -> read .)
    DOUBLE          reduce using rule 40 (statement -> read .)
    BOOL            reduce using rule 40 (statement -> read .)


state 73

    (41) statement -> write .

    RETURN          reduce using rule 41 (statement -> write .)
    ID              reduce using rule 41 (statement -> write .)
    IF              reduce using rule 41 (statement -> write .)
    WHILE           reduce using rule 41 (statement -> write .)
    READ            reduce using rule 41 (statement -> write .)
    WRITE           reduce using rule 41 (statement -> write .)
    RIGHT_BRACE     reduce using rule 41 (statement -> write .)
    INT             reduce using rule 41 (statement -> write .)
    DOUBLE          reduce using rule 41 (statement -> write .)
    BOOL            reduce using rule 41 (statement -> write .)


state 74

    (32) block_2 -> RETURN . sem_push_operator mega_exp sem_return_function SEMICOLON block_3
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 118
    empty                          shift and go to state 119

state 75

    (33) block_2 -> block_3 .

    $end            reduce using rule 33 (block_2 -> block_3 .)
    FUNCTION        reduce using rule 33 (block_2 -> block_3 .)
    MAIN            reduce using rule 33 (block_2 -> block_3 .)
    ELSE            reduce using rule 33 (block_2 -> block_3 .)
    RETURN          reduce using rule 33 (block_2 -> block_3 .)
    ID              reduce using rule 33 (block_2 -> block_3 .)
    IF              reduce using rule 33 (block_2 -> block_3 .)
    WHILE           reduce using rule 33 (block_2 -> block_3 .)
    READ            reduce using rule 33 (block_2 -> block_3 .)
    WRITE           reduce using rule 33 (block_2 -> block_3 .)
    RIGHT_BRACE     reduce using rule 33 (block_2 -> block_3 .)
    INT             reduce using rule 33 (block_2 -> block_3 .)
    DOUBLE          reduce using rule 33 (block_2 -> block_3 .)
    BOOL            reduce using rule 33 (block_2 -> block_3 .)


state 76

    (42) assignment -> ID . sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (72) function_call -> ID . sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (86) sem_push_operand -> . empty
    (105) sem_check_function -> . empty
    (80) empty -> .

    ASSIGN          reduce using rule 80 (empty -> .)
    LEFT_PAR        reduce using rule 80 (empty -> .)

    sem_push_operand               shift and go to state 120
    sem_check_function             shift and go to state 114
    empty                          shift and go to state 115

state 77

    (69) condition -> IF . LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof

    LEFT_PAR        shift and go to state 121


state 78

    (76) while_cycle -> WHILE . sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (102) sem_start_while -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)

    sem_start_while                shift and go to state 122
    empty                          shift and go to state 123

state 79

    (77) read -> READ . sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 124
    empty                          shift and go to state 119

state 80

    (78) write -> WRITE . sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 125
    empty                          shift and go to state 119

state 81

    (34) block_3 -> RIGHT_BRACE .

    $end            reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    FUNCTION        reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    MAIN            reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    ELSE            reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    RETURN          reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    ID              reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    IF              reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    WHILE           reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    READ            reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    WRITE           reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    INT             reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    DOUBLE          reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    BOOL            reduce using rule 34 (block_3 -> RIGHT_BRACE .)


state 82

    (4) var_declaration -> var_type ID sem_add_var array SEMICOLON .

    INT             reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    DOUBLE          reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    BOOL            reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    FUNCTION        reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    MAIN            reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    RETURN          reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    ID              reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    IF              reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    WHILE           reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    READ            reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    WRITE           reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)


state 83

    (10) func_signature -> FUNCTION func_type array func_signature_1 sem_end_func .

    FUNCTION        reduce using rule 10 (func_signature -> FUNCTION func_type array func_signature_1 sem_end_func .)
    MAIN            reduce using rule 10 (func_signature -> FUNCTION func_type array func_signature_1 sem_end_func .)


state 84

    (83) sem_end_func -> empty .

    FUNCTION        reduce using rule 83 (sem_end_func -> empty .)
    MAIN            reduce using rule 83 (sem_end_func -> empty .)


state 85

    (11) func_signature_1 -> ID sem_add_func . LEFT_PAR param_declaration RIGHT_PAR block

    LEFT_PAR        shift and go to state 126


state 86

    (82) sem_add_func -> empty .

    LEFT_PAR        reduce using rule 82 (sem_add_func -> empty .)


state 87

    (6) array -> LEFT_BRACKET mega_exp RIGHT_BRACKET . array
    (6) array -> . LEFT_BRACKET mega_exp RIGHT_BRACKET array
    (7) array -> . empty
    (80) empty -> .

    LEFT_BRACKET    shift and go to state 33
    ID              reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    array                          shift and go to state 127
    empty                          shift and go to state 34

state 88

    (43) mega_exp -> hyper_exp mega_exp_1 .

    RIGHT_BRACKET   reduce using rule 43 (mega_exp -> hyper_exp mega_exp_1 .)
    RIGHT_PAR       reduce using rule 43 (mega_exp -> hyper_exp mega_exp_1 .)
    SEMICOLON       reduce using rule 43 (mega_exp -> hyper_exp mega_exp_1 .)
    COMMA           reduce using rule 43 (mega_exp -> hyper_exp mega_exp_1 .)


state 89

    (44) mega_exp_1 -> AND . sem_push_operator mega_exp sem_top_logical
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 128
    empty                          shift and go to state 119

state 90

    (45) mega_exp_1 -> OR . sem_push_operator mega_exp sem_top_logical
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 129
    empty                          shift and go to state 119

state 91

    (46) mega_exp_1 -> empty .

    RIGHT_BRACKET   reduce using rule 46 (mega_exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 46 (mega_exp_1 -> empty .)
    SEMICOLON       reduce using rule 46 (mega_exp_1 -> empty .)
    COMMA           reduce using rule 46 (mega_exp_1 -> empty .)


state 92

    (47) hyper_exp -> exp hyper_exp_1 .

    AND             reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)
    OR              reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)
    RIGHT_BRACKET   reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)
    RIGHT_PAR       reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)
    SEMICOLON       reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)
    COMMA           reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)


state 93

    (48) hyper_exp_1 -> IS_EQUAL_TO . sem_push_operator exp sem_top_relational
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 130
    empty                          shift and go to state 119

state 94

    (49) hyper_exp_1 -> NOT_EQUAL_TO . sem_push_operator exp sem_top_relational
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 131
    empty                          shift and go to state 119

state 95

    (50) hyper_exp_1 -> GREATER_THAN . sem_push_operator exp sem_top_relational
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 132
    empty                          shift and go to state 119

state 96

    (51) hyper_exp_1 -> LESS_THAN . sem_push_operator exp sem_top_relational
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 133
    empty                          shift and go to state 119

state 97

    (52) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO . sem_push_operator exp sem_top_relational
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 134
    empty                          shift and go to state 119

state 98

    (53) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO . sem_push_operator exp sem_top_relational
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 135
    empty                          shift and go to state 119

state 99

    (54) hyper_exp_1 -> empty .

    AND             reduce using rule 54 (hyper_exp_1 -> empty .)
    OR              reduce using rule 54 (hyper_exp_1 -> empty .)
    RIGHT_BRACKET   reduce using rule 54 (hyper_exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 54 (hyper_exp_1 -> empty .)
    SEMICOLON       reduce using rule 54 (hyper_exp_1 -> empty .)
    COMMA           reduce using rule 54 (hyper_exp_1 -> empty .)


state 100

    (55) exp -> term sem_top_term . exp_1
    (56) exp_1 -> . PLUS sem_push_operator exp
    (57) exp_1 -> . MINUS sem_push_operator exp
    (58) exp_1 -> . empty
    (80) empty -> .

    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    exp_1                          shift and go to state 136
    empty                          shift and go to state 139

state 101

    (91) sem_top_term -> empty .

    PLUS            reduce using rule 91 (sem_top_term -> empty .)
    MINUS           reduce using rule 91 (sem_top_term -> empty .)
    IS_EQUAL_TO     reduce using rule 91 (sem_top_term -> empty .)
    NOT_EQUAL_TO    reduce using rule 91 (sem_top_term -> empty .)
    GREATER_THAN    reduce using rule 91 (sem_top_term -> empty .)
    LESS_THAN       reduce using rule 91 (sem_top_term -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 91 (sem_top_term -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 91 (sem_top_term -> empty .)
    AND             reduce using rule 91 (sem_top_term -> empty .)
    OR              reduce using rule 91 (sem_top_term -> empty .)
    RIGHT_BRACKET   reduce using rule 91 (sem_top_term -> empty .)
    RIGHT_PAR       reduce using rule 91 (sem_top_term -> empty .)
    SEMICOLON       reduce using rule 91 (sem_top_term -> empty .)
    COMMA           reduce using rule 91 (sem_top_term -> empty .)


state 102

    (59) term -> factor sem_top_factor . term_1
    (60) term_1 -> . MULTIPLY sem_push_operator term
    (61) term_1 -> . DIVIDE sem_push_operator term
    (62) term_1 -> . empty
    (80) empty -> .

    MULTIPLY        shift and go to state 141
    DIVIDE          shift and go to state 142
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    term_1                         shift and go to state 140
    empty                          shift and go to state 143

state 103

    (90) sem_top_factor -> empty .

    MULTIPLY        reduce using rule 90 (sem_top_factor -> empty .)
    DIVIDE          reduce using rule 90 (sem_top_factor -> empty .)
    PLUS            reduce using rule 90 (sem_top_factor -> empty .)
    MINUS           reduce using rule 90 (sem_top_factor -> empty .)
    IS_EQUAL_TO     reduce using rule 90 (sem_top_factor -> empty .)
    NOT_EQUAL_TO    reduce using rule 90 (sem_top_factor -> empty .)
    GREATER_THAN    reduce using rule 90 (sem_top_factor -> empty .)
    LESS_THAN       reduce using rule 90 (sem_top_factor -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 90 (sem_top_factor -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 90 (sem_top_factor -> empty .)
    AND             reduce using rule 90 (sem_top_factor -> empty .)
    OR              reduce using rule 90 (sem_top_factor -> empty .)
    RIGHT_BRACKET   reduce using rule 90 (sem_top_factor -> empty .)
    RIGHT_PAR       reduce using rule 90 (sem_top_factor -> empty .)
    SEMICOLON       reduce using rule 90 (sem_top_factor -> empty .)
    COMMA           reduce using rule 90 (sem_top_factor -> empty .)


state 104

    (63) factor -> LEFT_PAR sem_false_bottom_begin . mega_exp RIGHT_PAR sem_false_bottom_end
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    mega_exp                       shift and go to state 144
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 105

    (92) sem_false_bottom_begin -> empty .

    LEFT_PAR        reduce using rule 92 (sem_false_bottom_begin -> empty .)
    CTE_I           reduce using rule 92 (sem_false_bottom_begin -> empty .)
    CTE_D           reduce using rule 92 (sem_false_bottom_begin -> empty .)
    ID              reduce using rule 92 (sem_false_bottom_begin -> empty .)
    PLUS            reduce using rule 92 (sem_false_bottom_begin -> empty .)
    MINUS           reduce using rule 92 (sem_false_bottom_begin -> empty .)
    TRUE            reduce using rule 92 (sem_false_bottom_begin -> empty .)
    FALSE           reduce using rule 92 (sem_false_bottom_begin -> empty .)


state 106

    (65) factor -> factor_1 var_cte .

    MULTIPLY        reduce using rule 65 (factor -> factor_1 var_cte .)
    DIVIDE          reduce using rule 65 (factor -> factor_1 var_cte .)
    PLUS            reduce using rule 65 (factor -> factor_1 var_cte .)
    MINUS           reduce using rule 65 (factor -> factor_1 var_cte .)
    IS_EQUAL_TO     reduce using rule 65 (factor -> factor_1 var_cte .)
    NOT_EQUAL_TO    reduce using rule 65 (factor -> factor_1 var_cte .)
    GREATER_THAN    reduce using rule 65 (factor -> factor_1 var_cte .)
    LESS_THAN       reduce using rule 65 (factor -> factor_1 var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 65 (factor -> factor_1 var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 65 (factor -> factor_1 var_cte .)
    AND             reduce using rule 65 (factor -> factor_1 var_cte .)
    OR              reduce using rule 65 (factor -> factor_1 var_cte .)
    RIGHT_BRACKET   reduce using rule 65 (factor -> factor_1 var_cte .)
    RIGHT_PAR       reduce using rule 65 (factor -> factor_1 var_cte .)
    SEMICOLON       reduce using rule 65 (factor -> factor_1 var_cte .)
    COMMA           reduce using rule 65 (factor -> factor_1 var_cte .)


state 107

    (18) var_cte -> CTE_I sem_push_constant_int .

    MULTIPLY        reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    DIVIDE          reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    PLUS            reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    MINUS           reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    IS_EQUAL_TO     reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    NOT_EQUAL_TO    reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    GREATER_THAN    reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    LESS_THAN       reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    AND             reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    OR              reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    RIGHT_BRACKET   reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    RIGHT_PAR       reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    SEMICOLON       reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    COMMA           reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)


state 108

    (87) sem_push_constant_int -> empty .

    MULTIPLY        reduce using rule 87 (sem_push_constant_int -> empty .)
    DIVIDE          reduce using rule 87 (sem_push_constant_int -> empty .)
    PLUS            reduce using rule 87 (sem_push_constant_int -> empty .)
    MINUS           reduce using rule 87 (sem_push_constant_int -> empty .)
    IS_EQUAL_TO     reduce using rule 87 (sem_push_constant_int -> empty .)
    NOT_EQUAL_TO    reduce using rule 87 (sem_push_constant_int -> empty .)
    GREATER_THAN    reduce using rule 87 (sem_push_constant_int -> empty .)
    LESS_THAN       reduce using rule 87 (sem_push_constant_int -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 87 (sem_push_constant_int -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 87 (sem_push_constant_int -> empty .)
    AND             reduce using rule 87 (sem_push_constant_int -> empty .)
    OR              reduce using rule 87 (sem_push_constant_int -> empty .)
    RIGHT_BRACKET   reduce using rule 87 (sem_push_constant_int -> empty .)
    RIGHT_PAR       reduce using rule 87 (sem_push_constant_int -> empty .)
    SEMICOLON       reduce using rule 87 (sem_push_constant_int -> empty .)
    COMMA           reduce using rule 87 (sem_push_constant_int -> empty .)


state 109

    (19) var_cte -> CTE_D sem_push_constant_double .

    MULTIPLY        reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    DIVIDE          reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    PLUS            reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    MINUS           reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    IS_EQUAL_TO     reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    NOT_EQUAL_TO    reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    GREATER_THAN    reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    LESS_THAN       reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    AND             reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    OR              reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    RIGHT_BRACKET   reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    RIGHT_PAR       reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    SEMICOLON       reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    COMMA           reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)


state 110

    (88) sem_push_constant_double -> empty .

    MULTIPLY        reduce using rule 88 (sem_push_constant_double -> empty .)
    DIVIDE          reduce using rule 88 (sem_push_constant_double -> empty .)
    PLUS            reduce using rule 88 (sem_push_constant_double -> empty .)
    MINUS           reduce using rule 88 (sem_push_constant_double -> empty .)
    IS_EQUAL_TO     reduce using rule 88 (sem_push_constant_double -> empty .)
    NOT_EQUAL_TO    reduce using rule 88 (sem_push_constant_double -> empty .)
    GREATER_THAN    reduce using rule 88 (sem_push_constant_double -> empty .)
    LESS_THAN       reduce using rule 88 (sem_push_constant_double -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 88 (sem_push_constant_double -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 88 (sem_push_constant_double -> empty .)
    AND             reduce using rule 88 (sem_push_constant_double -> empty .)
    OR              reduce using rule 88 (sem_push_constant_double -> empty .)
    RIGHT_BRACKET   reduce using rule 88 (sem_push_constant_double -> empty .)
    RIGHT_PAR       reduce using rule 88 (sem_push_constant_double -> empty .)
    SEMICOLON       reduce using rule 88 (sem_push_constant_double -> empty .)
    COMMA           reduce using rule 88 (sem_push_constant_double -> empty .)


state 111

    (20) var_cte -> cte_b sem_push_constant_bool .

    MULTIPLY        reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    DIVIDE          reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    PLUS            reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    MINUS           reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    IS_EQUAL_TO     reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    NOT_EQUAL_TO    reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    GREATER_THAN    reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    LESS_THAN       reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    AND             reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    OR              reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    RIGHT_BRACKET   reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    RIGHT_PAR       reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    SEMICOLON       reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    COMMA           reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)


state 112

    (89) sem_push_constant_bool -> empty .

    MULTIPLY        reduce using rule 89 (sem_push_constant_bool -> empty .)
    DIVIDE          reduce using rule 89 (sem_push_constant_bool -> empty .)
    PLUS            reduce using rule 89 (sem_push_constant_bool -> empty .)
    MINUS           reduce using rule 89 (sem_push_constant_bool -> empty .)
    IS_EQUAL_TO     reduce using rule 89 (sem_push_constant_bool -> empty .)
    NOT_EQUAL_TO    reduce using rule 89 (sem_push_constant_bool -> empty .)
    GREATER_THAN    reduce using rule 89 (sem_push_constant_bool -> empty .)
    LESS_THAN       reduce using rule 89 (sem_push_constant_bool -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 89 (sem_push_constant_bool -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 89 (sem_push_constant_bool -> empty .)
    AND             reduce using rule 89 (sem_push_constant_bool -> empty .)
    OR              reduce using rule 89 (sem_push_constant_bool -> empty .)
    RIGHT_BRACKET   reduce using rule 89 (sem_push_constant_bool -> empty .)
    RIGHT_PAR       reduce using rule 89 (sem_push_constant_bool -> empty .)
    SEMICOLON       reduce using rule 89 (sem_push_constant_bool -> empty .)
    COMMA           reduce using rule 89 (sem_push_constant_bool -> empty .)


state 113

    (21) var_cte -> ID sem_push_operand . array
    (6) array -> . LEFT_BRACKET mega_exp RIGHT_BRACKET array
    (7) array -> . empty
    (80) empty -> .

    LEFT_BRACKET    shift and go to state 33
    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    array                          shift and go to state 145
    empty                          shift and go to state 34

state 114

    (72) function_call -> ID sem_check_function . LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub

    LEFT_PAR        shift and go to state 146


state 115

    (86) sem_push_operand -> empty .
    (105) sem_check_function -> empty .

    LEFT_BRACKET    reduce using rule 86 (sem_push_operand -> empty .)
    MULTIPLY        reduce using rule 86 (sem_push_operand -> empty .)
    DIVIDE          reduce using rule 86 (sem_push_operand -> empty .)
    PLUS            reduce using rule 86 (sem_push_operand -> empty .)
    MINUS           reduce using rule 86 (sem_push_operand -> empty .)
    IS_EQUAL_TO     reduce using rule 86 (sem_push_operand -> empty .)
    NOT_EQUAL_TO    reduce using rule 86 (sem_push_operand -> empty .)
    GREATER_THAN    reduce using rule 86 (sem_push_operand -> empty .)
    LESS_THAN       reduce using rule 86 (sem_push_operand -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 86 (sem_push_operand -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 86 (sem_push_operand -> empty .)
    AND             reduce using rule 86 (sem_push_operand -> empty .)
    OR              reduce using rule 86 (sem_push_operand -> empty .)
    RIGHT_BRACKET   reduce using rule 86 (sem_push_operand -> empty .)
    RIGHT_PAR       reduce using rule 86 (sem_push_operand -> empty .)
    SEMICOLON       reduce using rule 86 (sem_push_operand -> empty .)
    COMMA           reduce using rule 86 (sem_push_operand -> empty .)
    ASSIGN          reduce using rule 86 (sem_push_operand -> empty .)
    LEFT_PAR        reduce using rule 105 (sem_check_function -> empty .)


state 116

    (30) block_1 -> statement block_1 .

    $end            reduce using rule 30 (block_1 -> statement block_1 .)
    FUNCTION        reduce using rule 30 (block_1 -> statement block_1 .)
    MAIN            reduce using rule 30 (block_1 -> statement block_1 .)
    ELSE            reduce using rule 30 (block_1 -> statement block_1 .)
    RETURN          reduce using rule 30 (block_1 -> statement block_1 .)
    ID              reduce using rule 30 (block_1 -> statement block_1 .)
    IF              reduce using rule 30 (block_1 -> statement block_1 .)
    WHILE           reduce using rule 30 (block_1 -> statement block_1 .)
    READ            reduce using rule 30 (block_1 -> statement block_1 .)
    WRITE           reduce using rule 30 (block_1 -> statement block_1 .)
    RIGHT_BRACE     reduce using rule 30 (block_1 -> statement block_1 .)
    INT             reduce using rule 30 (block_1 -> statement block_1 .)
    DOUBLE          reduce using rule 30 (block_1 -> statement block_1 .)
    BOOL            reduce using rule 30 (block_1 -> statement block_1 .)


state 117

    (38) statement -> function_call SEMICOLON .

    RETURN          reduce using rule 38 (statement -> function_call SEMICOLON .)
    ID              reduce using rule 38 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 38 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 38 (statement -> function_call SEMICOLON .)
    READ            reduce using rule 38 (statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 38 (statement -> function_call SEMICOLON .)
    RIGHT_BRACE     reduce using rule 38 (statement -> function_call SEMICOLON .)
    INT             reduce using rule 38 (statement -> function_call SEMICOLON .)
    DOUBLE          reduce using rule 38 (statement -> function_call SEMICOLON .)
    BOOL            reduce using rule 38 (statement -> function_call SEMICOLON .)


state 118

    (32) block_2 -> RETURN sem_push_operator . mega_exp sem_return_function SEMICOLON block_3
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    mega_exp                       shift and go to state 147
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 119

    (85) sem_push_operator -> empty .

    LEFT_PAR        reduce using rule 85 (sem_push_operator -> empty .)
    CTE_I           reduce using rule 85 (sem_push_operator -> empty .)
    CTE_D           reduce using rule 85 (sem_push_operator -> empty .)
    ID              reduce using rule 85 (sem_push_operator -> empty .)
    PLUS            reduce using rule 85 (sem_push_operator -> empty .)
    MINUS           reduce using rule 85 (sem_push_operator -> empty .)
    TRUE            reduce using rule 85 (sem_push_operator -> empty .)
    FALSE           reduce using rule 85 (sem_push_operator -> empty .)


state 120

    (42) assignment -> ID sem_push_operand . ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON

    ASSIGN          shift and go to state 148


state 121

    (69) condition -> IF LEFT_PAR . mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    mega_exp                       shift and go to state 149
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 122

    (76) while_cycle -> WHILE sem_start_while . LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while

    LEFT_PAR        shift and go to state 150


state 123

    (102) sem_start_while -> empty .

    LEFT_PAR        reduce using rule 102 (sem_start_while -> empty .)


state 124

    (77) read -> READ sem_push_operator . LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    LEFT_PAR        shift and go to state 151


state 125

    (78) write -> WRITE sem_push_operator . LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    LEFT_PAR        shift and go to state 152


state 126

    (11) func_signature_1 -> ID sem_add_func LEFT_PAR . param_declaration RIGHT_PAR block
    (12) param_declaration -> . var_type array ID sem_add_param
    (13) param_declaration -> . var_type array ID sem_add_param COMMA param_declaration
    (14) param_declaration -> . empty
    (15) var_type -> . INT sem_get_type
    (16) var_type -> . DOUBLE sem_get_type
    (17) var_type -> . BOOL sem_get_type
    (80) empty -> .

    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    param_declaration              shift and go to state 153
    var_type                       shift and go to state 154
    empty                          shift and go to state 155

state 127

    (6) array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .

    ID              reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    SEMICOLON       reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    MULTIPLY        reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    DIVIDE          reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    PLUS            reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    MINUS           reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    IS_EQUAL_TO     reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    NOT_EQUAL_TO    reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    GREATER_THAN    reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    LESS_THAN       reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    AND             reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    OR              reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    RIGHT_BRACKET   reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    RIGHT_PAR       reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    COMMA           reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)


state 128

    (44) mega_exp_1 -> AND sem_push_operator . mega_exp sem_top_logical
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    mega_exp                       shift and go to state 156
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 129

    (45) mega_exp_1 -> OR sem_push_operator . mega_exp sem_top_logical
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    mega_exp                       shift and go to state 157
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 130

    (48) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 158
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 131

    (49) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 159
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 132

    (50) hyper_exp_1 -> GREATER_THAN sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 160
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 133

    (51) hyper_exp_1 -> LESS_THAN sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 161
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 134

    (52) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 162
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 135

    (53) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 163
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 136

    (55) exp -> term sem_top_term exp_1 .

    IS_EQUAL_TO     reduce using rule 55 (exp -> term sem_top_term exp_1 .)
    NOT_EQUAL_TO    reduce using rule 55 (exp -> term sem_top_term exp_1 .)
    GREATER_THAN    reduce using rule 55 (exp -> term sem_top_term exp_1 .)
    LESS_THAN       reduce using rule 55 (exp -> term sem_top_term exp_1 .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 55 (exp -> term sem_top_term exp_1 .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 55 (exp -> term sem_top_term exp_1 .)
    AND             reduce using rule 55 (exp -> term sem_top_term exp_1 .)
    OR              reduce using rule 55 (exp -> term sem_top_term exp_1 .)
    RIGHT_BRACKET   reduce using rule 55 (exp -> term sem_top_term exp_1 .)
    RIGHT_PAR       reduce using rule 55 (exp -> term sem_top_term exp_1 .)
    SEMICOLON       reduce using rule 55 (exp -> term sem_top_term exp_1 .)
    COMMA           reduce using rule 55 (exp -> term sem_top_term exp_1 .)


state 137

    (56) exp_1 -> PLUS . sem_push_operator exp
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 164
    empty                          shift and go to state 119

state 138

    (57) exp_1 -> MINUS . sem_push_operator exp
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 165
    empty                          shift and go to state 119

state 139

    (58) exp_1 -> empty .

    IS_EQUAL_TO     reduce using rule 58 (exp_1 -> empty .)
    NOT_EQUAL_TO    reduce using rule 58 (exp_1 -> empty .)
    GREATER_THAN    reduce using rule 58 (exp_1 -> empty .)
    LESS_THAN       reduce using rule 58 (exp_1 -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 58 (exp_1 -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 58 (exp_1 -> empty .)
    AND             reduce using rule 58 (exp_1 -> empty .)
    OR              reduce using rule 58 (exp_1 -> empty .)
    RIGHT_BRACKET   reduce using rule 58 (exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 58 (exp_1 -> empty .)
    SEMICOLON       reduce using rule 58 (exp_1 -> empty .)
    COMMA           reduce using rule 58 (exp_1 -> empty .)


state 140

    (59) term -> factor sem_top_factor term_1 .

    PLUS            reduce using rule 59 (term -> factor sem_top_factor term_1 .)
    MINUS           reduce using rule 59 (term -> factor sem_top_factor term_1 .)
    IS_EQUAL_TO     reduce using rule 59 (term -> factor sem_top_factor term_1 .)
    NOT_EQUAL_TO    reduce using rule 59 (term -> factor sem_top_factor term_1 .)
    GREATER_THAN    reduce using rule 59 (term -> factor sem_top_factor term_1 .)
    LESS_THAN       reduce using rule 59 (term -> factor sem_top_factor term_1 .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 59 (term -> factor sem_top_factor term_1 .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 59 (term -> factor sem_top_factor term_1 .)
    AND             reduce using rule 59 (term -> factor sem_top_factor term_1 .)
    OR              reduce using rule 59 (term -> factor sem_top_factor term_1 .)
    RIGHT_BRACKET   reduce using rule 59 (term -> factor sem_top_factor term_1 .)
    RIGHT_PAR       reduce using rule 59 (term -> factor sem_top_factor term_1 .)
    SEMICOLON       reduce using rule 59 (term -> factor sem_top_factor term_1 .)
    COMMA           reduce using rule 59 (term -> factor sem_top_factor term_1 .)


state 141

    (60) term_1 -> MULTIPLY . sem_push_operator term
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 166
    empty                          shift and go to state 119

state 142

    (61) term_1 -> DIVIDE . sem_push_operator term
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 167
    empty                          shift and go to state 119

state 143

    (62) term_1 -> empty .

    PLUS            reduce using rule 62 (term_1 -> empty .)
    MINUS           reduce using rule 62 (term_1 -> empty .)
    IS_EQUAL_TO     reduce using rule 62 (term_1 -> empty .)
    NOT_EQUAL_TO    reduce using rule 62 (term_1 -> empty .)
    GREATER_THAN    reduce using rule 62 (term_1 -> empty .)
    LESS_THAN       reduce using rule 62 (term_1 -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 62 (term_1 -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 62 (term_1 -> empty .)
    AND             reduce using rule 62 (term_1 -> empty .)
    OR              reduce using rule 62 (term_1 -> empty .)
    RIGHT_BRACKET   reduce using rule 62 (term_1 -> empty .)
    RIGHT_PAR       reduce using rule 62 (term_1 -> empty .)
    SEMICOLON       reduce using rule 62 (term_1 -> empty .)
    COMMA           reduce using rule 62 (term_1 -> empty .)


state 144

    (63) factor -> LEFT_PAR sem_false_bottom_begin mega_exp . RIGHT_PAR sem_false_bottom_end

    RIGHT_PAR       shift and go to state 168


state 145

    (21) var_cte -> ID sem_push_operand array .

    MULTIPLY        reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    DIVIDE          reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    PLUS            reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    MINUS           reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    IS_EQUAL_TO     reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    NOT_EQUAL_TO    reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    GREATER_THAN    reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    LESS_THAN       reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    AND             reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    OR              reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    RIGHT_BRACKET   reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    RIGHT_PAR       reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    SEMICOLON       reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    COMMA           reduce using rule 21 (var_cte -> ID sem_push_operand array .)


state 146

    (72) function_call -> ID sem_check_function LEFT_PAR . sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (106) sem_create_era -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    sem_create_era                 shift and go to state 169
    empty                          shift and go to state 170

state 147

    (32) block_2 -> RETURN sem_push_operator mega_exp . sem_return_function SEMICOLON block_3
    (96) sem_return_function -> . empty
    (80) empty -> .

    SEMICOLON       reduce using rule 80 (empty -> .)

    sem_return_function            shift and go to state 171
    empty                          shift and go to state 172

state 148

    (42) assignment -> ID sem_push_operand ASSIGN . sem_push_operator mega_exp sem_assign_value SEMICOLON
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 173
    empty                          shift and go to state 119

state 149

    (69) condition -> IF LEFT_PAR mega_exp . RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof

    RIGHT_PAR       shift and go to state 174


state 150

    (76) while_cycle -> WHILE sem_start_while LEFT_PAR . mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    mega_exp                       shift and go to state 175
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 151

    (77) read -> READ sem_push_operator LEFT_PAR . mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    mega_exp                       shift and go to state 176
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 152

    (78) write -> WRITE sem_push_operator LEFT_PAR . mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    mega_exp                       shift and go to state 177
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 153

    (11) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration . RIGHT_PAR block

    RIGHT_PAR       shift and go to state 178


state 154

    (12) param_declaration -> var_type . array ID sem_add_param
    (13) param_declaration -> var_type . array ID sem_add_param COMMA param_declaration
    (6) array -> . LEFT_BRACKET mega_exp RIGHT_BRACKET array
    (7) array -> . empty
    (80) empty -> .

    LEFT_BRACKET    shift and go to state 33
    ID              reduce using rule 80 (empty -> .)

    array                          shift and go to state 179
    empty                          shift and go to state 34

state 155

    (14) param_declaration -> empty .

    RIGHT_PAR       reduce using rule 14 (param_declaration -> empty .)


state 156

    (44) mega_exp_1 -> AND sem_push_operator mega_exp . sem_top_logical
    (97) sem_top_logical -> .

    RIGHT_BRACKET   reduce using rule 97 (sem_top_logical -> .)
    RIGHT_PAR       reduce using rule 97 (sem_top_logical -> .)
    SEMICOLON       reduce using rule 97 (sem_top_logical -> .)
    COMMA           reduce using rule 97 (sem_top_logical -> .)

    sem_top_logical                shift and go to state 180

state 157

    (45) mega_exp_1 -> OR sem_push_operator mega_exp . sem_top_logical
    (97) sem_top_logical -> .

    RIGHT_BRACKET   reduce using rule 97 (sem_top_logical -> .)
    RIGHT_PAR       reduce using rule 97 (sem_top_logical -> .)
    SEMICOLON       reduce using rule 97 (sem_top_logical -> .)
    COMMA           reduce using rule 97 (sem_top_logical -> .)

    sem_top_logical                shift and go to state 181

state 158

    (48) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp . sem_top_relational
    (98) sem_top_relational -> .

    AND             reduce using rule 98 (sem_top_relational -> .)
    OR              reduce using rule 98 (sem_top_relational -> .)
    RIGHT_BRACKET   reduce using rule 98 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 98 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 98 (sem_top_relational -> .)
    COMMA           reduce using rule 98 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 182

state 159

    (49) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp . sem_top_relational
    (98) sem_top_relational -> .

    AND             reduce using rule 98 (sem_top_relational -> .)
    OR              reduce using rule 98 (sem_top_relational -> .)
    RIGHT_BRACKET   reduce using rule 98 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 98 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 98 (sem_top_relational -> .)
    COMMA           reduce using rule 98 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 183

state 160

    (50) hyper_exp_1 -> GREATER_THAN sem_push_operator exp . sem_top_relational
    (98) sem_top_relational -> .

    AND             reduce using rule 98 (sem_top_relational -> .)
    OR              reduce using rule 98 (sem_top_relational -> .)
    RIGHT_BRACKET   reduce using rule 98 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 98 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 98 (sem_top_relational -> .)
    COMMA           reduce using rule 98 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 184

state 161

    (51) hyper_exp_1 -> LESS_THAN sem_push_operator exp . sem_top_relational
    (98) sem_top_relational -> .

    AND             reduce using rule 98 (sem_top_relational -> .)
    OR              reduce using rule 98 (sem_top_relational -> .)
    RIGHT_BRACKET   reduce using rule 98 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 98 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 98 (sem_top_relational -> .)
    COMMA           reduce using rule 98 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 185

state 162

    (52) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp . sem_top_relational
    (98) sem_top_relational -> .

    AND             reduce using rule 98 (sem_top_relational -> .)
    OR              reduce using rule 98 (sem_top_relational -> .)
    RIGHT_BRACKET   reduce using rule 98 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 98 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 98 (sem_top_relational -> .)
    COMMA           reduce using rule 98 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 186

state 163

    (53) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp . sem_top_relational
    (98) sem_top_relational -> .

    AND             reduce using rule 98 (sem_top_relational -> .)
    OR              reduce using rule 98 (sem_top_relational -> .)
    RIGHT_BRACKET   reduce using rule 98 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 98 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 98 (sem_top_relational -> .)
    COMMA           reduce using rule 98 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 187

state 164

    (56) exp_1 -> PLUS sem_push_operator . exp
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 188
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 165

    (57) exp_1 -> MINUS sem_push_operator . exp
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 189
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 166

    (60) term_1 -> MULTIPLY sem_push_operator . term
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    term                           shift and go to state 190
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 167

    (61) term_1 -> DIVIDE sem_push_operator . term
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    term                           shift and go to state 191
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 168

    (63) factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR . sem_false_bottom_end
    (93) sem_false_bottom_end -> . empty
    (80) empty -> .

    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    sem_false_bottom_end           shift and go to state 192
    empty                          shift and go to state 193

state 169

    (72) function_call -> ID sem_check_function LEFT_PAR sem_create_era . param_call RIGHT_PAR sem_count_params sem_gosub
    (73) param_call -> . mega_exp sem_check_param
    (74) param_call -> . mega_exp sem_check_param COMMA param_call
    (75) param_call -> . empty
    (43) mega_exp -> . hyper_exp mega_exp_1
    (80) empty -> .
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    param_call                     shift and go to state 194
    mega_exp                       shift and go to state 195
    empty                          shift and go to state 196
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56

state 170

    (106) sem_create_era -> empty .

    LEFT_PAR        reduce using rule 106 (sem_create_era -> empty .)
    CTE_I           reduce using rule 106 (sem_create_era -> empty .)
    CTE_D           reduce using rule 106 (sem_create_era -> empty .)
    ID              reduce using rule 106 (sem_create_era -> empty .)
    PLUS            reduce using rule 106 (sem_create_era -> empty .)
    MINUS           reduce using rule 106 (sem_create_era -> empty .)
    TRUE            reduce using rule 106 (sem_create_era -> empty .)
    FALSE           reduce using rule 106 (sem_create_era -> empty .)
    RIGHT_PAR       reduce using rule 106 (sem_create_era -> empty .)


state 171

    (32) block_2 -> RETURN sem_push_operator mega_exp sem_return_function . SEMICOLON block_3

    SEMICOLON       shift and go to state 197


state 172

    (96) sem_return_function -> empty .

    SEMICOLON       reduce using rule 96 (sem_return_function -> empty .)


state 173

    (42) assignment -> ID sem_push_operand ASSIGN sem_push_operator . mega_exp sem_assign_value SEMICOLON
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    mega_exp                       shift and go to state 198
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56
    empty                          shift and go to state 59

state 174

    (69) condition -> IF LEFT_PAR mega_exp RIGHT_PAR . sem_end_condition block condition_1 sem_fill_gotof
    (99) sem_end_condition -> . empty
    (80) empty -> .

    LEFT_BRACE      reduce using rule 80 (empty -> .)

    sem_end_condition              shift and go to state 199
    empty                          shift and go to state 200

state 175

    (76) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp . RIGHT_PAR sem_end_condition block sem_end_while

    RIGHT_PAR       shift and go to state 201


state 176

    (77) read -> READ sem_push_operator LEFT_PAR mega_exp . RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_PAR       shift and go to state 202


state 177

    (78) write -> WRITE sem_push_operator LEFT_PAR mega_exp . RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_PAR       shift and go to state 203


state 178

    (11) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR . block
    (29) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 40

    block                          shift and go to state 204

state 179

    (12) param_declaration -> var_type array . ID sem_add_param
    (13) param_declaration -> var_type array . ID sem_add_param COMMA param_declaration

    ID              shift and go to state 205


state 180

    (44) mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .

    RIGHT_BRACKET   reduce using rule 44 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)
    RIGHT_PAR       reduce using rule 44 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)
    SEMICOLON       reduce using rule 44 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)
    COMMA           reduce using rule 44 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)


state 181

    (45) mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .

    RIGHT_BRACKET   reduce using rule 45 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)
    RIGHT_PAR       reduce using rule 45 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)
    SEMICOLON       reduce using rule 45 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)
    COMMA           reduce using rule 45 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)


state 182

    (48) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_BRACKET   reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 183

    (49) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_BRACKET   reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 184

    (50) hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .

    AND             reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_BRACKET   reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)


state 185

    (51) hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .

    AND             reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_BRACKET   reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)


state 186

    (52) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_BRACKET   reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 187

    (53) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_BRACKET   reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 188

    (56) exp_1 -> PLUS sem_push_operator exp .

    IS_EQUAL_TO     reduce using rule 56 (exp_1 -> PLUS sem_push_operator exp .)
    NOT_EQUAL_TO    reduce using rule 56 (exp_1 -> PLUS sem_push_operator exp .)
    GREATER_THAN    reduce using rule 56 (exp_1 -> PLUS sem_push_operator exp .)
    LESS_THAN       reduce using rule 56 (exp_1 -> PLUS sem_push_operator exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 56 (exp_1 -> PLUS sem_push_operator exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 56 (exp_1 -> PLUS sem_push_operator exp .)
    AND             reduce using rule 56 (exp_1 -> PLUS sem_push_operator exp .)
    OR              reduce using rule 56 (exp_1 -> PLUS sem_push_operator exp .)
    RIGHT_BRACKET   reduce using rule 56 (exp_1 -> PLUS sem_push_operator exp .)
    RIGHT_PAR       reduce using rule 56 (exp_1 -> PLUS sem_push_operator exp .)
    SEMICOLON       reduce using rule 56 (exp_1 -> PLUS sem_push_operator exp .)
    COMMA           reduce using rule 56 (exp_1 -> PLUS sem_push_operator exp .)


state 189

    (57) exp_1 -> MINUS sem_push_operator exp .

    IS_EQUAL_TO     reduce using rule 57 (exp_1 -> MINUS sem_push_operator exp .)
    NOT_EQUAL_TO    reduce using rule 57 (exp_1 -> MINUS sem_push_operator exp .)
    GREATER_THAN    reduce using rule 57 (exp_1 -> MINUS sem_push_operator exp .)
    LESS_THAN       reduce using rule 57 (exp_1 -> MINUS sem_push_operator exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 57 (exp_1 -> MINUS sem_push_operator exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 57 (exp_1 -> MINUS sem_push_operator exp .)
    AND             reduce using rule 57 (exp_1 -> MINUS sem_push_operator exp .)
    OR              reduce using rule 57 (exp_1 -> MINUS sem_push_operator exp .)
    RIGHT_BRACKET   reduce using rule 57 (exp_1 -> MINUS sem_push_operator exp .)
    RIGHT_PAR       reduce using rule 57 (exp_1 -> MINUS sem_push_operator exp .)
    SEMICOLON       reduce using rule 57 (exp_1 -> MINUS sem_push_operator exp .)
    COMMA           reduce using rule 57 (exp_1 -> MINUS sem_push_operator exp .)


state 190

    (60) term_1 -> MULTIPLY sem_push_operator term .

    PLUS            reduce using rule 60 (term_1 -> MULTIPLY sem_push_operator term .)
    MINUS           reduce using rule 60 (term_1 -> MULTIPLY sem_push_operator term .)
    IS_EQUAL_TO     reduce using rule 60 (term_1 -> MULTIPLY sem_push_operator term .)
    NOT_EQUAL_TO    reduce using rule 60 (term_1 -> MULTIPLY sem_push_operator term .)
    GREATER_THAN    reduce using rule 60 (term_1 -> MULTIPLY sem_push_operator term .)
    LESS_THAN       reduce using rule 60 (term_1 -> MULTIPLY sem_push_operator term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 60 (term_1 -> MULTIPLY sem_push_operator term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 60 (term_1 -> MULTIPLY sem_push_operator term .)
    AND             reduce using rule 60 (term_1 -> MULTIPLY sem_push_operator term .)
    OR              reduce using rule 60 (term_1 -> MULTIPLY sem_push_operator term .)
    RIGHT_BRACKET   reduce using rule 60 (term_1 -> MULTIPLY sem_push_operator term .)
    RIGHT_PAR       reduce using rule 60 (term_1 -> MULTIPLY sem_push_operator term .)
    SEMICOLON       reduce using rule 60 (term_1 -> MULTIPLY sem_push_operator term .)
    COMMA           reduce using rule 60 (term_1 -> MULTIPLY sem_push_operator term .)


state 191

    (61) term_1 -> DIVIDE sem_push_operator term .

    PLUS            reduce using rule 61 (term_1 -> DIVIDE sem_push_operator term .)
    MINUS           reduce using rule 61 (term_1 -> DIVIDE sem_push_operator term .)
    IS_EQUAL_TO     reduce using rule 61 (term_1 -> DIVIDE sem_push_operator term .)
    NOT_EQUAL_TO    reduce using rule 61 (term_1 -> DIVIDE sem_push_operator term .)
    GREATER_THAN    reduce using rule 61 (term_1 -> DIVIDE sem_push_operator term .)
    LESS_THAN       reduce using rule 61 (term_1 -> DIVIDE sem_push_operator term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 61 (term_1 -> DIVIDE sem_push_operator term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 61 (term_1 -> DIVIDE sem_push_operator term .)
    AND             reduce using rule 61 (term_1 -> DIVIDE sem_push_operator term .)
    OR              reduce using rule 61 (term_1 -> DIVIDE sem_push_operator term .)
    RIGHT_BRACKET   reduce using rule 61 (term_1 -> DIVIDE sem_push_operator term .)
    RIGHT_PAR       reduce using rule 61 (term_1 -> DIVIDE sem_push_operator term .)
    SEMICOLON       reduce using rule 61 (term_1 -> DIVIDE sem_push_operator term .)
    COMMA           reduce using rule 61 (term_1 -> DIVIDE sem_push_operator term .)


state 192

    (63) factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .

    MULTIPLY        reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    DIVIDE          reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    PLUS            reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    MINUS           reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    IS_EQUAL_TO     reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    NOT_EQUAL_TO    reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    GREATER_THAN    reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    LESS_THAN       reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    AND             reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    OR              reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    RIGHT_BRACKET   reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    RIGHT_PAR       reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    SEMICOLON       reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    COMMA           reduce using rule 63 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)


state 193

    (93) sem_false_bottom_end -> empty .

    MULTIPLY        reduce using rule 93 (sem_false_bottom_end -> empty .)
    DIVIDE          reduce using rule 93 (sem_false_bottom_end -> empty .)
    PLUS            reduce using rule 93 (sem_false_bottom_end -> empty .)
    MINUS           reduce using rule 93 (sem_false_bottom_end -> empty .)
    IS_EQUAL_TO     reduce using rule 93 (sem_false_bottom_end -> empty .)
    NOT_EQUAL_TO    reduce using rule 93 (sem_false_bottom_end -> empty .)
    GREATER_THAN    reduce using rule 93 (sem_false_bottom_end -> empty .)
    LESS_THAN       reduce using rule 93 (sem_false_bottom_end -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 93 (sem_false_bottom_end -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 93 (sem_false_bottom_end -> empty .)
    AND             reduce using rule 93 (sem_false_bottom_end -> empty .)
    OR              reduce using rule 93 (sem_false_bottom_end -> empty .)
    RIGHT_BRACKET   reduce using rule 93 (sem_false_bottom_end -> empty .)
    RIGHT_PAR       reduce using rule 93 (sem_false_bottom_end -> empty .)
    SEMICOLON       reduce using rule 93 (sem_false_bottom_end -> empty .)
    COMMA           reduce using rule 93 (sem_false_bottom_end -> empty .)


state 194

    (72) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call . RIGHT_PAR sem_count_params sem_gosub

    RIGHT_PAR       shift and go to state 206


state 195

    (73) param_call -> mega_exp . sem_check_param
    (74) param_call -> mega_exp . sem_check_param COMMA param_call
    (107) sem_check_param -> . empty
    (80) empty -> .

    COMMA           reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    sem_check_param                shift and go to state 207
    empty                          shift and go to state 208

state 196

    (75) param_call -> empty .
    (68) factor_1 -> empty .

    RIGHT_PAR       reduce using rule 75 (param_call -> empty .)
    CTE_I           reduce using rule 68 (factor_1 -> empty .)
    CTE_D           reduce using rule 68 (factor_1 -> empty .)
    ID              reduce using rule 68 (factor_1 -> empty .)
    TRUE            reduce using rule 68 (factor_1 -> empty .)
    FALSE           reduce using rule 68 (factor_1 -> empty .)


state 197

    (32) block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON . block_3
    (34) block_3 -> . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 81

    block_3                        shift and go to state 209

state 198

    (42) assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp . sem_assign_value SEMICOLON
    (94) sem_assign_value -> . empty
    (80) empty -> .

    SEMICOLON       reduce using rule 80 (empty -> .)

    sem_assign_value               shift and go to state 210
    empty                          shift and go to state 211

state 199

    (69) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition . block condition_1 sem_fill_gotof
    (29) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 40

    block                          shift and go to state 212

state 200

    (99) sem_end_condition -> empty .

    LEFT_BRACE      reduce using rule 99 (sem_end_condition -> empty .)


state 201

    (76) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR . sem_end_condition block sem_end_while
    (99) sem_end_condition -> . empty
    (80) empty -> .

    LEFT_BRACE      reduce using rule 80 (empty -> .)

    sem_end_condition              shift and go to state 213
    empty                          shift and go to state 200

state 202

    (77) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR . sem_read_write SEMICOLON
    (95) sem_read_write -> . empty
    (80) empty -> .

    SEMICOLON       reduce using rule 80 (empty -> .)

    sem_read_write                 shift and go to state 214
    empty                          shift and go to state 215

state 203

    (78) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR . sem_read_write SEMICOLON
    (95) sem_read_write -> . empty
    (80) empty -> .

    SEMICOLON       reduce using rule 80 (empty -> .)

    sem_read_write                 shift and go to state 216
    empty                          shift and go to state 215

state 204

    (11) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .

    FUNCTION        reduce using rule 11 (func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .)
    MAIN            reduce using rule 11 (func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .)


state 205

    (12) param_declaration -> var_type array ID . sem_add_param
    (13) param_declaration -> var_type array ID . sem_add_param COMMA param_declaration
    (104) sem_add_param -> . empty
    (80) empty -> .

    COMMA           reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    sem_add_param                  shift and go to state 217
    empty                          shift and go to state 218

state 206

    (72) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR . sem_count_params sem_gosub
    (108) sem_count_params -> . empty
    (80) empty -> .

    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    sem_count_params               shift and go to state 219
    empty                          shift and go to state 220

state 207

    (73) param_call -> mega_exp sem_check_param .
    (74) param_call -> mega_exp sem_check_param . COMMA param_call

    RIGHT_PAR       reduce using rule 73 (param_call -> mega_exp sem_check_param .)
    COMMA           shift and go to state 221


state 208

    (107) sem_check_param -> empty .

    COMMA           reduce using rule 107 (sem_check_param -> empty .)
    RIGHT_PAR       reduce using rule 107 (sem_check_param -> empty .)


state 209

    (32) block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .

    $end            reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    FUNCTION        reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    MAIN            reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    ELSE            reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    RETURN          reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    ID              reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    IF              reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    WHILE           reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    READ            reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    WRITE           reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    RIGHT_BRACE     reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    INT             reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    DOUBLE          reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    BOOL            reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)


state 210

    (42) assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value . SEMICOLON

    SEMICOLON       shift and go to state 222


state 211

    (94) sem_assign_value -> empty .

    SEMICOLON       reduce using rule 94 (sem_assign_value -> empty .)


state 212

    (69) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block . condition_1 sem_fill_gotof
    (70) condition_1 -> . ELSE sem_else_condition block
    (71) condition_1 -> . empty
    (80) empty -> .

    ELSE            shift and go to state 224
    RETURN          reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    IF              reduce using rule 80 (empty -> .)
    WHILE           reduce using rule 80 (empty -> .)
    READ            reduce using rule 80 (empty -> .)
    WRITE           reduce using rule 80 (empty -> .)
    RIGHT_BRACE     reduce using rule 80 (empty -> .)
    INT             reduce using rule 80 (empty -> .)
    DOUBLE          reduce using rule 80 (empty -> .)
    BOOL            reduce using rule 80 (empty -> .)

    condition_1                    shift and go to state 223
    empty                          shift and go to state 225

state 213

    (76) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition . block sem_end_while
    (29) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 40

    block                          shift and go to state 226

state 214

    (77) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write . SEMICOLON

    SEMICOLON       shift and go to state 227


state 215

    (95) sem_read_write -> empty .

    SEMICOLON       reduce using rule 95 (sem_read_write -> empty .)


state 216

    (78) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write . SEMICOLON

    SEMICOLON       shift and go to state 228


state 217

    (12) param_declaration -> var_type array ID sem_add_param .
    (13) param_declaration -> var_type array ID sem_add_param . COMMA param_declaration

    RIGHT_PAR       reduce using rule 12 (param_declaration -> var_type array ID sem_add_param .)
    COMMA           shift and go to state 229


state 218

    (104) sem_add_param -> empty .

    COMMA           reduce using rule 104 (sem_add_param -> empty .)
    RIGHT_PAR       reduce using rule 104 (sem_add_param -> empty .)


state 219

    (72) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params . sem_gosub
    (109) sem_gosub -> . empty
    (80) empty -> .

    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    sem_gosub                      shift and go to state 230
    empty                          shift and go to state 231

state 220

    (108) sem_count_params -> empty .

    MULTIPLY        reduce using rule 108 (sem_count_params -> empty .)
    DIVIDE          reduce using rule 108 (sem_count_params -> empty .)
    PLUS            reduce using rule 108 (sem_count_params -> empty .)
    MINUS           reduce using rule 108 (sem_count_params -> empty .)
    IS_EQUAL_TO     reduce using rule 108 (sem_count_params -> empty .)
    NOT_EQUAL_TO    reduce using rule 108 (sem_count_params -> empty .)
    GREATER_THAN    reduce using rule 108 (sem_count_params -> empty .)
    LESS_THAN       reduce using rule 108 (sem_count_params -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 108 (sem_count_params -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 108 (sem_count_params -> empty .)
    AND             reduce using rule 108 (sem_count_params -> empty .)
    OR              reduce using rule 108 (sem_count_params -> empty .)
    RIGHT_BRACKET   reduce using rule 108 (sem_count_params -> empty .)
    SEMICOLON       reduce using rule 108 (sem_count_params -> empty .)
    RIGHT_PAR       reduce using rule 108 (sem_count_params -> empty .)
    COMMA           reduce using rule 108 (sem_count_params -> empty .)


state 221

    (74) param_call -> mega_exp sem_check_param COMMA . param_call
    (73) param_call -> . mega_exp sem_check_param
    (74) param_call -> . mega_exp sem_check_param COMMA param_call
    (75) param_call -> . empty
    (43) mega_exp -> . hyper_exp mega_exp_1
    (80) empty -> .
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term exp_1
    (59) term -> . factor sem_top_factor term_1
    (63) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (64) factor -> . var_cte
    (65) factor -> . factor_1 var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . function_call
    (66) factor_1 -> . PLUS
    (67) factor_1 -> . MINUS
    (68) factor_1 -> . empty
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE
    (72) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    LEFT_PAR        shift and go to state 49
    CTE_I           shift and go to state 52
    CTE_D           shift and go to state 53
    ID              shift and go to state 55
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    mega_exp                       shift and go to state 195
    param_call                     shift and go to state 232
    empty                          shift and go to state 196
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 48
    var_cte                        shift and go to state 50
    factor_1                       shift and go to state 51
    cte_b                          shift and go to state 54
    function_call                  shift and go to state 56

state 222

    (42) assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .

    RETURN          reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    ID              reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    IF              reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    WHILE           reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    READ            reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    WRITE           reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    RIGHT_BRACE     reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    INT             reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    DOUBLE          reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    BOOL            reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)


state 223

    (69) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 . sem_fill_gotof
    (100) sem_fill_gotof -> . empty
    (80) empty -> .

    RETURN          reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    IF              reduce using rule 80 (empty -> .)
    WHILE           reduce using rule 80 (empty -> .)
    READ            reduce using rule 80 (empty -> .)
    WRITE           reduce using rule 80 (empty -> .)
    RIGHT_BRACE     reduce using rule 80 (empty -> .)
    INT             reduce using rule 80 (empty -> .)
    DOUBLE          reduce using rule 80 (empty -> .)
    BOOL            reduce using rule 80 (empty -> .)

    sem_fill_gotof                 shift and go to state 233
    empty                          shift and go to state 234

state 224

    (70) condition_1 -> ELSE . sem_else_condition block
    (101) sem_else_condition -> . empty
    (80) empty -> .

    LEFT_BRACE      reduce using rule 80 (empty -> .)

    sem_else_condition             shift and go to state 235
    empty                          shift and go to state 236

state 225

    (71) condition_1 -> empty .

    RETURN          reduce using rule 71 (condition_1 -> empty .)
    ID              reduce using rule 71 (condition_1 -> empty .)
    IF              reduce using rule 71 (condition_1 -> empty .)
    WHILE           reduce using rule 71 (condition_1 -> empty .)
    READ            reduce using rule 71 (condition_1 -> empty .)
    WRITE           reduce using rule 71 (condition_1 -> empty .)
    RIGHT_BRACE     reduce using rule 71 (condition_1 -> empty .)
    INT             reduce using rule 71 (condition_1 -> empty .)
    DOUBLE          reduce using rule 71 (condition_1 -> empty .)
    BOOL            reduce using rule 71 (condition_1 -> empty .)


state 226

    (76) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block . sem_end_while
    (103) sem_end_while -> . empty
    (80) empty -> .

    RETURN          reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    IF              reduce using rule 80 (empty -> .)
    WHILE           reduce using rule 80 (empty -> .)
    READ            reduce using rule 80 (empty -> .)
    WRITE           reduce using rule 80 (empty -> .)
    RIGHT_BRACE     reduce using rule 80 (empty -> .)
    INT             reduce using rule 80 (empty -> .)
    DOUBLE          reduce using rule 80 (empty -> .)
    BOOL            reduce using rule 80 (empty -> .)

    sem_end_while                  shift and go to state 237
    empty                          shift and go to state 238

state 227

    (77) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .

    RETURN          reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    ID              reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    IF              reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WHILE           reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    READ            reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WRITE           reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RIGHT_BRACE     reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    INT             reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    DOUBLE          reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    BOOL            reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)


state 228

    (78) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .

    RETURN          reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    ID              reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    IF              reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WHILE           reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    READ            reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WRITE           reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RIGHT_BRACE     reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    INT             reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    DOUBLE          reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    BOOL            reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)


state 229

    (13) param_declaration -> var_type array ID sem_add_param COMMA . param_declaration
    (12) param_declaration -> . var_type array ID sem_add_param
    (13) param_declaration -> . var_type array ID sem_add_param COMMA param_declaration
    (14) param_declaration -> . empty
    (15) var_type -> . INT sem_get_type
    (16) var_type -> . DOUBLE sem_get_type
    (17) var_type -> . BOOL sem_get_type
    (80) empty -> .

    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    var_type                       shift and go to state 154
    param_declaration              shift and go to state 239
    empty                          shift and go to state 155

state 230

    (72) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .

    MULTIPLY        reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    DIVIDE          reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    PLUS            reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    MINUS           reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    IS_EQUAL_TO     reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    NOT_EQUAL_TO    reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    GREATER_THAN    reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    LESS_THAN       reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    AND             reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    OR              reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    RIGHT_BRACKET   reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    SEMICOLON       reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    RIGHT_PAR       reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)
    COMMA           reduce using rule 72 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)


state 231

    (109) sem_gosub -> empty .

    MULTIPLY        reduce using rule 109 (sem_gosub -> empty .)
    DIVIDE          reduce using rule 109 (sem_gosub -> empty .)
    PLUS            reduce using rule 109 (sem_gosub -> empty .)
    MINUS           reduce using rule 109 (sem_gosub -> empty .)
    IS_EQUAL_TO     reduce using rule 109 (sem_gosub -> empty .)
    NOT_EQUAL_TO    reduce using rule 109 (sem_gosub -> empty .)
    GREATER_THAN    reduce using rule 109 (sem_gosub -> empty .)
    LESS_THAN       reduce using rule 109 (sem_gosub -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 109 (sem_gosub -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 109 (sem_gosub -> empty .)
    AND             reduce using rule 109 (sem_gosub -> empty .)
    OR              reduce using rule 109 (sem_gosub -> empty .)
    RIGHT_BRACKET   reduce using rule 109 (sem_gosub -> empty .)
    SEMICOLON       reduce using rule 109 (sem_gosub -> empty .)
    RIGHT_PAR       reduce using rule 109 (sem_gosub -> empty .)
    COMMA           reduce using rule 109 (sem_gosub -> empty .)


state 232

    (74) param_call -> mega_exp sem_check_param COMMA param_call .

    RIGHT_PAR       reduce using rule 74 (param_call -> mega_exp sem_check_param COMMA param_call .)


state 233

    (69) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .

    RETURN          reduce using rule 69 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    ID              reduce using rule 69 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    IF              reduce using rule 69 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    WHILE           reduce using rule 69 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    READ            reduce using rule 69 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    WRITE           reduce using rule 69 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    RIGHT_BRACE     reduce using rule 69 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    INT             reduce using rule 69 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    DOUBLE          reduce using rule 69 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    BOOL            reduce using rule 69 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)


state 234

    (100) sem_fill_gotof -> empty .

    RETURN          reduce using rule 100 (sem_fill_gotof -> empty .)
    ID              reduce using rule 100 (sem_fill_gotof -> empty .)
    IF              reduce using rule 100 (sem_fill_gotof -> empty .)
    WHILE           reduce using rule 100 (sem_fill_gotof -> empty .)
    READ            reduce using rule 100 (sem_fill_gotof -> empty .)
    WRITE           reduce using rule 100 (sem_fill_gotof -> empty .)
    RIGHT_BRACE     reduce using rule 100 (sem_fill_gotof -> empty .)
    INT             reduce using rule 100 (sem_fill_gotof -> empty .)
    DOUBLE          reduce using rule 100 (sem_fill_gotof -> empty .)
    BOOL            reduce using rule 100 (sem_fill_gotof -> empty .)


state 235

    (70) condition_1 -> ELSE sem_else_condition . block
    (29) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 40

    block                          shift and go to state 240

state 236

    (101) sem_else_condition -> empty .

    LEFT_BRACE      reduce using rule 101 (sem_else_condition -> empty .)


state 237

    (76) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .

    RETURN          reduce using rule 76 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    ID              reduce using rule 76 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    IF              reduce using rule 76 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    WHILE           reduce using rule 76 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    READ            reduce using rule 76 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    WRITE           reduce using rule 76 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    RIGHT_BRACE     reduce using rule 76 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    INT             reduce using rule 76 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    DOUBLE          reduce using rule 76 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    BOOL            reduce using rule 76 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)


state 238

    (103) sem_end_while -> empty .

    RETURN          reduce using rule 103 (sem_end_while -> empty .)
    ID              reduce using rule 103 (sem_end_while -> empty .)
    IF              reduce using rule 103 (sem_end_while -> empty .)
    WHILE           reduce using rule 103 (sem_end_while -> empty .)
    READ            reduce using rule 103 (sem_end_while -> empty .)
    WRITE           reduce using rule 103 (sem_end_while -> empty .)
    RIGHT_BRACE     reduce using rule 103 (sem_end_while -> empty .)
    INT             reduce using rule 103 (sem_end_while -> empty .)
    DOUBLE          reduce using rule 103 (sem_end_while -> empty .)
    BOOL            reduce using rule 103 (sem_end_while -> empty .)


state 239

    (13) param_declaration -> var_type array ID sem_add_param COMMA param_declaration .

    RIGHT_PAR       reduce using rule 13 (param_declaration -> var_type array ID sem_add_param COMMA param_declaration .)


state 240

    (70) condition_1 -> ELSE sem_else_condition block .

    RETURN          reduce using rule 70 (condition_1 -> ELSE sem_else_condition block .)
    ID              reduce using rule 70 (condition_1 -> ELSE sem_else_condition block .)
    IF              reduce using rule 70 (condition_1 -> ELSE sem_else_condition block .)
    WHILE           reduce using rule 70 (condition_1 -> ELSE sem_else_condition block .)
    READ            reduce using rule 70 (condition_1 -> ELSE sem_else_condition block .)
    WRITE           reduce using rule 70 (condition_1 -> ELSE sem_else_condition block .)
    RIGHT_BRACE     reduce using rule 70 (condition_1 -> ELSE sem_else_condition block .)
    INT             reduce using rule 70 (condition_1 -> ELSE sem_else_condition block .)
    DOUBLE          reduce using rule 70 (condition_1 -> ELSE sem_else_condition block .)
    BOOL            reduce using rule 70 (condition_1 -> ELSE sem_else_condition block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 2 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 33 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 33 resolved as shift
WARNING: shift/reduce conflict for ID in state 33 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 33 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 33 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for IF in state 40 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 40 resolved as shift
WARNING: shift/reduce conflict for READ in state 40 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 40 resolved as shift
WARNING: shift/reduce conflict for RIGHT_BRACE in state 40 resolved as shift
WARNING: shift/reduce conflict for INT in state 40 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 40 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 40 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 65 resolved as shift
WARNING: shift/reduce conflict for ID in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 65 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 65 resolved as shift
WARNING: shift/reduce conflict for READ in state 65 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 65 resolved as shift
WARNING: shift/reduce conflict for RIGHT_BRACE in state 65 resolved as shift
WARNING: shift/reduce conflict for INT in state 65 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 65 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 65 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 104 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 104 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 104 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 118 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 118 resolved as shift
WARNING: shift/reduce conflict for ID in state 118 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 118 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 118 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 121 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 121 resolved as shift
WARNING: shift/reduce conflict for ID in state 121 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 121 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 121 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 128 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 128 resolved as shift
WARNING: shift/reduce conflict for ID in state 128 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 128 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 128 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 129 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 129 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 129 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 129 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 130 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 130 resolved as shift
WARNING: shift/reduce conflict for ID in state 130 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 130 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 130 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 131 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 131 resolved as shift
WARNING: shift/reduce conflict for ID in state 131 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 131 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 131 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 132 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 132 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 132 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 132 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 133 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 133 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 133 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 134 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 134 resolved as shift
WARNING: shift/reduce conflict for ID in state 134 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 134 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 134 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 135 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 135 resolved as shift
WARNING: shift/reduce conflict for ID in state 135 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 135 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 135 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 150 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 150 resolved as shift
WARNING: shift/reduce conflict for ID in state 150 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 150 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 150 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 151 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 151 resolved as shift
WARNING: shift/reduce conflict for ID in state 151 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 151 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 151 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 152 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 152 resolved as shift
WARNING: shift/reduce conflict for ID in state 152 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 152 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 152 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 164 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 164 resolved as shift
WARNING: shift/reduce conflict for ID in state 164 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 164 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 164 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 165 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 165 resolved as shift
WARNING: shift/reduce conflict for ID in state 165 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 165 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 165 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 166 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 166 resolved as shift
WARNING: shift/reduce conflict for ID in state 166 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 166 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 166 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 167 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 167 resolved as shift
WARNING: shift/reduce conflict for ID in state 167 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 167 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 167 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 169 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 169 resolved as shift
WARNING: shift/reduce conflict for ID in state 169 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 169 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 169 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 173 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 173 resolved as shift
WARNING: shift/reduce conflict for ID in state 173 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 173 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 173 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 221 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 221 resolved as shift
WARNING: shift/reduce conflict for ID in state 221 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 221 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 221 resolved as shift

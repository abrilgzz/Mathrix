Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD_COLS
    ADD_ROWS
    CTE_S
    FIND_DETERMINANT
    MULTIPLY_COLS
    MULTIPLY_MATRIX
    MULTIPLY_ROWS
    PRINT_MATRIX
    SWAP_COLS
    SWAP_ROWS
    TRANSPOSE_MATRIX

Grammar

Rule 0     S' -> start
Rule 1     start -> sem_start_program global_declaration
Rule 2     global_declaration -> var_declaration global_declaration
Rule 3     global_declaration -> func_declaration
Rule 4     var_declaration -> var_type ID sem_add_var SEMICOLON
Rule 5     var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix
Rule 6     var_declaration -> empty
Rule 7     matrix_declaration -> LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET
Rule 8     matrix_declaration -> empty
Rule 9     matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
Rule 10    matrix -> empty
Rule 11    func_declaration -> func_signature func_declaration
Rule 12    func_declaration -> main
Rule 13    func_signature -> FUNCTION func_type matrix_declaration func_signature_1 sem_end_func
Rule 14    func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block
Rule 15    param_declaration -> var_type ID matrix_declaration sem_add_param
Rule 16    param_declaration -> var_type ID matrix_declaration sem_add_param COMMA param_declaration
Rule 17    param_declaration -> empty
Rule 18    var_type -> INT sem_get_type
Rule 19    var_type -> DOUBLE sem_get_type
Rule 20    var_type -> BOOL sem_get_type
Rule 21    var_cte -> CTE_I sem_push_constant_int
Rule 22    var_cte -> CTE_D sem_push_constant_double
Rule 23    var_cte -> cte_b sem_push_constant_bool
Rule 24    var_cte -> ID sem_push_operand matrix
Rule 25    var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
Rule 26    cte_b -> TRUE
Rule 27    cte_b -> FALSE
Rule 28    func_type -> INT sem_get_type
Rule 29    func_type -> DOUBLE sem_get_type
Rule 30    func_type -> BOOL sem_get_type
Rule 31    func_type -> VOID sem_get_type
Rule 32    block -> LEFT_BRACE var_declaration statements RIGHT_BRACE
Rule 33    statements -> statement statements
Rule 34    statements -> empty
Rule 35    statement -> assignment
Rule 36    statement -> condition
Rule 37    statement -> return
Rule 38    statement -> function_call
Rule 39    statement -> while_cycle
Rule 40    statement -> read
Rule 41    statement -> write
Rule 42    assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
Rule 43    return -> RETURN mega_exp sem_return_function SEMICOLON
Rule 44    mega_exp -> hyper_exp mega_exp_1
Rule 45    mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical
Rule 46    mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical
Rule 47    mega_exp_1 -> empty
Rule 48    hyper_exp -> exp hyper_exp_1
Rule 49    hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 50    hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 51    hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational
Rule 52    hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational
Rule 53    hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 54    hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 55    hyper_exp_1 -> empty
Rule 56    exp -> term sem_top_term
Rule 57    exp -> term sem_top_term PLUS sem_push_operator exp
Rule 58    exp -> term sem_top_term MINUS sem_push_operator exp
Rule 59    term -> factor sem_top_factor
Rule 60    term -> factor sem_top_factor MULTIPLY sem_push_operator term
Rule 61    term -> factor sem_top_factor DIVIDE sem_push_operator term
Rule 62    factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
Rule 63    factor -> var_cte
Rule 64    factor -> PLUS sem_push_operator var_cte
Rule 65    factor -> MINUS sem_push_operator var_cte
Rule 66    condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
Rule 67    condition_1 -> ELSE sem_else_condition block
Rule 68    condition_1 -> empty
Rule 69    function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
Rule 70    param_call -> mega_exp sem_check_param
Rule 71    param_call -> mega_exp sem_check_param COMMA param_call
Rule 72    param_call -> empty
Rule 73    while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
Rule 74    read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
Rule 75    write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
Rule 76    main -> MAIN sem_fill_goto_main block sem_fill_eras sem_end_main
Rule 77    empty -> <empty>
Rule 78    sem_get_type -> empty
Rule 79    sem_add_func -> empty
Rule 80    sem_end_func -> empty
Rule 81    sem_add_var -> empty
Rule 82    sem_push_operator -> empty
Rule 83    sem_push_operand -> empty
Rule 84    sem_push_constant_int -> empty
Rule 85    sem_push_constant_double -> empty
Rule 86    sem_push_constant_bool -> empty
Rule 87    sem_top_factor -> empty
Rule 88    sem_top_term -> empty
Rule 89    sem_false_bottom_begin -> empty
Rule 90    sem_false_bottom_end -> empty
Rule 91    sem_assign_value -> empty
Rule 92    sem_read_write -> empty
Rule 93    sem_return_function -> empty
Rule 94    sem_top_logical -> <empty>
Rule 95    sem_top_relational -> <empty>
Rule 96    sem_end_condition -> empty
Rule 97    sem_fill_gotof -> empty
Rule 98    sem_else_condition -> empty
Rule 99    sem_start_while -> empty
Rule 100   sem_end_while -> empty
Rule 101   sem_add_param -> empty
Rule 102   sem_check_function -> empty
Rule 103   sem_create_era -> empty
Rule 104   sem_check_param -> empty
Rule 105   sem_count_params -> empty
Rule 106   sem_gosub -> empty
Rule 107   sem_start_program -> empty
Rule 108   sem_fill_goto_main -> empty
Rule 109   sem_end_main -> empty
Rule 110   sem_fill_eras -> empty
Rule 111   sem_get_matrix_id -> empty
Rule 112   sem_get_dim1 -> empty
Rule 113   sem_get_dim2 -> empty
Rule 114   sem_add_matrix -> empty
Rule 115   sem_check_dim1 -> empty
Rule 116   sem_ver_dim1 -> empty
Rule 117   sem_check_dim2 -> empty
Rule 118   sem_ver_dim2 -> empty

Terminals, with rules where they appear

ADD_COLS             : 
ADD_ROWS             : 
AND                  : 45
ASSIGN               : 42
BOOL                 : 20 30
COMMA                : 16 71
CTE_D                : 22
CTE_I                : 7 7 21
CTE_S                : 
DIVIDE               : 61
DOUBLE               : 19 29
ELSE                 : 67
FALSE                : 27
FIND_DETERMINANT     : 
FUNCTION             : 13
GREATER_THAN         : 51
GREATER_THAN_OR_EQUAL_TO : 53
ID                   : 4 5 14 15 16 24 25 42 69
IF                   : 66
INT                  : 18 28
IS_EQUAL_TO          : 49
LEFT_BRACE           : 32
LEFT_BRACKET         : 7 7 9 9
LEFT_PAR             : 14 25 62 66 69 73 74 75
LESS_THAN            : 52
LESS_THAN_OR_EQUAL_TO : 54
MAIN                 : 76
MINUS                : 58 65
MULTIPLY             : 60
MULTIPLY_COLS        : 
MULTIPLY_MATRIX      : 
MULTIPLY_ROWS        : 
NOT_EQUAL_TO         : 50
OR                   : 46
PLUS                 : 57 64
PRINT_MATRIX         : 
READ                 : 74
RETURN               : 43
RIGHT_BRACE          : 32
RIGHT_BRACKET        : 7 7 9 9
RIGHT_PAR            : 14 25 62 66 69 73 74 75
SEMICOLON            : 4 5 42 43 69 74 75
SWAP_COLS            : 
SWAP_ROWS            : 
TRANSPOSE_MATRIX     : 
TRUE                 : 26
VOID                 : 31
WHILE                : 73
WRITE                : 75
error                : 

Nonterminals, with rules where they appear

assignment           : 35
block                : 14 66 67 73 76
condition            : 36
condition_1          : 66
cte_b                : 23
empty                : 6 8 10 17 34 47 55 68 72 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118
exp                  : 9 9 48 49 50 51 52 53 54 57 58
factor               : 59 60 61
func_declaration     : 3 11
func_signature       : 11
func_signature_1     : 13
func_type            : 13
function_call        : 38
global_declaration   : 1 2
hyper_exp            : 44
hyper_exp_1          : 48
main                 : 12
matrix               : 24 42
matrix_declaration   : 5 13 15 16
mega_exp             : 42 43 45 46 62 66 70 71 73 74 75
mega_exp_1           : 44
param_call           : 25 69 71
param_declaration    : 14 16
read                 : 40
return               : 37
sem_add_func         : 14
sem_add_matrix       : 5
sem_add_param        : 15 16
sem_add_var          : 4
sem_assign_value     : 42
sem_check_dim1       : 9
sem_check_dim2       : 9
sem_check_function   : 25 69
sem_check_param      : 70 71
sem_count_params     : 25 69
sem_create_era       : 25 69
sem_else_condition   : 67
sem_end_condition    : 66 73
sem_end_func         : 13
sem_end_main         : 76
sem_end_while        : 73
sem_false_bottom_begin : 25 62
sem_false_bottom_end : 25 62
sem_fill_eras        : 76
sem_fill_goto_main   : 76
sem_fill_gotof       : 66
sem_get_dim1         : 7
sem_get_dim2         : 7
sem_get_matrix_id    : 5
sem_get_type         : 18 19 20 28 29 30 31
sem_gosub            : 25 69
sem_push_constant_bool : 23
sem_push_constant_double : 22
sem_push_constant_int : 21
sem_push_operand     : 24 42
sem_push_operator    : 42 45 46 49 50 51 52 53 54 57 58 60 61 64 65 74 75
sem_read_write       : 74 75
sem_return_function  : 43
sem_start_program    : 1
sem_start_while      : 73
sem_top_factor       : 59 60 61
sem_top_logical      : 45 46
sem_top_relational   : 49 50 51 52 53 54
sem_top_term         : 56 57 58
sem_ver_dim1         : 9
sem_ver_dim2         : 9
start                : 0
statement            : 33
statements           : 32 33
term                 : 56 57 58 60 61
var_cte              : 63 64 65
var_declaration      : 2 32
var_type             : 4 5 15 16
while_cycle          : 39
write                : 41

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . sem_start_program global_declaration
    (107) sem_start_program -> . empty
    (77) empty -> .

    INT             reduce using rule 77 (empty -> .)
    DOUBLE          reduce using rule 77 (empty -> .)
    BOOL            reduce using rule 77 (empty -> .)
    FUNCTION        reduce using rule 77 (empty -> .)
    MAIN            reduce using rule 77 (empty -> .)

    start                          shift and go to state 1
    sem_start_program              shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> sem_start_program . global_declaration
    (2) global_declaration -> . var_declaration global_declaration
    (3) global_declaration -> . func_declaration
    (4) var_declaration -> . var_type ID sem_add_var SEMICOLON
    (5) var_declaration -> . var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix
    (6) var_declaration -> . empty
    (11) func_declaration -> . func_signature func_declaration
    (12) func_declaration -> . main
    (18) var_type -> . INT sem_get_type
    (19) var_type -> . DOUBLE sem_get_type
    (20) var_type -> . BOOL sem_get_type
    (77) empty -> .
    (13) func_signature -> . FUNCTION func_type matrix_declaration func_signature_1 sem_end_func
    (76) main -> . MAIN sem_fill_goto_main block sem_fill_eras sem_end_main

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    FUNCTION        shift and go to state 14
    MAIN            shift and go to state 15

  ! INT             [ reduce using rule 77 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 77 (empty -> .) ]
  ! BOOL            [ reduce using rule 77 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 77 (empty -> .) ]
  ! MAIN            [ reduce using rule 77 (empty -> .) ]

    global_declaration             shift and go to state 4
    var_declaration                shift and go to state 5
    func_declaration               shift and go to state 6
    var_type                       shift and go to state 7
    empty                          shift and go to state 8
    func_signature                 shift and go to state 9
    main                           shift and go to state 10

state 3

    (107) sem_start_program -> empty .

    INT             reduce using rule 107 (sem_start_program -> empty .)
    DOUBLE          reduce using rule 107 (sem_start_program -> empty .)
    BOOL            reduce using rule 107 (sem_start_program -> empty .)
    FUNCTION        reduce using rule 107 (sem_start_program -> empty .)
    MAIN            reduce using rule 107 (sem_start_program -> empty .)


state 4

    (1) start -> sem_start_program global_declaration .

    $end            reduce using rule 1 (start -> sem_start_program global_declaration .)


state 5

    (2) global_declaration -> var_declaration . global_declaration
    (2) global_declaration -> . var_declaration global_declaration
    (3) global_declaration -> . func_declaration
    (4) var_declaration -> . var_type ID sem_add_var SEMICOLON
    (5) var_declaration -> . var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix
    (6) var_declaration -> . empty
    (11) func_declaration -> . func_signature func_declaration
    (12) func_declaration -> . main
    (18) var_type -> . INT sem_get_type
    (19) var_type -> . DOUBLE sem_get_type
    (20) var_type -> . BOOL sem_get_type
    (77) empty -> .
    (13) func_signature -> . FUNCTION func_type matrix_declaration func_signature_1 sem_end_func
    (76) main -> . MAIN sem_fill_goto_main block sem_fill_eras sem_end_main

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    FUNCTION        shift and go to state 14
    MAIN            shift and go to state 15

  ! INT             [ reduce using rule 77 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 77 (empty -> .) ]
  ! BOOL            [ reduce using rule 77 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 77 (empty -> .) ]
  ! MAIN            [ reduce using rule 77 (empty -> .) ]

    var_declaration                shift and go to state 5
    global_declaration             shift and go to state 16
    func_declaration               shift and go to state 6
    var_type                       shift and go to state 7
    empty                          shift and go to state 8
    func_signature                 shift and go to state 9
    main                           shift and go to state 10

state 6

    (3) global_declaration -> func_declaration .

    $end            reduce using rule 3 (global_declaration -> func_declaration .)


state 7

    (4) var_declaration -> var_type . ID sem_add_var SEMICOLON
    (5) var_declaration -> var_type . ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix

    ID              shift and go to state 17


state 8

    (6) var_declaration -> empty .

    INT             reduce using rule 6 (var_declaration -> empty .)
    DOUBLE          reduce using rule 6 (var_declaration -> empty .)
    BOOL            reduce using rule 6 (var_declaration -> empty .)
    FUNCTION        reduce using rule 6 (var_declaration -> empty .)
    MAIN            reduce using rule 6 (var_declaration -> empty .)
    ID              reduce using rule 6 (var_declaration -> empty .)
    IF              reduce using rule 6 (var_declaration -> empty .)
    RETURN          reduce using rule 6 (var_declaration -> empty .)
    WHILE           reduce using rule 6 (var_declaration -> empty .)
    READ            reduce using rule 6 (var_declaration -> empty .)
    WRITE           reduce using rule 6 (var_declaration -> empty .)
    RIGHT_BRACE     reduce using rule 6 (var_declaration -> empty .)


state 9

    (11) func_declaration -> func_signature . func_declaration
    (11) func_declaration -> . func_signature func_declaration
    (12) func_declaration -> . main
    (13) func_signature -> . FUNCTION func_type matrix_declaration func_signature_1 sem_end_func
    (76) main -> . MAIN sem_fill_goto_main block sem_fill_eras sem_end_main

    FUNCTION        shift and go to state 14
    MAIN            shift and go to state 15

    func_signature                 shift and go to state 9
    func_declaration               shift and go to state 18
    main                           shift and go to state 10

state 10

    (12) func_declaration -> main .

    $end            reduce using rule 12 (func_declaration -> main .)


state 11

    (18) var_type -> INT . sem_get_type
    (78) sem_get_type -> . empty
    (77) empty -> .

    ID              reduce using rule 77 (empty -> .)

    sem_get_type                   shift and go to state 19
    empty                          shift and go to state 20

state 12

    (19) var_type -> DOUBLE . sem_get_type
    (78) sem_get_type -> . empty
    (77) empty -> .

    ID              reduce using rule 77 (empty -> .)

    sem_get_type                   shift and go to state 21
    empty                          shift and go to state 20

state 13

    (20) var_type -> BOOL . sem_get_type
    (78) sem_get_type -> . empty
    (77) empty -> .

    ID              reduce using rule 77 (empty -> .)

    sem_get_type                   shift and go to state 22
    empty                          shift and go to state 20

state 14

    (13) func_signature -> FUNCTION . func_type matrix_declaration func_signature_1 sem_end_func
    (28) func_type -> . INT sem_get_type
    (29) func_type -> . DOUBLE sem_get_type
    (30) func_type -> . BOOL sem_get_type
    (31) func_type -> . VOID sem_get_type

    INT             shift and go to state 24
    DOUBLE          shift and go to state 25
    BOOL            shift and go to state 26
    VOID            shift and go to state 27

    func_type                      shift and go to state 23

state 15

    (76) main -> MAIN . sem_fill_goto_main block sem_fill_eras sem_end_main
    (108) sem_fill_goto_main -> . empty
    (77) empty -> .

    LEFT_BRACE      reduce using rule 77 (empty -> .)

    sem_fill_goto_main             shift and go to state 28
    empty                          shift and go to state 29

state 16

    (2) global_declaration -> var_declaration global_declaration .

    $end            reduce using rule 2 (global_declaration -> var_declaration global_declaration .)


state 17

    (4) var_declaration -> var_type ID . sem_add_var SEMICOLON
    (5) var_declaration -> var_type ID . sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix
    (81) sem_add_var -> . empty
    (111) sem_get_matrix_id -> . empty
    (77) empty -> .

    SEMICOLON       reduce using rule 77 (empty -> .)
    LEFT_BRACKET    reduce using rule 77 (empty -> .)

    sem_add_var                    shift and go to state 30
    sem_get_matrix_id              shift and go to state 31
    empty                          shift and go to state 32

state 18

    (11) func_declaration -> func_signature func_declaration .

    $end            reduce using rule 11 (func_declaration -> func_signature func_declaration .)


state 19

    (18) var_type -> INT sem_get_type .

    ID              reduce using rule 18 (var_type -> INT sem_get_type .)


state 20

    (78) sem_get_type -> empty .

    ID              reduce using rule 78 (sem_get_type -> empty .)
    LEFT_BRACKET    reduce using rule 78 (sem_get_type -> empty .)


state 21

    (19) var_type -> DOUBLE sem_get_type .

    ID              reduce using rule 19 (var_type -> DOUBLE sem_get_type .)


state 22

    (20) var_type -> BOOL sem_get_type .

    ID              reduce using rule 20 (var_type -> BOOL sem_get_type .)


state 23

    (13) func_signature -> FUNCTION func_type . matrix_declaration func_signature_1 sem_end_func
    (7) matrix_declaration -> . LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET
    (8) matrix_declaration -> . empty
    (77) empty -> .

    LEFT_BRACKET    shift and go to state 34
    ID              reduce using rule 77 (empty -> .)

    matrix_declaration             shift and go to state 33
    empty                          shift and go to state 35

state 24

    (28) func_type -> INT . sem_get_type
    (78) sem_get_type -> . empty
    (77) empty -> .

    LEFT_BRACKET    reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)

    sem_get_type                   shift and go to state 36
    empty                          shift and go to state 20

state 25

    (29) func_type -> DOUBLE . sem_get_type
    (78) sem_get_type -> . empty
    (77) empty -> .

    LEFT_BRACKET    reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)

    sem_get_type                   shift and go to state 37
    empty                          shift and go to state 20

state 26

    (30) func_type -> BOOL . sem_get_type
    (78) sem_get_type -> . empty
    (77) empty -> .

    LEFT_BRACKET    reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)

    sem_get_type                   shift and go to state 38
    empty                          shift and go to state 20

state 27

    (31) func_type -> VOID . sem_get_type
    (78) sem_get_type -> . empty
    (77) empty -> .

    LEFT_BRACKET    reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)

    sem_get_type                   shift and go to state 39
    empty                          shift and go to state 20

state 28

    (76) main -> MAIN sem_fill_goto_main . block sem_fill_eras sem_end_main
    (32) block -> . LEFT_BRACE var_declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 41

    block                          shift and go to state 40

state 29

    (108) sem_fill_goto_main -> empty .

    LEFT_BRACE      reduce using rule 108 (sem_fill_goto_main -> empty .)


state 30

    (4) var_declaration -> var_type ID sem_add_var . SEMICOLON

    SEMICOLON       shift and go to state 42


state 31

    (5) var_declaration -> var_type ID sem_get_matrix_id . matrix_declaration SEMICOLON sem_add_matrix
    (7) matrix_declaration -> . LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET
    (8) matrix_declaration -> . empty
    (77) empty -> .

    LEFT_BRACKET    shift and go to state 34
    SEMICOLON       reduce using rule 77 (empty -> .)

    matrix_declaration             shift and go to state 43
    empty                          shift and go to state 35

state 32

    (81) sem_add_var -> empty .
    (111) sem_get_matrix_id -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 81 (sem_add_var -> empty .)
    SEMICOLON       reduce using rule 81 (sem_add_var -> empty .)
    LEFT_BRACKET    reduce using rule 111 (sem_get_matrix_id -> empty .)

  ! SEMICOLON       [ reduce using rule 111 (sem_get_matrix_id -> empty .) ]


state 33

    (13) func_signature -> FUNCTION func_type matrix_declaration . func_signature_1 sem_end_func
    (14) func_signature_1 -> . ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block

    ID              shift and go to state 45

    func_signature_1               shift and go to state 44

state 34

    (7) matrix_declaration -> LEFT_BRACKET . CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET

    CTE_I           shift and go to state 46


state 35

    (8) matrix_declaration -> empty .

    ID              reduce using rule 8 (matrix_declaration -> empty .)
    SEMICOLON       reduce using rule 8 (matrix_declaration -> empty .)
    COMMA           reduce using rule 8 (matrix_declaration -> empty .)
    RIGHT_PAR       reduce using rule 8 (matrix_declaration -> empty .)


state 36

    (28) func_type -> INT sem_get_type .

    LEFT_BRACKET    reduce using rule 28 (func_type -> INT sem_get_type .)
    ID              reduce using rule 28 (func_type -> INT sem_get_type .)


state 37

    (29) func_type -> DOUBLE sem_get_type .

    LEFT_BRACKET    reduce using rule 29 (func_type -> DOUBLE sem_get_type .)
    ID              reduce using rule 29 (func_type -> DOUBLE sem_get_type .)


state 38

    (30) func_type -> BOOL sem_get_type .

    LEFT_BRACKET    reduce using rule 30 (func_type -> BOOL sem_get_type .)
    ID              reduce using rule 30 (func_type -> BOOL sem_get_type .)


state 39

    (31) func_type -> VOID sem_get_type .

    LEFT_BRACKET    reduce using rule 31 (func_type -> VOID sem_get_type .)
    ID              reduce using rule 31 (func_type -> VOID sem_get_type .)


state 40

    (76) main -> MAIN sem_fill_goto_main block . sem_fill_eras sem_end_main
    (110) sem_fill_eras -> . empty
    (77) empty -> .

    $end            reduce using rule 77 (empty -> .)

    sem_fill_eras                  shift and go to state 47
    empty                          shift and go to state 48

state 41

    (32) block -> LEFT_BRACE . var_declaration statements RIGHT_BRACE
    (4) var_declaration -> . var_type ID sem_add_var SEMICOLON
    (5) var_declaration -> . var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix
    (6) var_declaration -> . empty
    (18) var_type -> . INT sem_get_type
    (19) var_type -> . DOUBLE sem_get_type
    (20) var_type -> . BOOL sem_get_type
    (77) empty -> .

    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    ID              reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    RETURN          reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    READ            reduce using rule 77 (empty -> .)
    WRITE           reduce using rule 77 (empty -> .)
    RIGHT_BRACE     reduce using rule 77 (empty -> .)

    var_declaration                shift and go to state 49
    var_type                       shift and go to state 7
    empty                          shift and go to state 8

state 42

    (4) var_declaration -> var_type ID sem_add_var SEMICOLON .

    INT             reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    DOUBLE          reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    BOOL            reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    FUNCTION        reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    MAIN            reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    ID              reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    IF              reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    RETURN          reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    WHILE           reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    READ            reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    WRITE           reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)


state 43

    (5) var_declaration -> var_type ID sem_get_matrix_id matrix_declaration . SEMICOLON sem_add_matrix

    SEMICOLON       shift and go to state 50


state 44

    (13) func_signature -> FUNCTION func_type matrix_declaration func_signature_1 . sem_end_func
    (80) sem_end_func -> . empty
    (77) empty -> .

    FUNCTION        reduce using rule 77 (empty -> .)
    MAIN            reduce using rule 77 (empty -> .)

    sem_end_func                   shift and go to state 51
    empty                          shift and go to state 52

state 45

    (14) func_signature_1 -> ID . sem_add_func LEFT_PAR param_declaration RIGHT_PAR block
    (79) sem_add_func -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)

    sem_add_func                   shift and go to state 53
    empty                          shift and go to state 54

state 46

    (7) matrix_declaration -> LEFT_BRACKET CTE_I . sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET
    (112) sem_get_dim1 -> . empty
    (77) empty -> .

    RIGHT_BRACKET   reduce using rule 77 (empty -> .)

    sem_get_dim1                   shift and go to state 55
    empty                          shift and go to state 56

state 47

    (76) main -> MAIN sem_fill_goto_main block sem_fill_eras . sem_end_main
    (109) sem_end_main -> . empty
    (77) empty -> .

    $end            reduce using rule 77 (empty -> .)

    sem_end_main                   shift and go to state 57
    empty                          shift and go to state 58

state 48

    (110) sem_fill_eras -> empty .

    $end            reduce using rule 110 (sem_fill_eras -> empty .)


state 49

    (32) block -> LEFT_BRACE var_declaration . statements RIGHT_BRACE
    (33) statements -> . statement statements
    (34) statements -> . empty
    (35) statement -> . assignment
    (36) statement -> . condition
    (37) statement -> . return
    (38) statement -> . function_call
    (39) statement -> . while_cycle
    (40) statement -> . read
    (41) statement -> . write
    (77) empty -> .
    (42) assignment -> . ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (66) condition -> . IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (43) return -> . RETURN mega_exp sem_return_function SEMICOLON
    (69) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (73) while_cycle -> . WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (74) read -> . READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (75) write -> . WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_BRACE     reduce using rule 77 (empty -> .)
    ID              shift and go to state 69
    IF              shift and go to state 70
    RETURN          shift and go to state 71
    WHILE           shift and go to state 72
    READ            shift and go to state 73
    WRITE           shift and go to state 74

    statements                     shift and go to state 59
    statement                      shift and go to state 60
    empty                          shift and go to state 61
    assignment                     shift and go to state 62
    condition                      shift and go to state 63
    return                         shift and go to state 64
    function_call                  shift and go to state 65
    while_cycle                    shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68

state 50

    (5) var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON . sem_add_matrix
    (114) sem_add_matrix -> . empty
    (77) empty -> .

    INT             reduce using rule 77 (empty -> .)
    DOUBLE          reduce using rule 77 (empty -> .)
    BOOL            reduce using rule 77 (empty -> .)
    FUNCTION        reduce using rule 77 (empty -> .)
    MAIN            reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    RETURN          reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    READ            reduce using rule 77 (empty -> .)
    WRITE           reduce using rule 77 (empty -> .)
    RIGHT_BRACE     reduce using rule 77 (empty -> .)

    sem_add_matrix                 shift and go to state 75
    empty                          shift and go to state 76

state 51

    (13) func_signature -> FUNCTION func_type matrix_declaration func_signature_1 sem_end_func .

    FUNCTION        reduce using rule 13 (func_signature -> FUNCTION func_type matrix_declaration func_signature_1 sem_end_func .)
    MAIN            reduce using rule 13 (func_signature -> FUNCTION func_type matrix_declaration func_signature_1 sem_end_func .)


state 52

    (80) sem_end_func -> empty .

    FUNCTION        reduce using rule 80 (sem_end_func -> empty .)
    MAIN            reduce using rule 80 (sem_end_func -> empty .)


state 53

    (14) func_signature_1 -> ID sem_add_func . LEFT_PAR param_declaration RIGHT_PAR block

    LEFT_PAR        shift and go to state 77


state 54

    (79) sem_add_func -> empty .

    LEFT_PAR        reduce using rule 79 (sem_add_func -> empty .)


state 55

    (7) matrix_declaration -> LEFT_BRACKET CTE_I sem_get_dim1 . RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 78


state 56

    (112) sem_get_dim1 -> empty .

    RIGHT_BRACKET   reduce using rule 112 (sem_get_dim1 -> empty .)


state 57

    (76) main -> MAIN sem_fill_goto_main block sem_fill_eras sem_end_main .

    $end            reduce using rule 76 (main -> MAIN sem_fill_goto_main block sem_fill_eras sem_end_main .)


state 58

    (109) sem_end_main -> empty .

    $end            reduce using rule 109 (sem_end_main -> empty .)


state 59

    (32) block -> LEFT_BRACE var_declaration statements . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 79


state 60

    (33) statements -> statement . statements
    (33) statements -> . statement statements
    (34) statements -> . empty
    (35) statement -> . assignment
    (36) statement -> . condition
    (37) statement -> . return
    (38) statement -> . function_call
    (39) statement -> . while_cycle
    (40) statement -> . read
    (41) statement -> . write
    (77) empty -> .
    (42) assignment -> . ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (66) condition -> . IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (43) return -> . RETURN mega_exp sem_return_function SEMICOLON
    (69) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (73) while_cycle -> . WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (74) read -> . READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (75) write -> . WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_BRACE     reduce using rule 77 (empty -> .)
    ID              shift and go to state 69
    IF              shift and go to state 70
    RETURN          shift and go to state 71
    WHILE           shift and go to state 72
    READ            shift and go to state 73
    WRITE           shift and go to state 74

    statement                      shift and go to state 60
    statements                     shift and go to state 80
    empty                          shift and go to state 61
    assignment                     shift and go to state 62
    condition                      shift and go to state 63
    return                         shift and go to state 64
    function_call                  shift and go to state 65
    while_cycle                    shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68

state 61

    (34) statements -> empty .

    RIGHT_BRACE     reduce using rule 34 (statements -> empty .)


state 62

    (35) statement -> assignment .

    ID              reduce using rule 35 (statement -> assignment .)
    IF              reduce using rule 35 (statement -> assignment .)
    RETURN          reduce using rule 35 (statement -> assignment .)
    WHILE           reduce using rule 35 (statement -> assignment .)
    READ            reduce using rule 35 (statement -> assignment .)
    WRITE           reduce using rule 35 (statement -> assignment .)
    RIGHT_BRACE     reduce using rule 35 (statement -> assignment .)


state 63

    (36) statement -> condition .

    ID              reduce using rule 36 (statement -> condition .)
    IF              reduce using rule 36 (statement -> condition .)
    RETURN          reduce using rule 36 (statement -> condition .)
    WHILE           reduce using rule 36 (statement -> condition .)
    READ            reduce using rule 36 (statement -> condition .)
    WRITE           reduce using rule 36 (statement -> condition .)
    RIGHT_BRACE     reduce using rule 36 (statement -> condition .)


state 64

    (37) statement -> return .

    ID              reduce using rule 37 (statement -> return .)
    IF              reduce using rule 37 (statement -> return .)
    RETURN          reduce using rule 37 (statement -> return .)
    WHILE           reduce using rule 37 (statement -> return .)
    READ            reduce using rule 37 (statement -> return .)
    WRITE           reduce using rule 37 (statement -> return .)
    RIGHT_BRACE     reduce using rule 37 (statement -> return .)


state 65

    (38) statement -> function_call .

    ID              reduce using rule 38 (statement -> function_call .)
    IF              reduce using rule 38 (statement -> function_call .)
    RETURN          reduce using rule 38 (statement -> function_call .)
    WHILE           reduce using rule 38 (statement -> function_call .)
    READ            reduce using rule 38 (statement -> function_call .)
    WRITE           reduce using rule 38 (statement -> function_call .)
    RIGHT_BRACE     reduce using rule 38 (statement -> function_call .)


state 66

    (39) statement -> while_cycle .

    ID              reduce using rule 39 (statement -> while_cycle .)
    IF              reduce using rule 39 (statement -> while_cycle .)
    RETURN          reduce using rule 39 (statement -> while_cycle .)
    WHILE           reduce using rule 39 (statement -> while_cycle .)
    READ            reduce using rule 39 (statement -> while_cycle .)
    WRITE           reduce using rule 39 (statement -> while_cycle .)
    RIGHT_BRACE     reduce using rule 39 (statement -> while_cycle .)


state 67

    (40) statement -> read .

    ID              reduce using rule 40 (statement -> read .)
    IF              reduce using rule 40 (statement -> read .)
    RETURN          reduce using rule 40 (statement -> read .)
    WHILE           reduce using rule 40 (statement -> read .)
    READ            reduce using rule 40 (statement -> read .)
    WRITE           reduce using rule 40 (statement -> read .)
    RIGHT_BRACE     reduce using rule 40 (statement -> read .)


state 68

    (41) statement -> write .

    ID              reduce using rule 41 (statement -> write .)
    IF              reduce using rule 41 (statement -> write .)
    RETURN          reduce using rule 41 (statement -> write .)
    WHILE           reduce using rule 41 (statement -> write .)
    READ            reduce using rule 41 (statement -> write .)
    WRITE           reduce using rule 41 (statement -> write .)
    RIGHT_BRACE     reduce using rule 41 (statement -> write .)


state 69

    (42) assignment -> ID . sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (69) function_call -> ID . sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (83) sem_push_operand -> . empty
    (102) sem_check_function -> . empty
    (77) empty -> .

    LEFT_BRACKET    reduce using rule 77 (empty -> .)
    ASSIGN          reduce using rule 77 (empty -> .)
    LEFT_PAR        reduce using rule 77 (empty -> .)

    sem_push_operand               shift and go to state 81
    sem_check_function             shift and go to state 82
    empty                          shift and go to state 83

state 70

    (66) condition -> IF . LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof

    LEFT_PAR        shift and go to state 84


state 71

    (43) return -> RETURN . mega_exp sem_return_function SEMICOLON
    (44) mega_exp -> . hyper_exp mega_exp_1
    (48) hyper_exp -> . exp hyper_exp_1
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    mega_exp                       shift and go to state 85
    hyper_exp                      shift and go to state 86
    exp                            shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 72

    (73) while_cycle -> WHILE . sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (99) sem_start_while -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)

    sem_start_while                shift and go to state 100
    empty                          shift and go to state 101

state 73

    (74) read -> READ . sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 102
    empty                          shift and go to state 103

state 74

    (75) write -> WRITE . sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 104
    empty                          shift and go to state 103

state 75

    (5) var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .

    INT             reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    DOUBLE          reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    BOOL            reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    FUNCTION        reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    MAIN            reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    ID              reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    IF              reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    RETURN          reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    WHILE           reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    READ            reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    WRITE           reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    RIGHT_BRACE     reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)


state 76

    (114) sem_add_matrix -> empty .

    INT             reduce using rule 114 (sem_add_matrix -> empty .)
    DOUBLE          reduce using rule 114 (sem_add_matrix -> empty .)
    BOOL            reduce using rule 114 (sem_add_matrix -> empty .)
    FUNCTION        reduce using rule 114 (sem_add_matrix -> empty .)
    MAIN            reduce using rule 114 (sem_add_matrix -> empty .)
    ID              reduce using rule 114 (sem_add_matrix -> empty .)
    IF              reduce using rule 114 (sem_add_matrix -> empty .)
    RETURN          reduce using rule 114 (sem_add_matrix -> empty .)
    WHILE           reduce using rule 114 (sem_add_matrix -> empty .)
    READ            reduce using rule 114 (sem_add_matrix -> empty .)
    WRITE           reduce using rule 114 (sem_add_matrix -> empty .)
    RIGHT_BRACE     reduce using rule 114 (sem_add_matrix -> empty .)


state 77

    (14) func_signature_1 -> ID sem_add_func LEFT_PAR . param_declaration RIGHT_PAR block
    (15) param_declaration -> . var_type ID matrix_declaration sem_add_param
    (16) param_declaration -> . var_type ID matrix_declaration sem_add_param COMMA param_declaration
    (17) param_declaration -> . empty
    (18) var_type -> . INT sem_get_type
    (19) var_type -> . DOUBLE sem_get_type
    (20) var_type -> . BOOL sem_get_type
    (77) empty -> .

    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    RIGHT_PAR       reduce using rule 77 (empty -> .)

    param_declaration              shift and go to state 105
    var_type                       shift and go to state 106
    empty                          shift and go to state 107

state 78

    (7) matrix_declaration -> LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET . LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 108


state 79

    (32) block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .

    $end            reduce using rule 32 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    FUNCTION        reduce using rule 32 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    MAIN            reduce using rule 32 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    ELSE            reduce using rule 32 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    ID              reduce using rule 32 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    IF              reduce using rule 32 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    RETURN          reduce using rule 32 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    WHILE           reduce using rule 32 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    READ            reduce using rule 32 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    WRITE           reduce using rule 32 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 32 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)


state 80

    (33) statements -> statement statements .

    RIGHT_BRACE     reduce using rule 33 (statements -> statement statements .)


state 81

    (42) assignment -> ID sem_push_operand . matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (9) matrix -> . LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (10) matrix -> . empty
    (77) empty -> .

    LEFT_BRACKET    shift and go to state 110
    ASSIGN          reduce using rule 77 (empty -> .)

    matrix                         shift and go to state 109
    empty                          shift and go to state 111

state 82

    (69) function_call -> ID sem_check_function . LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub

    LEFT_PAR        shift and go to state 112


state 83

    (83) sem_push_operand -> empty .
    (102) sem_check_function -> empty .

    LEFT_BRACKET    reduce using rule 83 (sem_push_operand -> empty .)
    ASSIGN          reduce using rule 83 (sem_push_operand -> empty .)
    MULTIPLY        reduce using rule 83 (sem_push_operand -> empty .)
    DIVIDE          reduce using rule 83 (sem_push_operand -> empty .)
    PLUS            reduce using rule 83 (sem_push_operand -> empty .)
    MINUS           reduce using rule 83 (sem_push_operand -> empty .)
    IS_EQUAL_TO     reduce using rule 83 (sem_push_operand -> empty .)
    NOT_EQUAL_TO    reduce using rule 83 (sem_push_operand -> empty .)
    GREATER_THAN    reduce using rule 83 (sem_push_operand -> empty .)
    LESS_THAN       reduce using rule 83 (sem_push_operand -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 83 (sem_push_operand -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 83 (sem_push_operand -> empty .)
    AND             reduce using rule 83 (sem_push_operand -> empty .)
    OR              reduce using rule 83 (sem_push_operand -> empty .)
    SEMICOLON       reduce using rule 83 (sem_push_operand -> empty .)
    RIGHT_PAR       reduce using rule 83 (sem_push_operand -> empty .)
    RIGHT_BRACKET   reduce using rule 83 (sem_push_operand -> empty .)
    COMMA           reduce using rule 83 (sem_push_operand -> empty .)
    LEFT_PAR        reduce using rule 102 (sem_check_function -> empty .)


state 84

    (66) condition -> IF LEFT_PAR . mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (44) mega_exp -> . hyper_exp mega_exp_1
    (48) hyper_exp -> . exp hyper_exp_1
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    mega_exp                       shift and go to state 113
    hyper_exp                      shift and go to state 86
    exp                            shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 85

    (43) return -> RETURN mega_exp . sem_return_function SEMICOLON
    (93) sem_return_function -> . empty
    (77) empty -> .

    SEMICOLON       reduce using rule 77 (empty -> .)

    sem_return_function            shift and go to state 114
    empty                          shift and go to state 115

state 86

    (44) mega_exp -> hyper_exp . mega_exp_1
    (45) mega_exp_1 -> . AND sem_push_operator mega_exp sem_top_logical
    (46) mega_exp_1 -> . OR sem_push_operator mega_exp sem_top_logical
    (47) mega_exp_1 -> . empty
    (77) empty -> .

    AND             shift and go to state 117
    OR              shift and go to state 118
    SEMICOLON       reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)

    mega_exp_1                     shift and go to state 116
    empty                          shift and go to state 119

state 87

    (48) hyper_exp -> exp . hyper_exp_1
    (49) hyper_exp_1 -> . IS_EQUAL_TO sem_push_operator exp sem_top_relational
    (50) hyper_exp_1 -> . NOT_EQUAL_TO sem_push_operator exp sem_top_relational
    (51) hyper_exp_1 -> . GREATER_THAN sem_push_operator exp sem_top_relational
    (52) hyper_exp_1 -> . LESS_THAN sem_push_operator exp sem_top_relational
    (53) hyper_exp_1 -> . GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
    (54) hyper_exp_1 -> . LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
    (55) hyper_exp_1 -> . empty
    (77) empty -> .

    IS_EQUAL_TO     shift and go to state 121
    NOT_EQUAL_TO    shift and go to state 122
    GREATER_THAN    shift and go to state 123
    LESS_THAN       shift and go to state 124
    GREATER_THAN_OR_EQUAL_TO shift and go to state 125
    LESS_THAN_OR_EQUAL_TO shift and go to state 126
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)

    hyper_exp_1                    shift and go to state 120
    empty                          shift and go to state 127

state 88

    (56) exp -> term . sem_top_term
    (57) exp -> term . sem_top_term PLUS sem_push_operator exp
    (58) exp -> term . sem_top_term MINUS sem_push_operator exp
    (88) sem_top_term -> . empty
    (77) empty -> .

    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    IS_EQUAL_TO     reduce using rule 77 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 77 (empty -> .)
    GREATER_THAN    reduce using rule 77 (empty -> .)
    LESS_THAN       reduce using rule 77 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)
    RIGHT_BRACKET   reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)

    sem_top_term                   shift and go to state 128
    empty                          shift and go to state 129

state 89

    (64) factor -> PLUS . sem_push_operator var_cte
    (82) sem_push_operator -> . empty
    (77) empty -> .

    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 130
    empty                          shift and go to state 103

state 90

    (65) factor -> MINUS . sem_push_operator var_cte
    (82) sem_push_operator -> . empty
    (77) empty -> .

    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 131
    empty                          shift and go to state 103

state 91

    (59) term -> factor . sem_top_factor
    (60) term -> factor . sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> factor . sem_top_factor DIVIDE sem_push_operator term
    (87) sem_top_factor -> . empty
    (77) empty -> .

    MULTIPLY        reduce using rule 77 (empty -> .)
    DIVIDE          reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    IS_EQUAL_TO     reduce using rule 77 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 77 (empty -> .)
    GREATER_THAN    reduce using rule 77 (empty -> .)
    LESS_THAN       reduce using rule 77 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)
    RIGHT_BRACKET   reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)

    sem_top_factor                 shift and go to state 132
    empty                          shift and go to state 133

state 92

    (62) factor -> LEFT_PAR . sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (89) sem_false_bottom_begin -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_false_bottom_begin         shift and go to state 134
    empty                          shift and go to state 135

state 93

    (63) factor -> var_cte .

    MULTIPLY        reduce using rule 63 (factor -> var_cte .)
    DIVIDE          reduce using rule 63 (factor -> var_cte .)
    PLUS            reduce using rule 63 (factor -> var_cte .)
    MINUS           reduce using rule 63 (factor -> var_cte .)
    IS_EQUAL_TO     reduce using rule 63 (factor -> var_cte .)
    NOT_EQUAL_TO    reduce using rule 63 (factor -> var_cte .)
    GREATER_THAN    reduce using rule 63 (factor -> var_cte .)
    LESS_THAN       reduce using rule 63 (factor -> var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 63 (factor -> var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 63 (factor -> var_cte .)
    AND             reduce using rule 63 (factor -> var_cte .)
    OR              reduce using rule 63 (factor -> var_cte .)
    SEMICOLON       reduce using rule 63 (factor -> var_cte .)
    RIGHT_PAR       reduce using rule 63 (factor -> var_cte .)
    RIGHT_BRACKET   reduce using rule 63 (factor -> var_cte .)
    COMMA           reduce using rule 63 (factor -> var_cte .)


state 94

    (21) var_cte -> CTE_I . sem_push_constant_int
    (84) sem_push_constant_int -> . empty
    (77) empty -> .

    MULTIPLY        reduce using rule 77 (empty -> .)
    DIVIDE          reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    IS_EQUAL_TO     reduce using rule 77 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 77 (empty -> .)
    GREATER_THAN    reduce using rule 77 (empty -> .)
    LESS_THAN       reduce using rule 77 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)
    RIGHT_BRACKET   reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)

    sem_push_constant_int          shift and go to state 136
    empty                          shift and go to state 137

state 95

    (22) var_cte -> CTE_D . sem_push_constant_double
    (85) sem_push_constant_double -> . empty
    (77) empty -> .

    MULTIPLY        reduce using rule 77 (empty -> .)
    DIVIDE          reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    IS_EQUAL_TO     reduce using rule 77 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 77 (empty -> .)
    GREATER_THAN    reduce using rule 77 (empty -> .)
    LESS_THAN       reduce using rule 77 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)
    RIGHT_BRACKET   reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)

    sem_push_constant_double       shift and go to state 138
    empty                          shift and go to state 139

state 96

    (23) var_cte -> cte_b . sem_push_constant_bool
    (86) sem_push_constant_bool -> . empty
    (77) empty -> .

    MULTIPLY        reduce using rule 77 (empty -> .)
    DIVIDE          reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    IS_EQUAL_TO     reduce using rule 77 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 77 (empty -> .)
    GREATER_THAN    reduce using rule 77 (empty -> .)
    LESS_THAN       reduce using rule 77 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)
    RIGHT_BRACKET   reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)

    sem_push_constant_bool         shift and go to state 140
    empty                          shift and go to state 141

state 97

    (24) var_cte -> ID . sem_push_operand matrix
    (25) var_cte -> ID . sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (83) sem_push_operand -> . empty
    (102) sem_check_function -> . empty
    (77) empty -> .

    LEFT_BRACKET    reduce using rule 77 (empty -> .)
    MULTIPLY        reduce using rule 77 (empty -> .)
    DIVIDE          reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    IS_EQUAL_TO     reduce using rule 77 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 77 (empty -> .)
    GREATER_THAN    reduce using rule 77 (empty -> .)
    LESS_THAN       reduce using rule 77 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)
    RIGHT_BRACKET   reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)
    LEFT_PAR        reduce using rule 77 (empty -> .)

    sem_push_operand               shift and go to state 142
    sem_check_function             shift and go to state 143
    empty                          shift and go to state 83

state 98

    (26) cte_b -> TRUE .

    MULTIPLY        reduce using rule 26 (cte_b -> TRUE .)
    DIVIDE          reduce using rule 26 (cte_b -> TRUE .)
    PLUS            reduce using rule 26 (cte_b -> TRUE .)
    MINUS           reduce using rule 26 (cte_b -> TRUE .)
    IS_EQUAL_TO     reduce using rule 26 (cte_b -> TRUE .)
    NOT_EQUAL_TO    reduce using rule 26 (cte_b -> TRUE .)
    GREATER_THAN    reduce using rule 26 (cte_b -> TRUE .)
    LESS_THAN       reduce using rule 26 (cte_b -> TRUE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 26 (cte_b -> TRUE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 26 (cte_b -> TRUE .)
    AND             reduce using rule 26 (cte_b -> TRUE .)
    OR              reduce using rule 26 (cte_b -> TRUE .)
    SEMICOLON       reduce using rule 26 (cte_b -> TRUE .)
    RIGHT_PAR       reduce using rule 26 (cte_b -> TRUE .)
    RIGHT_BRACKET   reduce using rule 26 (cte_b -> TRUE .)
    COMMA           reduce using rule 26 (cte_b -> TRUE .)


state 99

    (27) cte_b -> FALSE .

    MULTIPLY        reduce using rule 27 (cte_b -> FALSE .)
    DIVIDE          reduce using rule 27 (cte_b -> FALSE .)
    PLUS            reduce using rule 27 (cte_b -> FALSE .)
    MINUS           reduce using rule 27 (cte_b -> FALSE .)
    IS_EQUAL_TO     reduce using rule 27 (cte_b -> FALSE .)
    NOT_EQUAL_TO    reduce using rule 27 (cte_b -> FALSE .)
    GREATER_THAN    reduce using rule 27 (cte_b -> FALSE .)
    LESS_THAN       reduce using rule 27 (cte_b -> FALSE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 27 (cte_b -> FALSE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 27 (cte_b -> FALSE .)
    AND             reduce using rule 27 (cte_b -> FALSE .)
    OR              reduce using rule 27 (cte_b -> FALSE .)
    SEMICOLON       reduce using rule 27 (cte_b -> FALSE .)
    RIGHT_PAR       reduce using rule 27 (cte_b -> FALSE .)
    RIGHT_BRACKET   reduce using rule 27 (cte_b -> FALSE .)
    COMMA           reduce using rule 27 (cte_b -> FALSE .)


state 100

    (73) while_cycle -> WHILE sem_start_while . LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while

    LEFT_PAR        shift and go to state 144


state 101

    (99) sem_start_while -> empty .

    LEFT_PAR        reduce using rule 99 (sem_start_while -> empty .)


state 102

    (74) read -> READ sem_push_operator . LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    LEFT_PAR        shift and go to state 145


state 103

    (82) sem_push_operator -> empty .

    LEFT_PAR        reduce using rule 82 (sem_push_operator -> empty .)
    CTE_I           reduce using rule 82 (sem_push_operator -> empty .)
    CTE_D           reduce using rule 82 (sem_push_operator -> empty .)
    ID              reduce using rule 82 (sem_push_operator -> empty .)
    TRUE            reduce using rule 82 (sem_push_operator -> empty .)
    FALSE           reduce using rule 82 (sem_push_operator -> empty .)
    PLUS            reduce using rule 82 (sem_push_operator -> empty .)
    MINUS           reduce using rule 82 (sem_push_operator -> empty .)


state 104

    (75) write -> WRITE sem_push_operator . LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    LEFT_PAR        shift and go to state 146


state 105

    (14) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration . RIGHT_PAR block

    RIGHT_PAR       shift and go to state 147


state 106

    (15) param_declaration -> var_type . ID matrix_declaration sem_add_param
    (16) param_declaration -> var_type . ID matrix_declaration sem_add_param COMMA param_declaration

    ID              shift and go to state 148


state 107

    (17) param_declaration -> empty .

    RIGHT_PAR       reduce using rule 17 (param_declaration -> empty .)


state 108

    (7) matrix_declaration -> LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET . CTE_I sem_get_dim2 RIGHT_BRACKET

    CTE_I           shift and go to state 149


state 109

    (42) assignment -> ID sem_push_operand matrix . ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON

    ASSIGN          shift and go to state 150


state 110

    (9) matrix -> LEFT_BRACKET . sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (115) sem_check_dim1 -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_check_dim1                 shift and go to state 151
    empty                          shift and go to state 152

state 111

    (10) matrix -> empty .

    ASSIGN          reduce using rule 10 (matrix -> empty .)
    MULTIPLY        reduce using rule 10 (matrix -> empty .)
    DIVIDE          reduce using rule 10 (matrix -> empty .)
    PLUS            reduce using rule 10 (matrix -> empty .)
    MINUS           reduce using rule 10 (matrix -> empty .)
    IS_EQUAL_TO     reduce using rule 10 (matrix -> empty .)
    NOT_EQUAL_TO    reduce using rule 10 (matrix -> empty .)
    GREATER_THAN    reduce using rule 10 (matrix -> empty .)
    LESS_THAN       reduce using rule 10 (matrix -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 10 (matrix -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 10 (matrix -> empty .)
    AND             reduce using rule 10 (matrix -> empty .)
    OR              reduce using rule 10 (matrix -> empty .)
    SEMICOLON       reduce using rule 10 (matrix -> empty .)
    RIGHT_PAR       reduce using rule 10 (matrix -> empty .)
    RIGHT_BRACKET   reduce using rule 10 (matrix -> empty .)
    COMMA           reduce using rule 10 (matrix -> empty .)


state 112

    (69) function_call -> ID sem_check_function LEFT_PAR . sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (103) sem_create_era -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)

    sem_create_era                 shift and go to state 153
    empty                          shift and go to state 154

state 113

    (66) condition -> IF LEFT_PAR mega_exp . RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof

    RIGHT_PAR       shift and go to state 155


state 114

    (43) return -> RETURN mega_exp sem_return_function . SEMICOLON

    SEMICOLON       shift and go to state 156


state 115

    (93) sem_return_function -> empty .

    SEMICOLON       reduce using rule 93 (sem_return_function -> empty .)


state 116

    (44) mega_exp -> hyper_exp mega_exp_1 .

    SEMICOLON       reduce using rule 44 (mega_exp -> hyper_exp mega_exp_1 .)
    RIGHT_PAR       reduce using rule 44 (mega_exp -> hyper_exp mega_exp_1 .)
    COMMA           reduce using rule 44 (mega_exp -> hyper_exp mega_exp_1 .)


state 117

    (45) mega_exp_1 -> AND . sem_push_operator mega_exp sem_top_logical
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 157
    empty                          shift and go to state 103

state 118

    (46) mega_exp_1 -> OR . sem_push_operator mega_exp sem_top_logical
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 158
    empty                          shift and go to state 103

state 119

    (47) mega_exp_1 -> empty .

    SEMICOLON       reduce using rule 47 (mega_exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 47 (mega_exp_1 -> empty .)
    COMMA           reduce using rule 47 (mega_exp_1 -> empty .)


state 120

    (48) hyper_exp -> exp hyper_exp_1 .

    AND             reduce using rule 48 (hyper_exp -> exp hyper_exp_1 .)
    OR              reduce using rule 48 (hyper_exp -> exp hyper_exp_1 .)
    SEMICOLON       reduce using rule 48 (hyper_exp -> exp hyper_exp_1 .)
    RIGHT_PAR       reduce using rule 48 (hyper_exp -> exp hyper_exp_1 .)
    COMMA           reduce using rule 48 (hyper_exp -> exp hyper_exp_1 .)


state 121

    (49) hyper_exp_1 -> IS_EQUAL_TO . sem_push_operator exp sem_top_relational
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 159
    empty                          shift and go to state 103

state 122

    (50) hyper_exp_1 -> NOT_EQUAL_TO . sem_push_operator exp sem_top_relational
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 160
    empty                          shift and go to state 103

state 123

    (51) hyper_exp_1 -> GREATER_THAN . sem_push_operator exp sem_top_relational
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 161
    empty                          shift and go to state 103

state 124

    (52) hyper_exp_1 -> LESS_THAN . sem_push_operator exp sem_top_relational
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 162
    empty                          shift and go to state 103

state 125

    (53) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO . sem_push_operator exp sem_top_relational
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 163
    empty                          shift and go to state 103

state 126

    (54) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO . sem_push_operator exp sem_top_relational
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 164
    empty                          shift and go to state 103

state 127

    (55) hyper_exp_1 -> empty .

    AND             reduce using rule 55 (hyper_exp_1 -> empty .)
    OR              reduce using rule 55 (hyper_exp_1 -> empty .)
    SEMICOLON       reduce using rule 55 (hyper_exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 55 (hyper_exp_1 -> empty .)
    COMMA           reduce using rule 55 (hyper_exp_1 -> empty .)


state 128

    (56) exp -> term sem_top_term .
    (57) exp -> term sem_top_term . PLUS sem_push_operator exp
    (58) exp -> term sem_top_term . MINUS sem_push_operator exp

    IS_EQUAL_TO     reduce using rule 56 (exp -> term sem_top_term .)
    NOT_EQUAL_TO    reduce using rule 56 (exp -> term sem_top_term .)
    GREATER_THAN    reduce using rule 56 (exp -> term sem_top_term .)
    LESS_THAN       reduce using rule 56 (exp -> term sem_top_term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 56 (exp -> term sem_top_term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 56 (exp -> term sem_top_term .)
    AND             reduce using rule 56 (exp -> term sem_top_term .)
    OR              reduce using rule 56 (exp -> term sem_top_term .)
    SEMICOLON       reduce using rule 56 (exp -> term sem_top_term .)
    RIGHT_PAR       reduce using rule 56 (exp -> term sem_top_term .)
    RIGHT_BRACKET   reduce using rule 56 (exp -> term sem_top_term .)
    COMMA           reduce using rule 56 (exp -> term sem_top_term .)
    PLUS            shift and go to state 165
    MINUS           shift and go to state 166


state 129

    (88) sem_top_term -> empty .

    PLUS            reduce using rule 88 (sem_top_term -> empty .)
    MINUS           reduce using rule 88 (sem_top_term -> empty .)
    IS_EQUAL_TO     reduce using rule 88 (sem_top_term -> empty .)
    NOT_EQUAL_TO    reduce using rule 88 (sem_top_term -> empty .)
    GREATER_THAN    reduce using rule 88 (sem_top_term -> empty .)
    LESS_THAN       reduce using rule 88 (sem_top_term -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 88 (sem_top_term -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 88 (sem_top_term -> empty .)
    AND             reduce using rule 88 (sem_top_term -> empty .)
    OR              reduce using rule 88 (sem_top_term -> empty .)
    SEMICOLON       reduce using rule 88 (sem_top_term -> empty .)
    RIGHT_PAR       reduce using rule 88 (sem_top_term -> empty .)
    RIGHT_BRACKET   reduce using rule 88 (sem_top_term -> empty .)
    COMMA           reduce using rule 88 (sem_top_term -> empty .)


state 130

    (64) factor -> PLUS sem_push_operator . var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    var_cte                        shift and go to state 167
    cte_b                          shift and go to state 96

state 131

    (65) factor -> MINUS sem_push_operator . var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    var_cte                        shift and go to state 168
    cte_b                          shift and go to state 96

state 132

    (59) term -> factor sem_top_factor .
    (60) term -> factor sem_top_factor . MULTIPLY sem_push_operator term
    (61) term -> factor sem_top_factor . DIVIDE sem_push_operator term

    PLUS            reduce using rule 59 (term -> factor sem_top_factor .)
    MINUS           reduce using rule 59 (term -> factor sem_top_factor .)
    IS_EQUAL_TO     reduce using rule 59 (term -> factor sem_top_factor .)
    NOT_EQUAL_TO    reduce using rule 59 (term -> factor sem_top_factor .)
    GREATER_THAN    reduce using rule 59 (term -> factor sem_top_factor .)
    LESS_THAN       reduce using rule 59 (term -> factor sem_top_factor .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 59 (term -> factor sem_top_factor .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 59 (term -> factor sem_top_factor .)
    AND             reduce using rule 59 (term -> factor sem_top_factor .)
    OR              reduce using rule 59 (term -> factor sem_top_factor .)
    SEMICOLON       reduce using rule 59 (term -> factor sem_top_factor .)
    RIGHT_PAR       reduce using rule 59 (term -> factor sem_top_factor .)
    RIGHT_BRACKET   reduce using rule 59 (term -> factor sem_top_factor .)
    COMMA           reduce using rule 59 (term -> factor sem_top_factor .)
    MULTIPLY        shift and go to state 169
    DIVIDE          shift and go to state 170


state 133

    (87) sem_top_factor -> empty .

    MULTIPLY        reduce using rule 87 (sem_top_factor -> empty .)
    DIVIDE          reduce using rule 87 (sem_top_factor -> empty .)
    PLUS            reduce using rule 87 (sem_top_factor -> empty .)
    MINUS           reduce using rule 87 (sem_top_factor -> empty .)
    IS_EQUAL_TO     reduce using rule 87 (sem_top_factor -> empty .)
    NOT_EQUAL_TO    reduce using rule 87 (sem_top_factor -> empty .)
    GREATER_THAN    reduce using rule 87 (sem_top_factor -> empty .)
    LESS_THAN       reduce using rule 87 (sem_top_factor -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 87 (sem_top_factor -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 87 (sem_top_factor -> empty .)
    AND             reduce using rule 87 (sem_top_factor -> empty .)
    OR              reduce using rule 87 (sem_top_factor -> empty .)
    SEMICOLON       reduce using rule 87 (sem_top_factor -> empty .)
    RIGHT_PAR       reduce using rule 87 (sem_top_factor -> empty .)
    RIGHT_BRACKET   reduce using rule 87 (sem_top_factor -> empty .)
    COMMA           reduce using rule 87 (sem_top_factor -> empty .)


state 134

    (62) factor -> LEFT_PAR sem_false_bottom_begin . mega_exp RIGHT_PAR sem_false_bottom_end
    (44) mega_exp -> . hyper_exp mega_exp_1
    (48) hyper_exp -> . exp hyper_exp_1
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    mega_exp                       shift and go to state 171
    hyper_exp                      shift and go to state 86
    exp                            shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 135

    (89) sem_false_bottom_begin -> empty .

    LEFT_PAR        reduce using rule 89 (sem_false_bottom_begin -> empty .)
    PLUS            reduce using rule 89 (sem_false_bottom_begin -> empty .)
    MINUS           reduce using rule 89 (sem_false_bottom_begin -> empty .)
    CTE_I           reduce using rule 89 (sem_false_bottom_begin -> empty .)
    CTE_D           reduce using rule 89 (sem_false_bottom_begin -> empty .)
    ID              reduce using rule 89 (sem_false_bottom_begin -> empty .)
    TRUE            reduce using rule 89 (sem_false_bottom_begin -> empty .)
    FALSE           reduce using rule 89 (sem_false_bottom_begin -> empty .)
    RIGHT_PAR       reduce using rule 89 (sem_false_bottom_begin -> empty .)


state 136

    (21) var_cte -> CTE_I sem_push_constant_int .

    MULTIPLY        reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    DIVIDE          reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    PLUS            reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    MINUS           reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    IS_EQUAL_TO     reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    NOT_EQUAL_TO    reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    GREATER_THAN    reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    LESS_THAN       reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    AND             reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    OR              reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    SEMICOLON       reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    RIGHT_PAR       reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    RIGHT_BRACKET   reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)
    COMMA           reduce using rule 21 (var_cte -> CTE_I sem_push_constant_int .)


state 137

    (84) sem_push_constant_int -> empty .

    MULTIPLY        reduce using rule 84 (sem_push_constant_int -> empty .)
    DIVIDE          reduce using rule 84 (sem_push_constant_int -> empty .)
    PLUS            reduce using rule 84 (sem_push_constant_int -> empty .)
    MINUS           reduce using rule 84 (sem_push_constant_int -> empty .)
    IS_EQUAL_TO     reduce using rule 84 (sem_push_constant_int -> empty .)
    NOT_EQUAL_TO    reduce using rule 84 (sem_push_constant_int -> empty .)
    GREATER_THAN    reduce using rule 84 (sem_push_constant_int -> empty .)
    LESS_THAN       reduce using rule 84 (sem_push_constant_int -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 84 (sem_push_constant_int -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 84 (sem_push_constant_int -> empty .)
    AND             reduce using rule 84 (sem_push_constant_int -> empty .)
    OR              reduce using rule 84 (sem_push_constant_int -> empty .)
    SEMICOLON       reduce using rule 84 (sem_push_constant_int -> empty .)
    RIGHT_PAR       reduce using rule 84 (sem_push_constant_int -> empty .)
    RIGHT_BRACKET   reduce using rule 84 (sem_push_constant_int -> empty .)
    COMMA           reduce using rule 84 (sem_push_constant_int -> empty .)


state 138

    (22) var_cte -> CTE_D sem_push_constant_double .

    MULTIPLY        reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    DIVIDE          reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    PLUS            reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    MINUS           reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    IS_EQUAL_TO     reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    NOT_EQUAL_TO    reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    GREATER_THAN    reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    LESS_THAN       reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    AND             reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    OR              reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    SEMICOLON       reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    RIGHT_PAR       reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    RIGHT_BRACKET   reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)
    COMMA           reduce using rule 22 (var_cte -> CTE_D sem_push_constant_double .)


state 139

    (85) sem_push_constant_double -> empty .

    MULTIPLY        reduce using rule 85 (sem_push_constant_double -> empty .)
    DIVIDE          reduce using rule 85 (sem_push_constant_double -> empty .)
    PLUS            reduce using rule 85 (sem_push_constant_double -> empty .)
    MINUS           reduce using rule 85 (sem_push_constant_double -> empty .)
    IS_EQUAL_TO     reduce using rule 85 (sem_push_constant_double -> empty .)
    NOT_EQUAL_TO    reduce using rule 85 (sem_push_constant_double -> empty .)
    GREATER_THAN    reduce using rule 85 (sem_push_constant_double -> empty .)
    LESS_THAN       reduce using rule 85 (sem_push_constant_double -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (sem_push_constant_double -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (sem_push_constant_double -> empty .)
    AND             reduce using rule 85 (sem_push_constant_double -> empty .)
    OR              reduce using rule 85 (sem_push_constant_double -> empty .)
    SEMICOLON       reduce using rule 85 (sem_push_constant_double -> empty .)
    RIGHT_PAR       reduce using rule 85 (sem_push_constant_double -> empty .)
    RIGHT_BRACKET   reduce using rule 85 (sem_push_constant_double -> empty .)
    COMMA           reduce using rule 85 (sem_push_constant_double -> empty .)


state 140

    (23) var_cte -> cte_b sem_push_constant_bool .

    MULTIPLY        reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    DIVIDE          reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    PLUS            reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    MINUS           reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    IS_EQUAL_TO     reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    NOT_EQUAL_TO    reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    GREATER_THAN    reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    LESS_THAN       reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    AND             reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    OR              reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    SEMICOLON       reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    RIGHT_PAR       reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    RIGHT_BRACKET   reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)
    COMMA           reduce using rule 23 (var_cte -> cte_b sem_push_constant_bool .)


state 141

    (86) sem_push_constant_bool -> empty .

    MULTIPLY        reduce using rule 86 (sem_push_constant_bool -> empty .)
    DIVIDE          reduce using rule 86 (sem_push_constant_bool -> empty .)
    PLUS            reduce using rule 86 (sem_push_constant_bool -> empty .)
    MINUS           reduce using rule 86 (sem_push_constant_bool -> empty .)
    IS_EQUAL_TO     reduce using rule 86 (sem_push_constant_bool -> empty .)
    NOT_EQUAL_TO    reduce using rule 86 (sem_push_constant_bool -> empty .)
    GREATER_THAN    reduce using rule 86 (sem_push_constant_bool -> empty .)
    LESS_THAN       reduce using rule 86 (sem_push_constant_bool -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 86 (sem_push_constant_bool -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 86 (sem_push_constant_bool -> empty .)
    AND             reduce using rule 86 (sem_push_constant_bool -> empty .)
    OR              reduce using rule 86 (sem_push_constant_bool -> empty .)
    SEMICOLON       reduce using rule 86 (sem_push_constant_bool -> empty .)
    RIGHT_PAR       reduce using rule 86 (sem_push_constant_bool -> empty .)
    RIGHT_BRACKET   reduce using rule 86 (sem_push_constant_bool -> empty .)
    COMMA           reduce using rule 86 (sem_push_constant_bool -> empty .)


state 142

    (24) var_cte -> ID sem_push_operand . matrix
    (9) matrix -> . LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (10) matrix -> . empty
    (77) empty -> .

    LEFT_BRACKET    shift and go to state 110
    MULTIPLY        reduce using rule 77 (empty -> .)
    DIVIDE          reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    IS_EQUAL_TO     reduce using rule 77 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 77 (empty -> .)
    GREATER_THAN    reduce using rule 77 (empty -> .)
    LESS_THAN       reduce using rule 77 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)
    RIGHT_BRACKET   reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)

    matrix                         shift and go to state 172
    empty                          shift and go to state 111

state 143

    (25) var_cte -> ID sem_check_function . LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub

    LEFT_PAR        shift and go to state 173


state 144

    (73) while_cycle -> WHILE sem_start_while LEFT_PAR . mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (44) mega_exp -> . hyper_exp mega_exp_1
    (48) hyper_exp -> . exp hyper_exp_1
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    mega_exp                       shift and go to state 174
    hyper_exp                      shift and go to state 86
    exp                            shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 145

    (74) read -> READ sem_push_operator LEFT_PAR . mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (44) mega_exp -> . hyper_exp mega_exp_1
    (48) hyper_exp -> . exp hyper_exp_1
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    mega_exp                       shift and go to state 175
    hyper_exp                      shift and go to state 86
    exp                            shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 146

    (75) write -> WRITE sem_push_operator LEFT_PAR . mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (44) mega_exp -> . hyper_exp mega_exp_1
    (48) hyper_exp -> . exp hyper_exp_1
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    mega_exp                       shift and go to state 176
    hyper_exp                      shift and go to state 86
    exp                            shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 147

    (14) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR . block
    (32) block -> . LEFT_BRACE var_declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 41

    block                          shift and go to state 177

state 148

    (15) param_declaration -> var_type ID . matrix_declaration sem_add_param
    (16) param_declaration -> var_type ID . matrix_declaration sem_add_param COMMA param_declaration
    (7) matrix_declaration -> . LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET
    (8) matrix_declaration -> . empty
    (77) empty -> .

    LEFT_BRACKET    shift and go to state 34
    COMMA           reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)

    matrix_declaration             shift and go to state 178
    empty                          shift and go to state 35

state 149

    (7) matrix_declaration -> LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I . sem_get_dim2 RIGHT_BRACKET
    (113) sem_get_dim2 -> . empty
    (77) empty -> .

    RIGHT_BRACKET   reduce using rule 77 (empty -> .)

    sem_get_dim2                   shift and go to state 179
    empty                          shift and go to state 180

state 150

    (42) assignment -> ID sem_push_operand matrix ASSIGN . sem_push_operator mega_exp sem_assign_value SEMICOLON
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 181
    empty                          shift and go to state 103

state 151

    (9) matrix -> LEFT_BRACKET sem_check_dim1 . exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    exp                            shift and go to state 182
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 152

    (115) sem_check_dim1 -> empty .

    LEFT_PAR        reduce using rule 115 (sem_check_dim1 -> empty .)
    PLUS            reduce using rule 115 (sem_check_dim1 -> empty .)
    MINUS           reduce using rule 115 (sem_check_dim1 -> empty .)
    CTE_I           reduce using rule 115 (sem_check_dim1 -> empty .)
    CTE_D           reduce using rule 115 (sem_check_dim1 -> empty .)
    ID              reduce using rule 115 (sem_check_dim1 -> empty .)
    TRUE            reduce using rule 115 (sem_check_dim1 -> empty .)
    FALSE           reduce using rule 115 (sem_check_dim1 -> empty .)


state 153

    (69) function_call -> ID sem_check_function LEFT_PAR sem_create_era . param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (70) param_call -> . mega_exp sem_check_param
    (71) param_call -> . mega_exp sem_check_param COMMA param_call
    (72) param_call -> . empty
    (44) mega_exp -> . hyper_exp mega_exp_1
    (77) empty -> .
    (48) hyper_exp -> . exp hyper_exp_1
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 77 (empty -> .)
    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    param_call                     shift and go to state 183
    mega_exp                       shift and go to state 184
    empty                          shift and go to state 185
    hyper_exp                      shift and go to state 86
    exp                            shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 154

    (103) sem_create_era -> empty .

    LEFT_PAR        reduce using rule 103 (sem_create_era -> empty .)
    PLUS            reduce using rule 103 (sem_create_era -> empty .)
    MINUS           reduce using rule 103 (sem_create_era -> empty .)
    CTE_I           reduce using rule 103 (sem_create_era -> empty .)
    CTE_D           reduce using rule 103 (sem_create_era -> empty .)
    ID              reduce using rule 103 (sem_create_era -> empty .)
    TRUE            reduce using rule 103 (sem_create_era -> empty .)
    FALSE           reduce using rule 103 (sem_create_era -> empty .)
    RIGHT_PAR       reduce using rule 103 (sem_create_era -> empty .)


state 155

    (66) condition -> IF LEFT_PAR mega_exp RIGHT_PAR . sem_end_condition block condition_1 sem_fill_gotof
    (96) sem_end_condition -> . empty
    (77) empty -> .

    LEFT_BRACE      reduce using rule 77 (empty -> .)

    sem_end_condition              shift and go to state 186
    empty                          shift and go to state 187

state 156

    (43) return -> RETURN mega_exp sem_return_function SEMICOLON .

    ID              reduce using rule 43 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    IF              reduce using rule 43 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    RETURN          reduce using rule 43 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    WHILE           reduce using rule 43 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    READ            reduce using rule 43 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    WRITE           reduce using rule 43 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    RIGHT_BRACE     reduce using rule 43 (return -> RETURN mega_exp sem_return_function SEMICOLON .)


state 157

    (45) mega_exp_1 -> AND sem_push_operator . mega_exp sem_top_logical
    (44) mega_exp -> . hyper_exp mega_exp_1
    (48) hyper_exp -> . exp hyper_exp_1
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    mega_exp                       shift and go to state 188
    hyper_exp                      shift and go to state 86
    exp                            shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 158

    (46) mega_exp_1 -> OR sem_push_operator . mega_exp sem_top_logical
    (44) mega_exp -> . hyper_exp mega_exp_1
    (48) hyper_exp -> . exp hyper_exp_1
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    mega_exp                       shift and go to state 189
    hyper_exp                      shift and go to state 86
    exp                            shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 159

    (49) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator . exp sem_top_relational
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    exp                            shift and go to state 190
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 160

    (50) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator . exp sem_top_relational
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    exp                            shift and go to state 191
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 161

    (51) hyper_exp_1 -> GREATER_THAN sem_push_operator . exp sem_top_relational
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    exp                            shift and go to state 192
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 162

    (52) hyper_exp_1 -> LESS_THAN sem_push_operator . exp sem_top_relational
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    exp                            shift and go to state 193
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 163

    (53) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator . exp sem_top_relational
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    exp                            shift and go to state 194
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 164

    (54) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator . exp sem_top_relational
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    exp                            shift and go to state 195
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 165

    (57) exp -> term sem_top_term PLUS . sem_push_operator exp
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 196
    empty                          shift and go to state 103

state 166

    (58) exp -> term sem_top_term MINUS . sem_push_operator exp
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 197
    empty                          shift and go to state 103

state 167

    (64) factor -> PLUS sem_push_operator var_cte .

    MULTIPLY        reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    DIVIDE          reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    PLUS            reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    MINUS           reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    IS_EQUAL_TO     reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    NOT_EQUAL_TO    reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    GREATER_THAN    reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    LESS_THAN       reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    AND             reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    OR              reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    SEMICOLON       reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    RIGHT_PAR       reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    RIGHT_BRACKET   reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)
    COMMA           reduce using rule 64 (factor -> PLUS sem_push_operator var_cte .)


state 168

    (65) factor -> MINUS sem_push_operator var_cte .

    MULTIPLY        reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    DIVIDE          reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    PLUS            reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    MINUS           reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    IS_EQUAL_TO     reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    NOT_EQUAL_TO    reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    GREATER_THAN    reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    LESS_THAN       reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    AND             reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    OR              reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    SEMICOLON       reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    RIGHT_PAR       reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    RIGHT_BRACKET   reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)
    COMMA           reduce using rule 65 (factor -> MINUS sem_push_operator var_cte .)


state 169

    (60) term -> factor sem_top_factor MULTIPLY . sem_push_operator term
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 198
    empty                          shift and go to state 103

state 170

    (61) term -> factor sem_top_factor DIVIDE . sem_push_operator term
    (82) sem_push_operator -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_push_operator              shift and go to state 199
    empty                          shift and go to state 103

state 171

    (62) factor -> LEFT_PAR sem_false_bottom_begin mega_exp . RIGHT_PAR sem_false_bottom_end

    RIGHT_PAR       shift and go to state 200


state 172

    (24) var_cte -> ID sem_push_operand matrix .

    MULTIPLY        reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    DIVIDE          reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    PLUS            reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    MINUS           reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    IS_EQUAL_TO     reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    NOT_EQUAL_TO    reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    GREATER_THAN    reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    LESS_THAN       reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    AND             reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    OR              reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    SEMICOLON       reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    RIGHT_PAR       reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    RIGHT_BRACKET   reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)
    COMMA           reduce using rule 24 (var_cte -> ID sem_push_operand matrix .)


state 173

    (25) var_cte -> ID sem_check_function LEFT_PAR . sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (89) sem_false_bottom_begin -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)

    sem_false_bottom_begin         shift and go to state 201
    empty                          shift and go to state 135

state 174

    (73) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp . RIGHT_PAR sem_end_condition block sem_end_while

    RIGHT_PAR       shift and go to state 202


state 175

    (74) read -> READ sem_push_operator LEFT_PAR mega_exp . RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_PAR       shift and go to state 203


state 176

    (75) write -> WRITE sem_push_operator LEFT_PAR mega_exp . RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_PAR       shift and go to state 204


state 177

    (14) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .

    FUNCTION        reduce using rule 14 (func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .)
    MAIN            reduce using rule 14 (func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .)


state 178

    (15) param_declaration -> var_type ID matrix_declaration . sem_add_param
    (16) param_declaration -> var_type ID matrix_declaration . sem_add_param COMMA param_declaration
    (101) sem_add_param -> . empty
    (77) empty -> .

    COMMA           reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)

    sem_add_param                  shift and go to state 205
    empty                          shift and go to state 206

state 179

    (7) matrix_declaration -> LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 207


state 180

    (113) sem_get_dim2 -> empty .

    RIGHT_BRACKET   reduce using rule 113 (sem_get_dim2 -> empty .)


state 181

    (42) assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator . mega_exp sem_assign_value SEMICOLON
    (44) mega_exp -> . hyper_exp mega_exp_1
    (48) hyper_exp -> . exp hyper_exp_1
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    mega_exp                       shift and go to state 208
    hyper_exp                      shift and go to state 86
    exp                            shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 182

    (9) matrix -> LEFT_BRACKET sem_check_dim1 exp . RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2

    RIGHT_BRACKET   shift and go to state 209


state 183

    (69) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call . RIGHT_PAR sem_count_params SEMICOLON sem_gosub

    RIGHT_PAR       shift and go to state 210


state 184

    (70) param_call -> mega_exp . sem_check_param
    (71) param_call -> mega_exp . sem_check_param COMMA param_call
    (104) sem_check_param -> . empty
    (77) empty -> .

    COMMA           reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)

    sem_check_param                shift and go to state 211
    empty                          shift and go to state 212

state 185

    (72) param_call -> empty .

    RIGHT_PAR       reduce using rule 72 (param_call -> empty .)


state 186

    (66) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition . block condition_1 sem_fill_gotof
    (32) block -> . LEFT_BRACE var_declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 41

    block                          shift and go to state 213

state 187

    (96) sem_end_condition -> empty .

    LEFT_BRACE      reduce using rule 96 (sem_end_condition -> empty .)


state 188

    (45) mega_exp_1 -> AND sem_push_operator mega_exp . sem_top_logical
    (94) sem_top_logical -> .

    SEMICOLON       reduce using rule 94 (sem_top_logical -> .)
    RIGHT_PAR       reduce using rule 94 (sem_top_logical -> .)
    COMMA           reduce using rule 94 (sem_top_logical -> .)

    sem_top_logical                shift and go to state 214

state 189

    (46) mega_exp_1 -> OR sem_push_operator mega_exp . sem_top_logical
    (94) sem_top_logical -> .

    SEMICOLON       reduce using rule 94 (sem_top_logical -> .)
    RIGHT_PAR       reduce using rule 94 (sem_top_logical -> .)
    COMMA           reduce using rule 94 (sem_top_logical -> .)

    sem_top_logical                shift and go to state 215

state 190

    (49) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp . sem_top_relational
    (95) sem_top_relational -> .

    AND             reduce using rule 95 (sem_top_relational -> .)
    OR              reduce using rule 95 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 95 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 95 (sem_top_relational -> .)
    COMMA           reduce using rule 95 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 216

state 191

    (50) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp . sem_top_relational
    (95) sem_top_relational -> .

    AND             reduce using rule 95 (sem_top_relational -> .)
    OR              reduce using rule 95 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 95 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 95 (sem_top_relational -> .)
    COMMA           reduce using rule 95 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 217

state 192

    (51) hyper_exp_1 -> GREATER_THAN sem_push_operator exp . sem_top_relational
    (95) sem_top_relational -> .

    AND             reduce using rule 95 (sem_top_relational -> .)
    OR              reduce using rule 95 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 95 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 95 (sem_top_relational -> .)
    COMMA           reduce using rule 95 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 218

state 193

    (52) hyper_exp_1 -> LESS_THAN sem_push_operator exp . sem_top_relational
    (95) sem_top_relational -> .

    AND             reduce using rule 95 (sem_top_relational -> .)
    OR              reduce using rule 95 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 95 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 95 (sem_top_relational -> .)
    COMMA           reduce using rule 95 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 219

state 194

    (53) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp . sem_top_relational
    (95) sem_top_relational -> .

    AND             reduce using rule 95 (sem_top_relational -> .)
    OR              reduce using rule 95 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 95 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 95 (sem_top_relational -> .)
    COMMA           reduce using rule 95 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 220

state 195

    (54) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp . sem_top_relational
    (95) sem_top_relational -> .

    AND             reduce using rule 95 (sem_top_relational -> .)
    OR              reduce using rule 95 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 95 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 95 (sem_top_relational -> .)
    COMMA           reduce using rule 95 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 221

state 196

    (57) exp -> term sem_top_term PLUS sem_push_operator . exp
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    term                           shift and go to state 88
    exp                            shift and go to state 222
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 197

    (58) exp -> term sem_top_term MINUS sem_push_operator . exp
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    term                           shift and go to state 88
    exp                            shift and go to state 223
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 198

    (60) term -> factor sem_top_factor MULTIPLY sem_push_operator . term
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    factor                         shift and go to state 91
    term                           shift and go to state 224
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 199

    (61) term -> factor sem_top_factor DIVIDE sem_push_operator . term
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    factor                         shift and go to state 91
    term                           shift and go to state 225
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 200

    (62) factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR . sem_false_bottom_end
    (90) sem_false_bottom_end -> . empty
    (77) empty -> .

    MULTIPLY        reduce using rule 77 (empty -> .)
    DIVIDE          reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    IS_EQUAL_TO     reduce using rule 77 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 77 (empty -> .)
    GREATER_THAN    reduce using rule 77 (empty -> .)
    LESS_THAN       reduce using rule 77 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)
    RIGHT_BRACKET   reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)

    sem_false_bottom_end           shift and go to state 226
    empty                          shift and go to state 227

state 201

    (25) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin . sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (103) sem_create_era -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)

    sem_create_era                 shift and go to state 228
    empty                          shift and go to state 154

state 202

    (73) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR . sem_end_condition block sem_end_while
    (96) sem_end_condition -> . empty
    (77) empty -> .

    LEFT_BRACE      reduce using rule 77 (empty -> .)

    sem_end_condition              shift and go to state 229
    empty                          shift and go to state 187

state 203

    (74) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR . sem_read_write SEMICOLON
    (92) sem_read_write -> . empty
    (77) empty -> .

    SEMICOLON       reduce using rule 77 (empty -> .)

    sem_read_write                 shift and go to state 230
    empty                          shift and go to state 231

state 204

    (75) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR . sem_read_write SEMICOLON
    (92) sem_read_write -> . empty
    (77) empty -> .

    SEMICOLON       reduce using rule 77 (empty -> .)

    sem_read_write                 shift and go to state 232
    empty                          shift and go to state 231

state 205

    (15) param_declaration -> var_type ID matrix_declaration sem_add_param .
    (16) param_declaration -> var_type ID matrix_declaration sem_add_param . COMMA param_declaration

    RIGHT_PAR       reduce using rule 15 (param_declaration -> var_type ID matrix_declaration sem_add_param .)
    COMMA           shift and go to state 233


state 206

    (101) sem_add_param -> empty .

    COMMA           reduce using rule 101 (sem_add_param -> empty .)
    RIGHT_PAR       reduce using rule 101 (sem_add_param -> empty .)


state 207

    (7) matrix_declaration -> LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET .

    ID              reduce using rule 7 (matrix_declaration -> LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 7 (matrix_declaration -> LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET .)
    COMMA           reduce using rule 7 (matrix_declaration -> LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET .)
    RIGHT_PAR       reduce using rule 7 (matrix_declaration -> LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET .)


state 208

    (42) assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp . sem_assign_value SEMICOLON
    (91) sem_assign_value -> . empty
    (77) empty -> .

    SEMICOLON       reduce using rule 77 (empty -> .)

    sem_assign_value               shift and go to state 234
    empty                          shift and go to state 235

state 209

    (9) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET . sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (116) sem_ver_dim1 -> . empty
    (77) empty -> .

    LEFT_BRACKET    reduce using rule 77 (empty -> .)

    sem_ver_dim1                   shift and go to state 236
    empty                          shift and go to state 237

state 210

    (69) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR . sem_count_params SEMICOLON sem_gosub
    (105) sem_count_params -> . empty
    (77) empty -> .

    SEMICOLON       reduce using rule 77 (empty -> .)

    sem_count_params               shift and go to state 238
    empty                          shift and go to state 239

state 211

    (70) param_call -> mega_exp sem_check_param .
    (71) param_call -> mega_exp sem_check_param . COMMA param_call

    RIGHT_PAR       reduce using rule 70 (param_call -> mega_exp sem_check_param .)
    COMMA           shift and go to state 240


state 212

    (104) sem_check_param -> empty .

    COMMA           reduce using rule 104 (sem_check_param -> empty .)
    RIGHT_PAR       reduce using rule 104 (sem_check_param -> empty .)


state 213

    (66) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block . condition_1 sem_fill_gotof
    (67) condition_1 -> . ELSE sem_else_condition block
    (68) condition_1 -> . empty
    (77) empty -> .

    ELSE            shift and go to state 242
    ID              reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    RETURN          reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    READ            reduce using rule 77 (empty -> .)
    WRITE           reduce using rule 77 (empty -> .)
    RIGHT_BRACE     reduce using rule 77 (empty -> .)

    condition_1                    shift and go to state 241
    empty                          shift and go to state 243

state 214

    (45) mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .

    SEMICOLON       reduce using rule 45 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)
    RIGHT_PAR       reduce using rule 45 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)
    COMMA           reduce using rule 45 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)


state 215

    (46) mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .

    SEMICOLON       reduce using rule 46 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)
    RIGHT_PAR       reduce using rule 46 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)
    COMMA           reduce using rule 46 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)


state 216

    (49) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 49 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 49 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 49 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 49 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 49 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 217

    (50) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 50 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 50 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 50 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 50 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 50 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 218

    (51) hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .

    AND             reduce using rule 51 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 51 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 51 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 51 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 51 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)


state 219

    (52) hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .

    AND             reduce using rule 52 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 52 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 52 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 52 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 52 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)


state 220

    (53) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 53 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 53 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 53 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 53 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 53 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 221

    (54) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 54 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 54 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 54 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 54 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 54 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 222

    (57) exp -> term sem_top_term PLUS sem_push_operator exp .

    IS_EQUAL_TO     reduce using rule 57 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    NOT_EQUAL_TO    reduce using rule 57 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    GREATER_THAN    reduce using rule 57 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    LESS_THAN       reduce using rule 57 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 57 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 57 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    AND             reduce using rule 57 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    OR              reduce using rule 57 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    SEMICOLON       reduce using rule 57 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    RIGHT_PAR       reduce using rule 57 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    RIGHT_BRACKET   reduce using rule 57 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    COMMA           reduce using rule 57 (exp -> term sem_top_term PLUS sem_push_operator exp .)


state 223

    (58) exp -> term sem_top_term MINUS sem_push_operator exp .

    IS_EQUAL_TO     reduce using rule 58 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    NOT_EQUAL_TO    reduce using rule 58 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    GREATER_THAN    reduce using rule 58 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    LESS_THAN       reduce using rule 58 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 58 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 58 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    AND             reduce using rule 58 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    OR              reduce using rule 58 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    SEMICOLON       reduce using rule 58 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    RIGHT_PAR       reduce using rule 58 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    RIGHT_BRACKET   reduce using rule 58 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    COMMA           reduce using rule 58 (exp -> term sem_top_term MINUS sem_push_operator exp .)


state 224

    (60) term -> factor sem_top_factor MULTIPLY sem_push_operator term .

    PLUS            reduce using rule 60 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    MINUS           reduce using rule 60 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    IS_EQUAL_TO     reduce using rule 60 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    NOT_EQUAL_TO    reduce using rule 60 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    GREATER_THAN    reduce using rule 60 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    LESS_THAN       reduce using rule 60 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 60 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 60 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    AND             reduce using rule 60 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    OR              reduce using rule 60 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    SEMICOLON       reduce using rule 60 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    RIGHT_PAR       reduce using rule 60 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    RIGHT_BRACKET   reduce using rule 60 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    COMMA           reduce using rule 60 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)


state 225

    (61) term -> factor sem_top_factor DIVIDE sem_push_operator term .

    PLUS            reduce using rule 61 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    MINUS           reduce using rule 61 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    IS_EQUAL_TO     reduce using rule 61 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    NOT_EQUAL_TO    reduce using rule 61 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    GREATER_THAN    reduce using rule 61 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    LESS_THAN       reduce using rule 61 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 61 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 61 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    AND             reduce using rule 61 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    OR              reduce using rule 61 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    SEMICOLON       reduce using rule 61 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    RIGHT_PAR       reduce using rule 61 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    RIGHT_BRACKET   reduce using rule 61 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    COMMA           reduce using rule 61 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)


state 226

    (62) factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .

    MULTIPLY        reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    DIVIDE          reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    PLUS            reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    MINUS           reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    IS_EQUAL_TO     reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    NOT_EQUAL_TO    reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    GREATER_THAN    reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    LESS_THAN       reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    AND             reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    OR              reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    SEMICOLON       reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    RIGHT_PAR       reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    RIGHT_BRACKET   reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    COMMA           reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)


state 227

    (90) sem_false_bottom_end -> empty .

    MULTIPLY        reduce using rule 90 (sem_false_bottom_end -> empty .)
    DIVIDE          reduce using rule 90 (sem_false_bottom_end -> empty .)
    PLUS            reduce using rule 90 (sem_false_bottom_end -> empty .)
    MINUS           reduce using rule 90 (sem_false_bottom_end -> empty .)
    IS_EQUAL_TO     reduce using rule 90 (sem_false_bottom_end -> empty .)
    NOT_EQUAL_TO    reduce using rule 90 (sem_false_bottom_end -> empty .)
    GREATER_THAN    reduce using rule 90 (sem_false_bottom_end -> empty .)
    LESS_THAN       reduce using rule 90 (sem_false_bottom_end -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 90 (sem_false_bottom_end -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 90 (sem_false_bottom_end -> empty .)
    AND             reduce using rule 90 (sem_false_bottom_end -> empty .)
    OR              reduce using rule 90 (sem_false_bottom_end -> empty .)
    SEMICOLON       reduce using rule 90 (sem_false_bottom_end -> empty .)
    RIGHT_PAR       reduce using rule 90 (sem_false_bottom_end -> empty .)
    RIGHT_BRACKET   reduce using rule 90 (sem_false_bottom_end -> empty .)
    COMMA           reduce using rule 90 (sem_false_bottom_end -> empty .)


state 228

    (25) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era . param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (70) param_call -> . mega_exp sem_check_param
    (71) param_call -> . mega_exp sem_check_param COMMA param_call
    (72) param_call -> . empty
    (44) mega_exp -> . hyper_exp mega_exp_1
    (77) empty -> .
    (48) hyper_exp -> . exp hyper_exp_1
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 77 (empty -> .)
    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    param_call                     shift and go to state 244
    mega_exp                       shift and go to state 184
    empty                          shift and go to state 185
    hyper_exp                      shift and go to state 86
    exp                            shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 229

    (73) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition . block sem_end_while
    (32) block -> . LEFT_BRACE var_declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 41

    block                          shift and go to state 245

state 230

    (74) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write . SEMICOLON

    SEMICOLON       shift and go to state 246


state 231

    (92) sem_read_write -> empty .

    SEMICOLON       reduce using rule 92 (sem_read_write -> empty .)


state 232

    (75) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write . SEMICOLON

    SEMICOLON       shift and go to state 247


state 233

    (16) param_declaration -> var_type ID matrix_declaration sem_add_param COMMA . param_declaration
    (15) param_declaration -> . var_type ID matrix_declaration sem_add_param
    (16) param_declaration -> . var_type ID matrix_declaration sem_add_param COMMA param_declaration
    (17) param_declaration -> . empty
    (18) var_type -> . INT sem_get_type
    (19) var_type -> . DOUBLE sem_get_type
    (20) var_type -> . BOOL sem_get_type
    (77) empty -> .

    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    RIGHT_PAR       reduce using rule 77 (empty -> .)

    var_type                       shift and go to state 106
    param_declaration              shift and go to state 248
    empty                          shift and go to state 107

state 234

    (42) assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value . SEMICOLON

    SEMICOLON       shift and go to state 249


state 235

    (91) sem_assign_value -> empty .

    SEMICOLON       reduce using rule 91 (sem_assign_value -> empty .)


state 236

    (9) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 . LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2

    LEFT_BRACKET    shift and go to state 250


state 237

    (116) sem_ver_dim1 -> empty .

    LEFT_BRACKET    reduce using rule 116 (sem_ver_dim1 -> empty .)


state 238

    (69) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params . SEMICOLON sem_gosub

    SEMICOLON       shift and go to state 251


state 239

    (105) sem_count_params -> empty .

    SEMICOLON       reduce using rule 105 (sem_count_params -> empty .)
    MULTIPLY        reduce using rule 105 (sem_count_params -> empty .)
    DIVIDE          reduce using rule 105 (sem_count_params -> empty .)
    PLUS            reduce using rule 105 (sem_count_params -> empty .)
    MINUS           reduce using rule 105 (sem_count_params -> empty .)
    IS_EQUAL_TO     reduce using rule 105 (sem_count_params -> empty .)
    NOT_EQUAL_TO    reduce using rule 105 (sem_count_params -> empty .)
    GREATER_THAN    reduce using rule 105 (sem_count_params -> empty .)
    LESS_THAN       reduce using rule 105 (sem_count_params -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 105 (sem_count_params -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 105 (sem_count_params -> empty .)
    AND             reduce using rule 105 (sem_count_params -> empty .)
    OR              reduce using rule 105 (sem_count_params -> empty .)
    RIGHT_PAR       reduce using rule 105 (sem_count_params -> empty .)
    RIGHT_BRACKET   reduce using rule 105 (sem_count_params -> empty .)
    COMMA           reduce using rule 105 (sem_count_params -> empty .)


state 240

    (71) param_call -> mega_exp sem_check_param COMMA . param_call
    (70) param_call -> . mega_exp sem_check_param
    (71) param_call -> . mega_exp sem_check_param COMMA param_call
    (72) param_call -> . empty
    (44) mega_exp -> . hyper_exp mega_exp_1
    (77) empty -> .
    (48) hyper_exp -> . exp hyper_exp_1
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 77 (empty -> .)
    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    mega_exp                       shift and go to state 184
    param_call                     shift and go to state 252
    empty                          shift and go to state 185
    hyper_exp                      shift and go to state 86
    exp                            shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 241

    (66) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 . sem_fill_gotof
    (97) sem_fill_gotof -> . empty
    (77) empty -> .

    ID              reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    RETURN          reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    READ            reduce using rule 77 (empty -> .)
    WRITE           reduce using rule 77 (empty -> .)
    RIGHT_BRACE     reduce using rule 77 (empty -> .)

    sem_fill_gotof                 shift and go to state 253
    empty                          shift and go to state 254

state 242

    (67) condition_1 -> ELSE . sem_else_condition block
    (98) sem_else_condition -> . empty
    (77) empty -> .

    LEFT_BRACE      reduce using rule 77 (empty -> .)

    sem_else_condition             shift and go to state 255
    empty                          shift and go to state 256

state 243

    (68) condition_1 -> empty .

    ID              reduce using rule 68 (condition_1 -> empty .)
    IF              reduce using rule 68 (condition_1 -> empty .)
    RETURN          reduce using rule 68 (condition_1 -> empty .)
    WHILE           reduce using rule 68 (condition_1 -> empty .)
    READ            reduce using rule 68 (condition_1 -> empty .)
    WRITE           reduce using rule 68 (condition_1 -> empty .)
    RIGHT_BRACE     reduce using rule 68 (condition_1 -> empty .)


state 244

    (25) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call . RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub

    RIGHT_PAR       shift and go to state 257


state 245

    (73) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block . sem_end_while
    (100) sem_end_while -> . empty
    (77) empty -> .

    ID              reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    RETURN          reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    READ            reduce using rule 77 (empty -> .)
    WRITE           reduce using rule 77 (empty -> .)
    RIGHT_BRACE     reduce using rule 77 (empty -> .)

    sem_end_while                  shift and go to state 258
    empty                          shift and go to state 259

state 246

    (74) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .

    ID              reduce using rule 74 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    IF              reduce using rule 74 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RETURN          reduce using rule 74 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WHILE           reduce using rule 74 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    READ            reduce using rule 74 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WRITE           reduce using rule 74 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RIGHT_BRACE     reduce using rule 74 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)


state 247

    (75) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .

    ID              reduce using rule 75 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    IF              reduce using rule 75 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RETURN          reduce using rule 75 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WHILE           reduce using rule 75 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    READ            reduce using rule 75 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WRITE           reduce using rule 75 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RIGHT_BRACE     reduce using rule 75 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)


state 248

    (16) param_declaration -> var_type ID matrix_declaration sem_add_param COMMA param_declaration .

    RIGHT_PAR       reduce using rule 16 (param_declaration -> var_type ID matrix_declaration sem_add_param COMMA param_declaration .)


state 249

    (42) assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .

    ID              reduce using rule 42 (assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    IF              reduce using rule 42 (assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    RETURN          reduce using rule 42 (assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    WHILE           reduce using rule 42 (assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    READ            reduce using rule 42 (assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    WRITE           reduce using rule 42 (assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    RIGHT_BRACE     reduce using rule 42 (assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)


state 250

    (9) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET . sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (117) sem_check_dim2 -> . empty
    (77) empty -> .

    LEFT_PAR        reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    CTE_I           reduce using rule 77 (empty -> .)
    CTE_D           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)

    sem_check_dim2                 shift and go to state 260
    empty                          shift and go to state 261

state 251

    (69) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON . sem_gosub
    (106) sem_gosub -> . empty
    (77) empty -> .

    ID              reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    RETURN          reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    READ            reduce using rule 77 (empty -> .)
    WRITE           reduce using rule 77 (empty -> .)
    RIGHT_BRACE     reduce using rule 77 (empty -> .)

    sem_gosub                      shift and go to state 262
    empty                          shift and go to state 263

state 252

    (71) param_call -> mega_exp sem_check_param COMMA param_call .

    RIGHT_PAR       reduce using rule 71 (param_call -> mega_exp sem_check_param COMMA param_call .)


state 253

    (66) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .

    ID              reduce using rule 66 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    IF              reduce using rule 66 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    RETURN          reduce using rule 66 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    WHILE           reduce using rule 66 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    READ            reduce using rule 66 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    WRITE           reduce using rule 66 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    RIGHT_BRACE     reduce using rule 66 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)


state 254

    (97) sem_fill_gotof -> empty .

    ID              reduce using rule 97 (sem_fill_gotof -> empty .)
    IF              reduce using rule 97 (sem_fill_gotof -> empty .)
    RETURN          reduce using rule 97 (sem_fill_gotof -> empty .)
    WHILE           reduce using rule 97 (sem_fill_gotof -> empty .)
    READ            reduce using rule 97 (sem_fill_gotof -> empty .)
    WRITE           reduce using rule 97 (sem_fill_gotof -> empty .)
    RIGHT_BRACE     reduce using rule 97 (sem_fill_gotof -> empty .)


state 255

    (67) condition_1 -> ELSE sem_else_condition . block
    (32) block -> . LEFT_BRACE var_declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 41

    block                          shift and go to state 264

state 256

    (98) sem_else_condition -> empty .

    LEFT_BRACE      reduce using rule 98 (sem_else_condition -> empty .)


state 257

    (25) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR . sem_false_bottom_end sem_count_params sem_gosub
    (90) sem_false_bottom_end -> . empty
    (77) empty -> .

    MULTIPLY        reduce using rule 77 (empty -> .)
    DIVIDE          reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    IS_EQUAL_TO     reduce using rule 77 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 77 (empty -> .)
    GREATER_THAN    reduce using rule 77 (empty -> .)
    LESS_THAN       reduce using rule 77 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)
    RIGHT_BRACKET   reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)

    sem_false_bottom_end           shift and go to state 265
    empty                          shift and go to state 227

state 258

    (73) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .

    ID              reduce using rule 73 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    IF              reduce using rule 73 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    RETURN          reduce using rule 73 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    WHILE           reduce using rule 73 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    READ            reduce using rule 73 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    WRITE           reduce using rule 73 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    RIGHT_BRACE     reduce using rule 73 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)


state 259

    (100) sem_end_while -> empty .

    ID              reduce using rule 100 (sem_end_while -> empty .)
    IF              reduce using rule 100 (sem_end_while -> empty .)
    RETURN          reduce using rule 100 (sem_end_while -> empty .)
    WHILE           reduce using rule 100 (sem_end_while -> empty .)
    READ            reduce using rule 100 (sem_end_while -> empty .)
    WRITE           reduce using rule 100 (sem_end_while -> empty .)
    RIGHT_BRACE     reduce using rule 100 (sem_end_while -> empty .)


state 260

    (9) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 . exp RIGHT_BRACKET sem_ver_dim2
    (56) exp -> . term sem_top_term
    (57) exp -> . term sem_top_term PLUS sem_push_operator exp
    (58) exp -> . term sem_top_term MINUS sem_push_operator exp
    (59) term -> . factor sem_top_factor
    (60) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (61) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (62) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . PLUS sem_push_operator var_cte
    (65) factor -> . MINUS sem_push_operator var_cte
    (21) var_cte -> . CTE_I sem_push_constant_int
    (22) var_cte -> . CTE_D sem_push_constant_double
    (23) var_cte -> . cte_b sem_push_constant_bool
    (24) var_cte -> . ID sem_push_operand matrix
    (25) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 92
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    CTE_I           shift and go to state 94
    CTE_D           shift and go to state 95
    ID              shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    exp                            shift and go to state 266
    term                           shift and go to state 88
    factor                         shift and go to state 91
    var_cte                        shift and go to state 93
    cte_b                          shift and go to state 96

state 261

    (117) sem_check_dim2 -> empty .

    LEFT_PAR        reduce using rule 117 (sem_check_dim2 -> empty .)
    PLUS            reduce using rule 117 (sem_check_dim2 -> empty .)
    MINUS           reduce using rule 117 (sem_check_dim2 -> empty .)
    CTE_I           reduce using rule 117 (sem_check_dim2 -> empty .)
    CTE_D           reduce using rule 117 (sem_check_dim2 -> empty .)
    ID              reduce using rule 117 (sem_check_dim2 -> empty .)
    TRUE            reduce using rule 117 (sem_check_dim2 -> empty .)
    FALSE           reduce using rule 117 (sem_check_dim2 -> empty .)


state 262

    (69) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .

    ID              reduce using rule 69 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    IF              reduce using rule 69 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    RETURN          reduce using rule 69 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    WHILE           reduce using rule 69 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    READ            reduce using rule 69 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    WRITE           reduce using rule 69 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    RIGHT_BRACE     reduce using rule 69 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)


state 263

    (106) sem_gosub -> empty .

    ID              reduce using rule 106 (sem_gosub -> empty .)
    IF              reduce using rule 106 (sem_gosub -> empty .)
    RETURN          reduce using rule 106 (sem_gosub -> empty .)
    WHILE           reduce using rule 106 (sem_gosub -> empty .)
    READ            reduce using rule 106 (sem_gosub -> empty .)
    WRITE           reduce using rule 106 (sem_gosub -> empty .)
    RIGHT_BRACE     reduce using rule 106 (sem_gosub -> empty .)
    MULTIPLY        reduce using rule 106 (sem_gosub -> empty .)
    DIVIDE          reduce using rule 106 (sem_gosub -> empty .)
    PLUS            reduce using rule 106 (sem_gosub -> empty .)
    MINUS           reduce using rule 106 (sem_gosub -> empty .)
    IS_EQUAL_TO     reduce using rule 106 (sem_gosub -> empty .)
    NOT_EQUAL_TO    reduce using rule 106 (sem_gosub -> empty .)
    GREATER_THAN    reduce using rule 106 (sem_gosub -> empty .)
    LESS_THAN       reduce using rule 106 (sem_gosub -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 106 (sem_gosub -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 106 (sem_gosub -> empty .)
    AND             reduce using rule 106 (sem_gosub -> empty .)
    OR              reduce using rule 106 (sem_gosub -> empty .)
    SEMICOLON       reduce using rule 106 (sem_gosub -> empty .)
    RIGHT_PAR       reduce using rule 106 (sem_gosub -> empty .)
    RIGHT_BRACKET   reduce using rule 106 (sem_gosub -> empty .)
    COMMA           reduce using rule 106 (sem_gosub -> empty .)


state 264

    (67) condition_1 -> ELSE sem_else_condition block .

    ID              reduce using rule 67 (condition_1 -> ELSE sem_else_condition block .)
    IF              reduce using rule 67 (condition_1 -> ELSE sem_else_condition block .)
    RETURN          reduce using rule 67 (condition_1 -> ELSE sem_else_condition block .)
    WHILE           reduce using rule 67 (condition_1 -> ELSE sem_else_condition block .)
    READ            reduce using rule 67 (condition_1 -> ELSE sem_else_condition block .)
    WRITE           reduce using rule 67 (condition_1 -> ELSE sem_else_condition block .)
    RIGHT_BRACE     reduce using rule 67 (condition_1 -> ELSE sem_else_condition block .)


state 265

    (25) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end . sem_count_params sem_gosub
    (105) sem_count_params -> . empty
    (77) empty -> .

    MULTIPLY        reduce using rule 77 (empty -> .)
    DIVIDE          reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    IS_EQUAL_TO     reduce using rule 77 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 77 (empty -> .)
    GREATER_THAN    reduce using rule 77 (empty -> .)
    LESS_THAN       reduce using rule 77 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)
    RIGHT_BRACKET   reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)

    sem_count_params               shift and go to state 267
    empty                          shift and go to state 239

state 266

    (9) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp . RIGHT_BRACKET sem_ver_dim2

    RIGHT_BRACKET   shift and go to state 268


state 267

    (25) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params . sem_gosub
    (106) sem_gosub -> . empty
    (77) empty -> .

    MULTIPLY        reduce using rule 77 (empty -> .)
    DIVIDE          reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    IS_EQUAL_TO     reduce using rule 77 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 77 (empty -> .)
    GREATER_THAN    reduce using rule 77 (empty -> .)
    LESS_THAN       reduce using rule 77 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)
    RIGHT_BRACKET   reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)

    sem_gosub                      shift and go to state 269
    empty                          shift and go to state 263

state 268

    (9) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET . sem_ver_dim2
    (118) sem_ver_dim2 -> . empty
    (77) empty -> .

    ASSIGN          reduce using rule 77 (empty -> .)
    MULTIPLY        reduce using rule 77 (empty -> .)
    DIVIDE          reduce using rule 77 (empty -> .)
    PLUS            reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    IS_EQUAL_TO     reduce using rule 77 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 77 (empty -> .)
    GREATER_THAN    reduce using rule 77 (empty -> .)
    LESS_THAN       reduce using rule 77 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    RIGHT_PAR       reduce using rule 77 (empty -> .)
    RIGHT_BRACKET   reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)

    sem_ver_dim2                   shift and go to state 270
    empty                          shift and go to state 271

state 269

    (25) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .

    MULTIPLY        reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    DIVIDE          reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    PLUS            reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    MINUS           reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    IS_EQUAL_TO     reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    NOT_EQUAL_TO    reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    GREATER_THAN    reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    LESS_THAN       reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    AND             reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    OR              reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    SEMICOLON       reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    RIGHT_PAR       reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    RIGHT_BRACKET   reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    COMMA           reduce using rule 25 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)


state 270

    (9) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .

    ASSIGN          reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    MULTIPLY        reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    DIVIDE          reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    PLUS            reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    MINUS           reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    IS_EQUAL_TO     reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    NOT_EQUAL_TO    reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    GREATER_THAN    reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    LESS_THAN       reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    AND             reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    OR              reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    SEMICOLON       reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    RIGHT_PAR       reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    RIGHT_BRACKET   reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    COMMA           reduce using rule 9 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)


state 271

    (118) sem_ver_dim2 -> empty .

    ASSIGN          reduce using rule 118 (sem_ver_dim2 -> empty .)
    MULTIPLY        reduce using rule 118 (sem_ver_dim2 -> empty .)
    DIVIDE          reduce using rule 118 (sem_ver_dim2 -> empty .)
    PLUS            reduce using rule 118 (sem_ver_dim2 -> empty .)
    MINUS           reduce using rule 118 (sem_ver_dim2 -> empty .)
    IS_EQUAL_TO     reduce using rule 118 (sem_ver_dim2 -> empty .)
    NOT_EQUAL_TO    reduce using rule 118 (sem_ver_dim2 -> empty .)
    GREATER_THAN    reduce using rule 118 (sem_ver_dim2 -> empty .)
    LESS_THAN       reduce using rule 118 (sem_ver_dim2 -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 118 (sem_ver_dim2 -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 118 (sem_ver_dim2 -> empty .)
    AND             reduce using rule 118 (sem_ver_dim2 -> empty .)
    OR              reduce using rule 118 (sem_ver_dim2 -> empty .)
    SEMICOLON       reduce using rule 118 (sem_ver_dim2 -> empty .)
    RIGHT_PAR       reduce using rule 118 (sem_ver_dim2 -> empty .)
    RIGHT_BRACKET   reduce using rule 118 (sem_ver_dim2 -> empty .)
    COMMA           reduce using rule 118 (sem_ver_dim2 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 2 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: reduce/reduce conflict in state 32 resolved using rule (sem_add_var -> empty)
WARNING: rejected rule (sem_get_matrix_id -> empty) in state 32

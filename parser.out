Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD_COLS
    ADD_ROWS
    FIND_DETERMINANT
    MULTIPLY_COLS
    MULTIPLY_MATRIX
    MULTIPLY_ROWS
    PRINT_MATRIX
    SWAP_COLS
    SWAP_ROWS
    TRANSPOSE_MATRIX

Grammar

Rule 0     S' -> start
Rule 1     start -> sem_start_program declaration func_declaration
Rule 2     declaration -> var_declaration declaration
Rule 3     declaration -> matrix_declaration declaration
Rule 4     declaration -> empty
Rule 5     var_declaration -> var_type ID sem_add_var SEMICOLON
Rule 6     matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
Rule 7     matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
Rule 8     matrix -> empty
Rule 9     func_declaration -> func_signature func_declaration
Rule 10    func_declaration -> main
Rule 11    func_signature -> FUNCTION func_type func_signature_1 sem_end_func
Rule 12    func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block
Rule 13    param_declaration -> var_type ID sem_add_param
Rule 14    param_declaration -> var_type ID sem_add_param COMMA param_declaration
Rule 15    param_declaration -> empty
Rule 16    var_type -> INT sem_get_type
Rule 17    var_type -> DOUBLE sem_get_type
Rule 18    var_type -> BOOL sem_get_type
Rule 19    var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
Rule 20    var_cte -> CTE_I sem_push_constant_int
Rule 21    var_cte -> CTE_D sem_push_constant_double
Rule 22    var_cte -> cte_b sem_push_constant_bool
Rule 23    var_cte -> ID sem_push_operand matrix
Rule 24    cte_b -> TRUE
Rule 25    cte_b -> FALSE
Rule 26    func_type -> INT sem_get_type
Rule 27    func_type -> DOUBLE sem_get_type
Rule 28    func_type -> BOOL sem_get_type
Rule 29    func_type -> VOID sem_get_type
Rule 30    block -> LEFT_BRACE declaration statements RIGHT_BRACE
Rule 31    statements -> statement statements
Rule 32    statements -> empty
Rule 33    statement -> var_assignment
Rule 34    statement -> matrix_assignment
Rule 35    statement -> condition
Rule 36    statement -> return
Rule 37    statement -> function_call
Rule 38    statement -> while_cycle
Rule 39    statement -> read
Rule 40    statement -> write
Rule 41    var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
Rule 42    matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON
Rule 43    matrix_construct -> LEFT_BRACE rows RIGHT_BRACE
Rule 44    rows -> row
Rule 45    rows -> row COMMA rows
Rule 46    row -> LEFT_BRACKET col RIGHT_BRACKET sem_push_row sem_clear_row
Rule 47    col -> CTE_I sem_push_col col
Rule 48    col -> CTE_B sem_push_col col
Rule 49    col -> COMMA col
Rule 50    col -> empty
Rule 51    return -> RETURN mega_exp sem_return_function SEMICOLON
Rule 52    mega_exp -> hyper_exp mega_exp_1
Rule 53    mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical
Rule 54    mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical
Rule 55    mega_exp_1 -> empty
Rule 56    hyper_exp -> exp hyper_exp_1
Rule 57    hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 58    hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 59    hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational
Rule 60    hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational
Rule 61    hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 62    hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 63    hyper_exp_1 -> empty
Rule 64    exp -> term sem_top_term
Rule 65    exp -> term sem_top_term PLUS sem_push_operator exp
Rule 66    exp -> term sem_top_term MINUS sem_push_operator exp
Rule 67    term -> factor sem_top_factor
Rule 68    term -> factor sem_top_factor MULTIPLY sem_push_operator term
Rule 69    term -> factor sem_top_factor DIVIDE sem_push_operator term
Rule 70    factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
Rule 71    factor -> var_cte
Rule 72    factor -> PLUS sem_push_operator var_cte
Rule 73    factor -> MINUS sem_push_operator var_cte
Rule 74    condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
Rule 75    condition_1 -> ELSE sem_else_condition block
Rule 76    condition_1 -> empty
Rule 77    function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
Rule 78    param_call -> mega_exp sem_check_param
Rule 79    param_call -> mega_exp sem_check_param COMMA param_call
Rule 80    param_call -> empty
Rule 81    while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
Rule 82    read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
Rule 83    write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
Rule 84    main -> MAIN sem_fill_goto_main block sem_fill_eras sem_end_main
Rule 85    empty -> <empty>
Rule 86    sem_get_type -> empty
Rule 87    sem_add_func -> empty
Rule 88    sem_end_func -> empty
Rule 89    sem_add_var -> empty
Rule 90    sem_push_operator -> empty
Rule 91    sem_push_operand -> empty
Rule 92    sem_push_constant_int -> empty
Rule 93    sem_push_constant_double -> empty
Rule 94    sem_push_constant_bool -> empty
Rule 95    sem_top_factor -> empty
Rule 96    sem_top_term -> empty
Rule 97    sem_false_bottom_begin -> empty
Rule 98    sem_false_bottom_end -> empty
Rule 99    sem_assign_value -> empty
Rule 100   sem_read_write -> empty
Rule 101   sem_return_function -> empty
Rule 102   sem_top_logical -> <empty>
Rule 103   sem_top_relational -> <empty>
Rule 104   sem_end_condition -> empty
Rule 105   sem_fill_gotof -> empty
Rule 106   sem_else_condition -> empty
Rule 107   sem_start_while -> empty
Rule 108   sem_end_while -> empty
Rule 109   sem_add_param -> empty
Rule 110   sem_check_function -> empty
Rule 111   sem_create_era -> empty
Rule 112   sem_check_param -> empty
Rule 113   sem_count_params -> empty
Rule 114   sem_gosub -> empty
Rule 115   sem_gosub_assign -> empty
Rule 116   sem_start_program -> empty
Rule 117   sem_fill_goto_main -> empty
Rule 118   sem_end_main -> empty
Rule 119   sem_fill_eras -> empty
Rule 120   sem_get_matrix_id -> empty
Rule 121   sem_get_dim1 -> empty
Rule 122   sem_get_dim2 -> empty
Rule 123   sem_add_matrix -> empty
Rule 124   sem_check_dim1 -> empty
Rule 125   sem_ver_dim1 -> empty
Rule 126   sem_check_dim2 -> empty
Rule 127   sem_ver_dim2 -> empty
Rule 128   sem_assign_matrix -> empty
Rule 129   sem_clear_row -> empty
Rule 130   sem_push_row -> empty
Rule 131   sem_push_col -> empty

Terminals, with rules where they appear

ADD_COLS             : 
ADD_ROWS             : 
AND                  : 53
ASSIGN               : 41 42
BOOL                 : 18 28
COMMA                : 14 45 49 79
CTE_B                : 48
CTE_D                : 21
CTE_I                : 6 6 20 47
DIVIDE               : 69
DOUBLE               : 17 27
ELSE                 : 75
FALSE                : 25
FIND_DETERMINANT     : 
FUNCTION             : 11
GREATER_THAN         : 59
GREATER_THAN_OR_EQUAL_TO : 61
ID                   : 5 6 12 13 14 19 23 41 42 77
IF                   : 74
INT                  : 16 26
IS_EQUAL_TO          : 57
LEFT_BRACE           : 30 43
LEFT_BRACKET         : 6 6 7 7 46
LEFT_PAR             : 12 19 70 74 77 81 82 83
LESS_THAN            : 60
LESS_THAN_OR_EQUAL_TO : 62
MAIN                 : 84
MATRIX               : 6 42
MINUS                : 66 73
MULTIPLY             : 68
MULTIPLY_COLS        : 
MULTIPLY_MATRIX      : 
MULTIPLY_ROWS        : 
NOT_EQUAL_TO         : 58
OR                   : 54
PLUS                 : 65 72
PRINT_MATRIX         : 
READ                 : 82
RETURN               : 51
RIGHT_BRACE          : 30 43
RIGHT_BRACKET        : 6 6 7 7 46
RIGHT_PAR            : 12 19 70 74 77 81 82 83
SEMICOLON            : 5 6 41 42 51 77 82 83
SWAP_COLS            : 
SWAP_ROWS            : 
TRANSPOSE_MATRIX     : 
TRUE                 : 24
VOID                 : 29
WHILE                : 81
WRITE                : 83
error                : 

Nonterminals, with rules where they appear

block                : 12 74 75 81 84
col                  : 46 47 48 49
condition            : 35
condition_1          : 74
cte_b                : 22
declaration          : 1 2 3 30
empty                : 4 8 15 32 50 55 63 76 80 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131
exp                  : 7 7 56 57 58 59 60 61 62 65 66
factor               : 67 68 69
func_declaration     : 1 9
func_signature       : 9
func_signature_1     : 11
func_type            : 11
function_call        : 37
hyper_exp            : 52
hyper_exp_1          : 56
main                 : 10
matrix               : 23 41
matrix_assignment    : 34
matrix_construct     : 42
matrix_declaration   : 3
mega_exp             : 41 51 53 54 70 74 78 79 81 82 83
mega_exp_1           : 52
param_call           : 19 77 79
param_declaration    : 12 14
read                 : 39
return               : 36
row                  : 44 45
rows                 : 43 45
sem_add_func         : 12
sem_add_matrix       : 6
sem_add_param        : 13 14
sem_add_var          : 5
sem_assign_matrix    : 42
sem_assign_value     : 41
sem_check_dim1       : 7
sem_check_dim2       : 7
sem_check_function   : 19 77
sem_check_param      : 78 79
sem_clear_row        : 46
sem_count_params     : 19 77
sem_create_era       : 19 77
sem_else_condition   : 75
sem_end_condition    : 74 81
sem_end_func         : 11
sem_end_main         : 84
sem_end_while        : 81
sem_false_bottom_begin : 19 70
sem_false_bottom_end : 19 70
sem_fill_eras        : 84
sem_fill_goto_main   : 84
sem_fill_gotof       : 74
sem_get_dim1         : 6
sem_get_dim2         : 6
sem_get_matrix_id    : 6
sem_get_type         : 16 17 18 26 27 28 29
sem_gosub            : 77
sem_gosub_assign     : 19
sem_push_col         : 47 48
sem_push_constant_bool : 22
sem_push_constant_double : 21
sem_push_constant_int : 20
sem_push_operand     : 23 41 42
sem_push_operator    : 41 42 53 54 57 58 59 60 61 62 65 66 68 69 72 73 82 83
sem_push_row         : 46
sem_read_write       : 82 83
sem_return_function  : 51
sem_start_program    : 1
sem_start_while      : 81
sem_top_factor       : 67 68 69
sem_top_logical      : 53 54
sem_top_relational   : 57 58 59 60 61 62
sem_top_term         : 64 65 66
sem_ver_dim1         : 7
sem_ver_dim2         : 7
start                : 0
statement            : 31
statements           : 30 31
term                 : 64 65 66 68 69
var_assignment       : 33
var_cte              : 71 72 73
var_declaration      : 2
var_type             : 5 6 13 14
while_cycle          : 38
write                : 40

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . sem_start_program declaration func_declaration
    (116) sem_start_program -> . empty
    (85) empty -> .

    MATRIX          reduce using rule 85 (empty -> .)
    INT             reduce using rule 85 (empty -> .)
    DOUBLE          reduce using rule 85 (empty -> .)
    BOOL            reduce using rule 85 (empty -> .)
    FUNCTION        reduce using rule 85 (empty -> .)
    MAIN            reduce using rule 85 (empty -> .)

    start                          shift and go to state 1
    sem_start_program              shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> sem_start_program . declaration func_declaration
    (2) declaration -> . var_declaration declaration
    (3) declaration -> . matrix_declaration declaration
    (4) declaration -> . empty
    (5) var_declaration -> . var_type ID sem_add_var SEMICOLON
    (6) matrix_declaration -> . MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (85) empty -> .
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type

    MATRIX          shift and go to state 9
    FUNCTION        reduce using rule 85 (empty -> .)
    MAIN            reduce using rule 85 (empty -> .)
    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    BOOL            shift and go to state 12

    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    matrix_declaration             shift and go to state 6
    empty                          shift and go to state 7
    var_type                       shift and go to state 8

state 3

    (116) sem_start_program -> empty .

    MATRIX          reduce using rule 116 (sem_start_program -> empty .)
    INT             reduce using rule 116 (sem_start_program -> empty .)
    DOUBLE          reduce using rule 116 (sem_start_program -> empty .)
    BOOL            reduce using rule 116 (sem_start_program -> empty .)
    FUNCTION        reduce using rule 116 (sem_start_program -> empty .)
    MAIN            reduce using rule 116 (sem_start_program -> empty .)


state 4

    (1) start -> sem_start_program declaration . func_declaration
    (9) func_declaration -> . func_signature func_declaration
    (10) func_declaration -> . main
    (11) func_signature -> . FUNCTION func_type func_signature_1 sem_end_func
    (84) main -> . MAIN sem_fill_goto_main block sem_fill_eras sem_end_main

    FUNCTION        shift and go to state 16
    MAIN            shift and go to state 17

    func_declaration               shift and go to state 13
    func_signature                 shift and go to state 14
    main                           shift and go to state 15

state 5

    (2) declaration -> var_declaration . declaration
    (2) declaration -> . var_declaration declaration
    (3) declaration -> . matrix_declaration declaration
    (4) declaration -> . empty
    (5) var_declaration -> . var_type ID sem_add_var SEMICOLON
    (6) matrix_declaration -> . MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (85) empty -> .
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type

  ! shift/reduce conflict for MATRIX resolved as shift
    MATRIX          shift and go to state 9
    FUNCTION        reduce using rule 85 (empty -> .)
    MAIN            reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    WRITE           reduce using rule 85 (empty -> .)
    RIGHT_BRACE     reduce using rule 85 (empty -> .)
    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    BOOL            shift and go to state 12

  ! MATRIX          [ reduce using rule 85 (empty -> .) ]

    var_declaration                shift and go to state 5
    declaration                    shift and go to state 18
    matrix_declaration             shift and go to state 6
    empty                          shift and go to state 7
    var_type                       shift and go to state 8

state 6

    (3) declaration -> matrix_declaration . declaration
    (2) declaration -> . var_declaration declaration
    (3) declaration -> . matrix_declaration declaration
    (4) declaration -> . empty
    (5) var_declaration -> . var_type ID sem_add_var SEMICOLON
    (6) matrix_declaration -> . MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (85) empty -> .
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type

  ! shift/reduce conflict for MATRIX resolved as shift
    MATRIX          shift and go to state 9
    FUNCTION        reduce using rule 85 (empty -> .)
    MAIN            reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    WRITE           reduce using rule 85 (empty -> .)
    RIGHT_BRACE     reduce using rule 85 (empty -> .)
    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    BOOL            shift and go to state 12

  ! MATRIX          [ reduce using rule 85 (empty -> .) ]

    matrix_declaration             shift and go to state 6
    declaration                    shift and go to state 19
    var_declaration                shift and go to state 5
    empty                          shift and go to state 7
    var_type                       shift and go to state 8

state 7

    (4) declaration -> empty .

    FUNCTION        reduce using rule 4 (declaration -> empty .)
    MAIN            reduce using rule 4 (declaration -> empty .)
    ID              reduce using rule 4 (declaration -> empty .)
    MATRIX          reduce using rule 4 (declaration -> empty .)
    IF              reduce using rule 4 (declaration -> empty .)
    RETURN          reduce using rule 4 (declaration -> empty .)
    WHILE           reduce using rule 4 (declaration -> empty .)
    READ            reduce using rule 4 (declaration -> empty .)
    WRITE           reduce using rule 4 (declaration -> empty .)
    RIGHT_BRACE     reduce using rule 4 (declaration -> empty .)


state 8

    (5) var_declaration -> var_type . ID sem_add_var SEMICOLON

    ID              shift and go to state 20


state 9

    (6) matrix_declaration -> MATRIX . var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type

    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    BOOL            shift and go to state 12

    var_type                       shift and go to state 21

state 10

    (16) var_type -> INT . sem_get_type
    (86) sem_get_type -> . empty
    (85) empty -> .

    ID              reduce using rule 85 (empty -> .)

    sem_get_type                   shift and go to state 22
    empty                          shift and go to state 23

state 11

    (17) var_type -> DOUBLE . sem_get_type
    (86) sem_get_type -> . empty
    (85) empty -> .

    ID              reduce using rule 85 (empty -> .)

    sem_get_type                   shift and go to state 24
    empty                          shift and go to state 23

state 12

    (18) var_type -> BOOL . sem_get_type
    (86) sem_get_type -> . empty
    (85) empty -> .

    ID              reduce using rule 85 (empty -> .)

    sem_get_type                   shift and go to state 25
    empty                          shift and go to state 23

state 13

    (1) start -> sem_start_program declaration func_declaration .

    $end            reduce using rule 1 (start -> sem_start_program declaration func_declaration .)


state 14

    (9) func_declaration -> func_signature . func_declaration
    (9) func_declaration -> . func_signature func_declaration
    (10) func_declaration -> . main
    (11) func_signature -> . FUNCTION func_type func_signature_1 sem_end_func
    (84) main -> . MAIN sem_fill_goto_main block sem_fill_eras sem_end_main

    FUNCTION        shift and go to state 16
    MAIN            shift and go to state 17

    func_signature                 shift and go to state 14
    func_declaration               shift and go to state 26
    main                           shift and go to state 15

state 15

    (10) func_declaration -> main .

    $end            reduce using rule 10 (func_declaration -> main .)


state 16

    (11) func_signature -> FUNCTION . func_type func_signature_1 sem_end_func
    (26) func_type -> . INT sem_get_type
    (27) func_type -> . DOUBLE sem_get_type
    (28) func_type -> . BOOL sem_get_type
    (29) func_type -> . VOID sem_get_type

    INT             shift and go to state 28
    DOUBLE          shift and go to state 29
    BOOL            shift and go to state 30
    VOID            shift and go to state 31

    func_type                      shift and go to state 27

state 17

    (84) main -> MAIN . sem_fill_goto_main block sem_fill_eras sem_end_main
    (117) sem_fill_goto_main -> . empty
    (85) empty -> .

    LEFT_BRACE      reduce using rule 85 (empty -> .)

    sem_fill_goto_main             shift and go to state 32
    empty                          shift and go to state 33

state 18

    (2) declaration -> var_declaration declaration .

    FUNCTION        reduce using rule 2 (declaration -> var_declaration declaration .)
    MAIN            reduce using rule 2 (declaration -> var_declaration declaration .)
    ID              reduce using rule 2 (declaration -> var_declaration declaration .)
    MATRIX          reduce using rule 2 (declaration -> var_declaration declaration .)
    IF              reduce using rule 2 (declaration -> var_declaration declaration .)
    RETURN          reduce using rule 2 (declaration -> var_declaration declaration .)
    WHILE           reduce using rule 2 (declaration -> var_declaration declaration .)
    READ            reduce using rule 2 (declaration -> var_declaration declaration .)
    WRITE           reduce using rule 2 (declaration -> var_declaration declaration .)
    RIGHT_BRACE     reduce using rule 2 (declaration -> var_declaration declaration .)


state 19

    (3) declaration -> matrix_declaration declaration .

    FUNCTION        reduce using rule 3 (declaration -> matrix_declaration declaration .)
    MAIN            reduce using rule 3 (declaration -> matrix_declaration declaration .)
    ID              reduce using rule 3 (declaration -> matrix_declaration declaration .)
    MATRIX          reduce using rule 3 (declaration -> matrix_declaration declaration .)
    IF              reduce using rule 3 (declaration -> matrix_declaration declaration .)
    RETURN          reduce using rule 3 (declaration -> matrix_declaration declaration .)
    WHILE           reduce using rule 3 (declaration -> matrix_declaration declaration .)
    READ            reduce using rule 3 (declaration -> matrix_declaration declaration .)
    WRITE           reduce using rule 3 (declaration -> matrix_declaration declaration .)
    RIGHT_BRACE     reduce using rule 3 (declaration -> matrix_declaration declaration .)


state 20

    (5) var_declaration -> var_type ID . sem_add_var SEMICOLON
    (89) sem_add_var -> . empty
    (85) empty -> .

    SEMICOLON       reduce using rule 85 (empty -> .)

    sem_add_var                    shift and go to state 34
    empty                          shift and go to state 35

state 21

    (6) matrix_declaration -> MATRIX var_type . ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON

    ID              shift and go to state 36


state 22

    (16) var_type -> INT sem_get_type .

    ID              reduce using rule 16 (var_type -> INT sem_get_type .)


state 23

    (86) sem_get_type -> empty .

    ID              reduce using rule 86 (sem_get_type -> empty .)


state 24

    (17) var_type -> DOUBLE sem_get_type .

    ID              reduce using rule 17 (var_type -> DOUBLE sem_get_type .)


state 25

    (18) var_type -> BOOL sem_get_type .

    ID              reduce using rule 18 (var_type -> BOOL sem_get_type .)


state 26

    (9) func_declaration -> func_signature func_declaration .

    $end            reduce using rule 9 (func_declaration -> func_signature func_declaration .)


state 27

    (11) func_signature -> FUNCTION func_type . func_signature_1 sem_end_func
    (12) func_signature_1 -> . ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block

    ID              shift and go to state 38

    func_signature_1               shift and go to state 37

state 28

    (26) func_type -> INT . sem_get_type
    (86) sem_get_type -> . empty
    (85) empty -> .

    ID              reduce using rule 85 (empty -> .)

    sem_get_type                   shift and go to state 39
    empty                          shift and go to state 23

state 29

    (27) func_type -> DOUBLE . sem_get_type
    (86) sem_get_type -> . empty
    (85) empty -> .

    ID              reduce using rule 85 (empty -> .)

    sem_get_type                   shift and go to state 40
    empty                          shift and go to state 23

state 30

    (28) func_type -> BOOL . sem_get_type
    (86) sem_get_type -> . empty
    (85) empty -> .

    ID              reduce using rule 85 (empty -> .)

    sem_get_type                   shift and go to state 41
    empty                          shift and go to state 23

state 31

    (29) func_type -> VOID . sem_get_type
    (86) sem_get_type -> . empty
    (85) empty -> .

    ID              reduce using rule 85 (empty -> .)

    sem_get_type                   shift and go to state 42
    empty                          shift and go to state 23

state 32

    (84) main -> MAIN sem_fill_goto_main . block sem_fill_eras sem_end_main
    (30) block -> . LEFT_BRACE declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 44

    block                          shift and go to state 43

state 33

    (117) sem_fill_goto_main -> empty .

    LEFT_BRACE      reduce using rule 117 (sem_fill_goto_main -> empty .)


state 34

    (5) var_declaration -> var_type ID sem_add_var . SEMICOLON

    SEMICOLON       shift and go to state 45


state 35

    (89) sem_add_var -> empty .

    SEMICOLON       reduce using rule 89 (sem_add_var -> empty .)


state 36

    (6) matrix_declaration -> MATRIX var_type ID . sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (120) sem_get_matrix_id -> . empty
    (85) empty -> .

    LEFT_BRACKET    reduce using rule 85 (empty -> .)

    sem_get_matrix_id              shift and go to state 46
    empty                          shift and go to state 47

state 37

    (11) func_signature -> FUNCTION func_type func_signature_1 . sem_end_func
    (88) sem_end_func -> . empty
    (85) empty -> .

    FUNCTION        reduce using rule 85 (empty -> .)
    MAIN            reduce using rule 85 (empty -> .)

    sem_end_func                   shift and go to state 48
    empty                          shift and go to state 49

state 38

    (12) func_signature_1 -> ID . sem_add_func LEFT_PAR param_declaration RIGHT_PAR block
    (87) sem_add_func -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)

    sem_add_func                   shift and go to state 50
    empty                          shift and go to state 51

state 39

    (26) func_type -> INT sem_get_type .

    ID              reduce using rule 26 (func_type -> INT sem_get_type .)


state 40

    (27) func_type -> DOUBLE sem_get_type .

    ID              reduce using rule 27 (func_type -> DOUBLE sem_get_type .)


state 41

    (28) func_type -> BOOL sem_get_type .

    ID              reduce using rule 28 (func_type -> BOOL sem_get_type .)


state 42

    (29) func_type -> VOID sem_get_type .

    ID              reduce using rule 29 (func_type -> VOID sem_get_type .)


state 43

    (84) main -> MAIN sem_fill_goto_main block . sem_fill_eras sem_end_main
    (119) sem_fill_eras -> . empty
    (85) empty -> .

    $end            reduce using rule 85 (empty -> .)

    sem_fill_eras                  shift and go to state 52
    empty                          shift and go to state 53

state 44

    (30) block -> LEFT_BRACE . declaration statements RIGHT_BRACE
    (2) declaration -> . var_declaration declaration
    (3) declaration -> . matrix_declaration declaration
    (4) declaration -> . empty
    (5) var_declaration -> . var_type ID sem_add_var SEMICOLON
    (6) matrix_declaration -> . MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (85) empty -> .
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type

  ! shift/reduce conflict for MATRIX resolved as shift
    MATRIX          shift and go to state 9
    ID              reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    WRITE           reduce using rule 85 (empty -> .)
    RIGHT_BRACE     reduce using rule 85 (empty -> .)
    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    BOOL            shift and go to state 12

  ! MATRIX          [ reduce using rule 85 (empty -> .) ]

    declaration                    shift and go to state 54
    var_declaration                shift and go to state 5
    matrix_declaration             shift and go to state 6
    empty                          shift and go to state 7
    var_type                       shift and go to state 8

state 45

    (5) var_declaration -> var_type ID sem_add_var SEMICOLON .

    MATRIX          reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    INT             reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    DOUBLE          reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    BOOL            reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    FUNCTION        reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    MAIN            reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    ID              reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    IF              reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    RETURN          reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    WHILE           reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    READ            reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    WRITE           reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    RIGHT_BRACE     reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)


state 46

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id . LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON

    LEFT_BRACKET    shift and go to state 55


state 47

    (120) sem_get_matrix_id -> empty .

    LEFT_BRACKET    reduce using rule 120 (sem_get_matrix_id -> empty .)


state 48

    (11) func_signature -> FUNCTION func_type func_signature_1 sem_end_func .

    FUNCTION        reduce using rule 11 (func_signature -> FUNCTION func_type func_signature_1 sem_end_func .)
    MAIN            reduce using rule 11 (func_signature -> FUNCTION func_type func_signature_1 sem_end_func .)


state 49

    (88) sem_end_func -> empty .

    FUNCTION        reduce using rule 88 (sem_end_func -> empty .)
    MAIN            reduce using rule 88 (sem_end_func -> empty .)


state 50

    (12) func_signature_1 -> ID sem_add_func . LEFT_PAR param_declaration RIGHT_PAR block

    LEFT_PAR        shift and go to state 56


state 51

    (87) sem_add_func -> empty .

    LEFT_PAR        reduce using rule 87 (sem_add_func -> empty .)


state 52

    (84) main -> MAIN sem_fill_goto_main block sem_fill_eras . sem_end_main
    (118) sem_end_main -> . empty
    (85) empty -> .

    $end            reduce using rule 85 (empty -> .)

    sem_end_main                   shift and go to state 57
    empty                          shift and go to state 58

state 53

    (119) sem_fill_eras -> empty .

    $end            reduce using rule 119 (sem_fill_eras -> empty .)


state 54

    (30) block -> LEFT_BRACE declaration . statements RIGHT_BRACE
    (31) statements -> . statement statements
    (32) statements -> . empty
    (33) statement -> . var_assignment
    (34) statement -> . matrix_assignment
    (35) statement -> . condition
    (36) statement -> . return
    (37) statement -> . function_call
    (38) statement -> . while_cycle
    (39) statement -> . read
    (40) statement -> . write
    (85) empty -> .
    (41) var_assignment -> . ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (42) matrix_assignment -> . MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON
    (74) condition -> . IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (51) return -> . RETURN mega_exp sem_return_function SEMICOLON
    (77) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (81) while_cycle -> . WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (82) read -> . READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (83) write -> . WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_BRACE     reduce using rule 85 (empty -> .)
    ID              shift and go to state 70
    MATRIX          shift and go to state 71
    IF              shift and go to state 72
    RETURN          shift and go to state 73
    WHILE           shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76

    statements                     shift and go to state 59
    statement                      shift and go to state 60
    empty                          shift and go to state 61
    var_assignment                 shift and go to state 62
    matrix_assignment              shift and go to state 63
    condition                      shift and go to state 64
    return                         shift and go to state 65
    function_call                  shift and go to state 66
    while_cycle                    shift and go to state 67
    read                           shift and go to state 68
    write                          shift and go to state 69

state 55

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET . CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON

    CTE_I           shift and go to state 77


state 56

    (12) func_signature_1 -> ID sem_add_func LEFT_PAR . param_declaration RIGHT_PAR block
    (13) param_declaration -> . var_type ID sem_add_param
    (14) param_declaration -> . var_type ID sem_add_param COMMA param_declaration
    (15) param_declaration -> . empty
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type
    (85) empty -> .

    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    BOOL            shift and go to state 12
    RIGHT_PAR       reduce using rule 85 (empty -> .)

    param_declaration              shift and go to state 78
    var_type                       shift and go to state 79
    empty                          shift and go to state 80

state 57

    (84) main -> MAIN sem_fill_goto_main block sem_fill_eras sem_end_main .

    $end            reduce using rule 84 (main -> MAIN sem_fill_goto_main block sem_fill_eras sem_end_main .)


state 58

    (118) sem_end_main -> empty .

    $end            reduce using rule 118 (sem_end_main -> empty .)


state 59

    (30) block -> LEFT_BRACE declaration statements . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 81


state 60

    (31) statements -> statement . statements
    (31) statements -> . statement statements
    (32) statements -> . empty
    (33) statement -> . var_assignment
    (34) statement -> . matrix_assignment
    (35) statement -> . condition
    (36) statement -> . return
    (37) statement -> . function_call
    (38) statement -> . while_cycle
    (39) statement -> . read
    (40) statement -> . write
    (85) empty -> .
    (41) var_assignment -> . ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (42) matrix_assignment -> . MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON
    (74) condition -> . IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (51) return -> . RETURN mega_exp sem_return_function SEMICOLON
    (77) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (81) while_cycle -> . WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (82) read -> . READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (83) write -> . WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_BRACE     reduce using rule 85 (empty -> .)
    ID              shift and go to state 70
    MATRIX          shift and go to state 71
    IF              shift and go to state 72
    RETURN          shift and go to state 73
    WHILE           shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76

    statement                      shift and go to state 60
    statements                     shift and go to state 82
    empty                          shift and go to state 61
    var_assignment                 shift and go to state 62
    matrix_assignment              shift and go to state 63
    condition                      shift and go to state 64
    return                         shift and go to state 65
    function_call                  shift and go to state 66
    while_cycle                    shift and go to state 67
    read                           shift and go to state 68
    write                          shift and go to state 69

state 61

    (32) statements -> empty .

    RIGHT_BRACE     reduce using rule 32 (statements -> empty .)


state 62

    (33) statement -> var_assignment .

    ID              reduce using rule 33 (statement -> var_assignment .)
    MATRIX          reduce using rule 33 (statement -> var_assignment .)
    IF              reduce using rule 33 (statement -> var_assignment .)
    RETURN          reduce using rule 33 (statement -> var_assignment .)
    WHILE           reduce using rule 33 (statement -> var_assignment .)
    READ            reduce using rule 33 (statement -> var_assignment .)
    WRITE           reduce using rule 33 (statement -> var_assignment .)
    RIGHT_BRACE     reduce using rule 33 (statement -> var_assignment .)


state 63

    (34) statement -> matrix_assignment .

    ID              reduce using rule 34 (statement -> matrix_assignment .)
    MATRIX          reduce using rule 34 (statement -> matrix_assignment .)
    IF              reduce using rule 34 (statement -> matrix_assignment .)
    RETURN          reduce using rule 34 (statement -> matrix_assignment .)
    WHILE           reduce using rule 34 (statement -> matrix_assignment .)
    READ            reduce using rule 34 (statement -> matrix_assignment .)
    WRITE           reduce using rule 34 (statement -> matrix_assignment .)
    RIGHT_BRACE     reduce using rule 34 (statement -> matrix_assignment .)


state 64

    (35) statement -> condition .

    ID              reduce using rule 35 (statement -> condition .)
    MATRIX          reduce using rule 35 (statement -> condition .)
    IF              reduce using rule 35 (statement -> condition .)
    RETURN          reduce using rule 35 (statement -> condition .)
    WHILE           reduce using rule 35 (statement -> condition .)
    READ            reduce using rule 35 (statement -> condition .)
    WRITE           reduce using rule 35 (statement -> condition .)
    RIGHT_BRACE     reduce using rule 35 (statement -> condition .)


state 65

    (36) statement -> return .

    ID              reduce using rule 36 (statement -> return .)
    MATRIX          reduce using rule 36 (statement -> return .)
    IF              reduce using rule 36 (statement -> return .)
    RETURN          reduce using rule 36 (statement -> return .)
    WHILE           reduce using rule 36 (statement -> return .)
    READ            reduce using rule 36 (statement -> return .)
    WRITE           reduce using rule 36 (statement -> return .)
    RIGHT_BRACE     reduce using rule 36 (statement -> return .)


state 66

    (37) statement -> function_call .

    ID              reduce using rule 37 (statement -> function_call .)
    MATRIX          reduce using rule 37 (statement -> function_call .)
    IF              reduce using rule 37 (statement -> function_call .)
    RETURN          reduce using rule 37 (statement -> function_call .)
    WHILE           reduce using rule 37 (statement -> function_call .)
    READ            reduce using rule 37 (statement -> function_call .)
    WRITE           reduce using rule 37 (statement -> function_call .)
    RIGHT_BRACE     reduce using rule 37 (statement -> function_call .)


state 67

    (38) statement -> while_cycle .

    ID              reduce using rule 38 (statement -> while_cycle .)
    MATRIX          reduce using rule 38 (statement -> while_cycle .)
    IF              reduce using rule 38 (statement -> while_cycle .)
    RETURN          reduce using rule 38 (statement -> while_cycle .)
    WHILE           reduce using rule 38 (statement -> while_cycle .)
    READ            reduce using rule 38 (statement -> while_cycle .)
    WRITE           reduce using rule 38 (statement -> while_cycle .)
    RIGHT_BRACE     reduce using rule 38 (statement -> while_cycle .)


state 68

    (39) statement -> read .

    ID              reduce using rule 39 (statement -> read .)
    MATRIX          reduce using rule 39 (statement -> read .)
    IF              reduce using rule 39 (statement -> read .)
    RETURN          reduce using rule 39 (statement -> read .)
    WHILE           reduce using rule 39 (statement -> read .)
    READ            reduce using rule 39 (statement -> read .)
    WRITE           reduce using rule 39 (statement -> read .)
    RIGHT_BRACE     reduce using rule 39 (statement -> read .)


state 69

    (40) statement -> write .

    ID              reduce using rule 40 (statement -> write .)
    MATRIX          reduce using rule 40 (statement -> write .)
    IF              reduce using rule 40 (statement -> write .)
    RETURN          reduce using rule 40 (statement -> write .)
    WHILE           reduce using rule 40 (statement -> write .)
    READ            reduce using rule 40 (statement -> write .)
    WRITE           reduce using rule 40 (statement -> write .)
    RIGHT_BRACE     reduce using rule 40 (statement -> write .)


state 70

    (41) var_assignment -> ID . sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (77) function_call -> ID . sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (91) sem_push_operand -> . empty
    (110) sem_check_function -> . empty
    (85) empty -> .

    LEFT_BRACKET    reduce using rule 85 (empty -> .)
    ASSIGN          reduce using rule 85 (empty -> .)
    LEFT_PAR        reduce using rule 85 (empty -> .)

    sem_push_operand               shift and go to state 83
    sem_check_function             shift and go to state 84
    empty                          shift and go to state 85

state 71

    (42) matrix_assignment -> MATRIX . ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON

    ID              shift and go to state 86


state 72

    (74) condition -> IF . LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof

    LEFT_PAR        shift and go to state 87


state 73

    (51) return -> RETURN . mega_exp sem_return_function SEMICOLON
    (52) mega_exp -> . hyper_exp mega_exp_1
    (56) hyper_exp -> . exp hyper_exp_1
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    mega_exp                       shift and go to state 88
    hyper_exp                      shift and go to state 89
    exp                            shift and go to state 90
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 74

    (81) while_cycle -> WHILE . sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (107) sem_start_while -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)

    sem_start_while                shift and go to state 103
    empty                          shift and go to state 104

state 75

    (82) read -> READ . sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 105
    empty                          shift and go to state 106

state 76

    (83) write -> WRITE . sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 107
    empty                          shift and go to state 106

state 77

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I . sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (121) sem_get_dim1 -> . empty
    (85) empty -> .

    RIGHT_BRACKET   reduce using rule 85 (empty -> .)

    sem_get_dim1                   shift and go to state 108
    empty                          shift and go to state 109

state 78

    (12) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration . RIGHT_PAR block

    RIGHT_PAR       shift and go to state 110


state 79

    (13) param_declaration -> var_type . ID sem_add_param
    (14) param_declaration -> var_type . ID sem_add_param COMMA param_declaration

    ID              shift and go to state 111


state 80

    (15) param_declaration -> empty .

    RIGHT_PAR       reduce using rule 15 (param_declaration -> empty .)


state 81

    (30) block -> LEFT_BRACE declaration statements RIGHT_BRACE .

    $end            reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    FUNCTION        reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    MAIN            reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    ELSE            reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    ID              reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    MATRIX          reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    IF              reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    RETURN          reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    WHILE           reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    READ            reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    WRITE           reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)


state 82

    (31) statements -> statement statements .

    RIGHT_BRACE     reduce using rule 31 (statements -> statement statements .)


state 83

    (41) var_assignment -> ID sem_push_operand . matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (7) matrix -> . LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (8) matrix -> . empty
    (85) empty -> .

    LEFT_BRACKET    shift and go to state 113
    ASSIGN          reduce using rule 85 (empty -> .)

    matrix                         shift and go to state 112
    empty                          shift and go to state 114

state 84

    (77) function_call -> ID sem_check_function . LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub

    LEFT_PAR        shift and go to state 115


state 85

    (91) sem_push_operand -> empty .
    (110) sem_check_function -> empty .

    LEFT_BRACKET    reduce using rule 91 (sem_push_operand -> empty .)
    ASSIGN          reduce using rule 91 (sem_push_operand -> empty .)
    LEFT_PAR        reduce using rule 110 (sem_check_function -> empty .)


state 86

    (42) matrix_assignment -> MATRIX ID . sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON
    (91) sem_push_operand -> . empty
    (85) empty -> .

    ASSIGN          reduce using rule 85 (empty -> .)

    sem_push_operand               shift and go to state 116
    empty                          shift and go to state 117

state 87

    (74) condition -> IF LEFT_PAR . mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (52) mega_exp -> . hyper_exp mega_exp_1
    (56) hyper_exp -> . exp hyper_exp_1
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    mega_exp                       shift and go to state 118
    hyper_exp                      shift and go to state 89
    exp                            shift and go to state 90
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 88

    (51) return -> RETURN mega_exp . sem_return_function SEMICOLON
    (101) sem_return_function -> . empty
    (85) empty -> .

    SEMICOLON       reduce using rule 85 (empty -> .)

    sem_return_function            shift and go to state 119
    empty                          shift and go to state 120

state 89

    (52) mega_exp -> hyper_exp . mega_exp_1
    (53) mega_exp_1 -> . AND sem_push_operator mega_exp sem_top_logical
    (54) mega_exp_1 -> . OR sem_push_operator mega_exp sem_top_logical
    (55) mega_exp_1 -> . empty
    (85) empty -> .

    AND             shift and go to state 122
    OR              shift and go to state 123
    SEMICOLON       reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    mega_exp_1                     shift and go to state 121
    empty                          shift and go to state 124

state 90

    (56) hyper_exp -> exp . hyper_exp_1
    (57) hyper_exp_1 -> . IS_EQUAL_TO sem_push_operator exp sem_top_relational
    (58) hyper_exp_1 -> . NOT_EQUAL_TO sem_push_operator exp sem_top_relational
    (59) hyper_exp_1 -> . GREATER_THAN sem_push_operator exp sem_top_relational
    (60) hyper_exp_1 -> . LESS_THAN sem_push_operator exp sem_top_relational
    (61) hyper_exp_1 -> . GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
    (62) hyper_exp_1 -> . LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
    (63) hyper_exp_1 -> . empty
    (85) empty -> .

    IS_EQUAL_TO     shift and go to state 126
    NOT_EQUAL_TO    shift and go to state 127
    GREATER_THAN    shift and go to state 128
    LESS_THAN       shift and go to state 129
    GREATER_THAN_OR_EQUAL_TO shift and go to state 130
    LESS_THAN_OR_EQUAL_TO shift and go to state 131
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    hyper_exp_1                    shift and go to state 125
    empty                          shift and go to state 132

state 91

    (64) exp -> term . sem_top_term
    (65) exp -> term . sem_top_term PLUS sem_push_operator exp
    (66) exp -> term . sem_top_term MINUS sem_push_operator exp
    (96) sem_top_term -> . empty
    (85) empty -> .

    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    IS_EQUAL_TO     reduce using rule 85 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 85 (empty -> .)
    GREATER_THAN    reduce using rule 85 (empty -> .)
    LESS_THAN       reduce using rule 85 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    sem_top_term                   shift and go to state 133
    empty                          shift and go to state 134

state 92

    (72) factor -> PLUS . sem_push_operator var_cte
    (90) sem_push_operator -> . empty
    (85) empty -> .

    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 135
    empty                          shift and go to state 106

state 93

    (73) factor -> MINUS . sem_push_operator var_cte
    (90) sem_push_operator -> . empty
    (85) empty -> .

    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 136
    empty                          shift and go to state 106

state 94

    (67) term -> factor . sem_top_factor
    (68) term -> factor . sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> factor . sem_top_factor DIVIDE sem_push_operator term
    (95) sem_top_factor -> . empty
    (85) empty -> .

    MULTIPLY        reduce using rule 85 (empty -> .)
    DIVIDE          reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    IS_EQUAL_TO     reduce using rule 85 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 85 (empty -> .)
    GREATER_THAN    reduce using rule 85 (empty -> .)
    LESS_THAN       reduce using rule 85 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    sem_top_factor                 shift and go to state 137
    empty                          shift and go to state 138

state 95

    (70) factor -> LEFT_PAR . sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (97) sem_false_bottom_begin -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_false_bottom_begin         shift and go to state 139
    empty                          shift and go to state 140

state 96

    (71) factor -> var_cte .

    MULTIPLY        reduce using rule 71 (factor -> var_cte .)
    DIVIDE          reduce using rule 71 (factor -> var_cte .)
    PLUS            reduce using rule 71 (factor -> var_cte .)
    MINUS           reduce using rule 71 (factor -> var_cte .)
    IS_EQUAL_TO     reduce using rule 71 (factor -> var_cte .)
    NOT_EQUAL_TO    reduce using rule 71 (factor -> var_cte .)
    GREATER_THAN    reduce using rule 71 (factor -> var_cte .)
    LESS_THAN       reduce using rule 71 (factor -> var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 71 (factor -> var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 71 (factor -> var_cte .)
    AND             reduce using rule 71 (factor -> var_cte .)
    OR              reduce using rule 71 (factor -> var_cte .)
    SEMICOLON       reduce using rule 71 (factor -> var_cte .)
    RIGHT_PAR       reduce using rule 71 (factor -> var_cte .)
    RIGHT_BRACKET   reduce using rule 71 (factor -> var_cte .)
    COMMA           reduce using rule 71 (factor -> var_cte .)


state 97

    (19) var_cte -> ID . sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (23) var_cte -> ID . sem_push_operand matrix
    (110) sem_check_function -> . empty
    (91) sem_push_operand -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    LEFT_BRACKET    reduce using rule 85 (empty -> .)
    MULTIPLY        reduce using rule 85 (empty -> .)
    DIVIDE          reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    IS_EQUAL_TO     reduce using rule 85 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 85 (empty -> .)
    GREATER_THAN    reduce using rule 85 (empty -> .)
    LESS_THAN       reduce using rule 85 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    sem_check_function             shift and go to state 141
    sem_push_operand               shift and go to state 142
    empty                          shift and go to state 143

state 98

    (20) var_cte -> CTE_I . sem_push_constant_int
    (92) sem_push_constant_int -> . empty
    (85) empty -> .

    MULTIPLY        reduce using rule 85 (empty -> .)
    DIVIDE          reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    IS_EQUAL_TO     reduce using rule 85 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 85 (empty -> .)
    GREATER_THAN    reduce using rule 85 (empty -> .)
    LESS_THAN       reduce using rule 85 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    sem_push_constant_int          shift and go to state 144
    empty                          shift and go to state 145

state 99

    (21) var_cte -> CTE_D . sem_push_constant_double
    (93) sem_push_constant_double -> . empty
    (85) empty -> .

    MULTIPLY        reduce using rule 85 (empty -> .)
    DIVIDE          reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    IS_EQUAL_TO     reduce using rule 85 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 85 (empty -> .)
    GREATER_THAN    reduce using rule 85 (empty -> .)
    LESS_THAN       reduce using rule 85 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    sem_push_constant_double       shift and go to state 146
    empty                          shift and go to state 147

state 100

    (22) var_cte -> cte_b . sem_push_constant_bool
    (94) sem_push_constant_bool -> . empty
    (85) empty -> .

    MULTIPLY        reduce using rule 85 (empty -> .)
    DIVIDE          reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    IS_EQUAL_TO     reduce using rule 85 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 85 (empty -> .)
    GREATER_THAN    reduce using rule 85 (empty -> .)
    LESS_THAN       reduce using rule 85 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    sem_push_constant_bool         shift and go to state 148
    empty                          shift and go to state 149

state 101

    (24) cte_b -> TRUE .

    MULTIPLY        reduce using rule 24 (cte_b -> TRUE .)
    DIVIDE          reduce using rule 24 (cte_b -> TRUE .)
    PLUS            reduce using rule 24 (cte_b -> TRUE .)
    MINUS           reduce using rule 24 (cte_b -> TRUE .)
    IS_EQUAL_TO     reduce using rule 24 (cte_b -> TRUE .)
    NOT_EQUAL_TO    reduce using rule 24 (cte_b -> TRUE .)
    GREATER_THAN    reduce using rule 24 (cte_b -> TRUE .)
    LESS_THAN       reduce using rule 24 (cte_b -> TRUE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 24 (cte_b -> TRUE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 24 (cte_b -> TRUE .)
    AND             reduce using rule 24 (cte_b -> TRUE .)
    OR              reduce using rule 24 (cte_b -> TRUE .)
    SEMICOLON       reduce using rule 24 (cte_b -> TRUE .)
    RIGHT_PAR       reduce using rule 24 (cte_b -> TRUE .)
    RIGHT_BRACKET   reduce using rule 24 (cte_b -> TRUE .)
    COMMA           reduce using rule 24 (cte_b -> TRUE .)


state 102

    (25) cte_b -> FALSE .

    MULTIPLY        reduce using rule 25 (cte_b -> FALSE .)
    DIVIDE          reduce using rule 25 (cte_b -> FALSE .)
    PLUS            reduce using rule 25 (cte_b -> FALSE .)
    MINUS           reduce using rule 25 (cte_b -> FALSE .)
    IS_EQUAL_TO     reduce using rule 25 (cte_b -> FALSE .)
    NOT_EQUAL_TO    reduce using rule 25 (cte_b -> FALSE .)
    GREATER_THAN    reduce using rule 25 (cte_b -> FALSE .)
    LESS_THAN       reduce using rule 25 (cte_b -> FALSE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 25 (cte_b -> FALSE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 25 (cte_b -> FALSE .)
    AND             reduce using rule 25 (cte_b -> FALSE .)
    OR              reduce using rule 25 (cte_b -> FALSE .)
    SEMICOLON       reduce using rule 25 (cte_b -> FALSE .)
    RIGHT_PAR       reduce using rule 25 (cte_b -> FALSE .)
    RIGHT_BRACKET   reduce using rule 25 (cte_b -> FALSE .)
    COMMA           reduce using rule 25 (cte_b -> FALSE .)


state 103

    (81) while_cycle -> WHILE sem_start_while . LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while

    LEFT_PAR        shift and go to state 150


state 104

    (107) sem_start_while -> empty .

    LEFT_PAR        reduce using rule 107 (sem_start_while -> empty .)


state 105

    (82) read -> READ sem_push_operator . LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    LEFT_PAR        shift and go to state 151


state 106

    (90) sem_push_operator -> empty .

    LEFT_PAR        reduce using rule 90 (sem_push_operator -> empty .)
    ID              reduce using rule 90 (sem_push_operator -> empty .)
    CTE_I           reduce using rule 90 (sem_push_operator -> empty .)
    CTE_D           reduce using rule 90 (sem_push_operator -> empty .)
    TRUE            reduce using rule 90 (sem_push_operator -> empty .)
    FALSE           reduce using rule 90 (sem_push_operator -> empty .)
    PLUS            reduce using rule 90 (sem_push_operator -> empty .)
    MINUS           reduce using rule 90 (sem_push_operator -> empty .)
    LEFT_BRACE      reduce using rule 90 (sem_push_operator -> empty .)


state 107

    (83) write -> WRITE sem_push_operator . LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    LEFT_PAR        shift and go to state 152


state 108

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 . RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON

    RIGHT_BRACKET   shift and go to state 153


state 109

    (121) sem_get_dim1 -> empty .

    RIGHT_BRACKET   reduce using rule 121 (sem_get_dim1 -> empty .)


state 110

    (12) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR . block
    (30) block -> . LEFT_BRACE declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 44

    block                          shift and go to state 154

state 111

    (13) param_declaration -> var_type ID . sem_add_param
    (14) param_declaration -> var_type ID . sem_add_param COMMA param_declaration
    (109) sem_add_param -> . empty
    (85) empty -> .

    COMMA           reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)

    sem_add_param                  shift and go to state 155
    empty                          shift and go to state 156

state 112

    (41) var_assignment -> ID sem_push_operand matrix . ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON

    ASSIGN          shift and go to state 157


state 113

    (7) matrix -> LEFT_BRACKET . sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (124) sem_check_dim1 -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_check_dim1                 shift and go to state 158
    empty                          shift and go to state 159

state 114

    (8) matrix -> empty .

    ASSIGN          reduce using rule 8 (matrix -> empty .)
    MULTIPLY        reduce using rule 8 (matrix -> empty .)
    DIVIDE          reduce using rule 8 (matrix -> empty .)
    PLUS            reduce using rule 8 (matrix -> empty .)
    MINUS           reduce using rule 8 (matrix -> empty .)
    IS_EQUAL_TO     reduce using rule 8 (matrix -> empty .)
    NOT_EQUAL_TO    reduce using rule 8 (matrix -> empty .)
    GREATER_THAN    reduce using rule 8 (matrix -> empty .)
    LESS_THAN       reduce using rule 8 (matrix -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 8 (matrix -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 8 (matrix -> empty .)
    AND             reduce using rule 8 (matrix -> empty .)
    OR              reduce using rule 8 (matrix -> empty .)
    SEMICOLON       reduce using rule 8 (matrix -> empty .)
    RIGHT_PAR       reduce using rule 8 (matrix -> empty .)
    RIGHT_BRACKET   reduce using rule 8 (matrix -> empty .)
    COMMA           reduce using rule 8 (matrix -> empty .)


state 115

    (77) function_call -> ID sem_check_function LEFT_PAR . sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (111) sem_create_era -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)

    sem_create_era                 shift and go to state 160
    empty                          shift and go to state 161

state 116

    (42) matrix_assignment -> MATRIX ID sem_push_operand . ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON

    ASSIGN          shift and go to state 162


state 117

    (91) sem_push_operand -> empty .

    ASSIGN          reduce using rule 91 (sem_push_operand -> empty .)


state 118

    (74) condition -> IF LEFT_PAR mega_exp . RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof

    RIGHT_PAR       shift and go to state 163


state 119

    (51) return -> RETURN mega_exp sem_return_function . SEMICOLON

    SEMICOLON       shift and go to state 164


state 120

    (101) sem_return_function -> empty .

    SEMICOLON       reduce using rule 101 (sem_return_function -> empty .)


state 121

    (52) mega_exp -> hyper_exp mega_exp_1 .

    SEMICOLON       reduce using rule 52 (mega_exp -> hyper_exp mega_exp_1 .)
    RIGHT_PAR       reduce using rule 52 (mega_exp -> hyper_exp mega_exp_1 .)
    COMMA           reduce using rule 52 (mega_exp -> hyper_exp mega_exp_1 .)


state 122

    (53) mega_exp_1 -> AND . sem_push_operator mega_exp sem_top_logical
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 165
    empty                          shift and go to state 106

state 123

    (54) mega_exp_1 -> OR . sem_push_operator mega_exp sem_top_logical
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 166
    empty                          shift and go to state 106

state 124

    (55) mega_exp_1 -> empty .

    SEMICOLON       reduce using rule 55 (mega_exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 55 (mega_exp_1 -> empty .)
    COMMA           reduce using rule 55 (mega_exp_1 -> empty .)


state 125

    (56) hyper_exp -> exp hyper_exp_1 .

    AND             reduce using rule 56 (hyper_exp -> exp hyper_exp_1 .)
    OR              reduce using rule 56 (hyper_exp -> exp hyper_exp_1 .)
    SEMICOLON       reduce using rule 56 (hyper_exp -> exp hyper_exp_1 .)
    RIGHT_PAR       reduce using rule 56 (hyper_exp -> exp hyper_exp_1 .)
    COMMA           reduce using rule 56 (hyper_exp -> exp hyper_exp_1 .)


state 126

    (57) hyper_exp_1 -> IS_EQUAL_TO . sem_push_operator exp sem_top_relational
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 167
    empty                          shift and go to state 106

state 127

    (58) hyper_exp_1 -> NOT_EQUAL_TO . sem_push_operator exp sem_top_relational
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 168
    empty                          shift and go to state 106

state 128

    (59) hyper_exp_1 -> GREATER_THAN . sem_push_operator exp sem_top_relational
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 169
    empty                          shift and go to state 106

state 129

    (60) hyper_exp_1 -> LESS_THAN . sem_push_operator exp sem_top_relational
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 170
    empty                          shift and go to state 106

state 130

    (61) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO . sem_push_operator exp sem_top_relational
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 171
    empty                          shift and go to state 106

state 131

    (62) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO . sem_push_operator exp sem_top_relational
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 172
    empty                          shift and go to state 106

state 132

    (63) hyper_exp_1 -> empty .

    AND             reduce using rule 63 (hyper_exp_1 -> empty .)
    OR              reduce using rule 63 (hyper_exp_1 -> empty .)
    SEMICOLON       reduce using rule 63 (hyper_exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 63 (hyper_exp_1 -> empty .)
    COMMA           reduce using rule 63 (hyper_exp_1 -> empty .)


state 133

    (64) exp -> term sem_top_term .
    (65) exp -> term sem_top_term . PLUS sem_push_operator exp
    (66) exp -> term sem_top_term . MINUS sem_push_operator exp

    IS_EQUAL_TO     reduce using rule 64 (exp -> term sem_top_term .)
    NOT_EQUAL_TO    reduce using rule 64 (exp -> term sem_top_term .)
    GREATER_THAN    reduce using rule 64 (exp -> term sem_top_term .)
    LESS_THAN       reduce using rule 64 (exp -> term sem_top_term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 64 (exp -> term sem_top_term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 64 (exp -> term sem_top_term .)
    AND             reduce using rule 64 (exp -> term sem_top_term .)
    OR              reduce using rule 64 (exp -> term sem_top_term .)
    SEMICOLON       reduce using rule 64 (exp -> term sem_top_term .)
    RIGHT_PAR       reduce using rule 64 (exp -> term sem_top_term .)
    RIGHT_BRACKET   reduce using rule 64 (exp -> term sem_top_term .)
    COMMA           reduce using rule 64 (exp -> term sem_top_term .)
    PLUS            shift and go to state 173
    MINUS           shift and go to state 174


state 134

    (96) sem_top_term -> empty .

    PLUS            reduce using rule 96 (sem_top_term -> empty .)
    MINUS           reduce using rule 96 (sem_top_term -> empty .)
    IS_EQUAL_TO     reduce using rule 96 (sem_top_term -> empty .)
    NOT_EQUAL_TO    reduce using rule 96 (sem_top_term -> empty .)
    GREATER_THAN    reduce using rule 96 (sem_top_term -> empty .)
    LESS_THAN       reduce using rule 96 (sem_top_term -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 96 (sem_top_term -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 96 (sem_top_term -> empty .)
    AND             reduce using rule 96 (sem_top_term -> empty .)
    OR              reduce using rule 96 (sem_top_term -> empty .)
    SEMICOLON       reduce using rule 96 (sem_top_term -> empty .)
    RIGHT_PAR       reduce using rule 96 (sem_top_term -> empty .)
    RIGHT_BRACKET   reduce using rule 96 (sem_top_term -> empty .)
    COMMA           reduce using rule 96 (sem_top_term -> empty .)


state 135

    (72) factor -> PLUS sem_push_operator . var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    var_cte                        shift and go to state 175
    cte_b                          shift and go to state 100

state 136

    (73) factor -> MINUS sem_push_operator . var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    var_cte                        shift and go to state 176
    cte_b                          shift and go to state 100

state 137

    (67) term -> factor sem_top_factor .
    (68) term -> factor sem_top_factor . MULTIPLY sem_push_operator term
    (69) term -> factor sem_top_factor . DIVIDE sem_push_operator term

    PLUS            reduce using rule 67 (term -> factor sem_top_factor .)
    MINUS           reduce using rule 67 (term -> factor sem_top_factor .)
    IS_EQUAL_TO     reduce using rule 67 (term -> factor sem_top_factor .)
    NOT_EQUAL_TO    reduce using rule 67 (term -> factor sem_top_factor .)
    GREATER_THAN    reduce using rule 67 (term -> factor sem_top_factor .)
    LESS_THAN       reduce using rule 67 (term -> factor sem_top_factor .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 67 (term -> factor sem_top_factor .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 67 (term -> factor sem_top_factor .)
    AND             reduce using rule 67 (term -> factor sem_top_factor .)
    OR              reduce using rule 67 (term -> factor sem_top_factor .)
    SEMICOLON       reduce using rule 67 (term -> factor sem_top_factor .)
    RIGHT_PAR       reduce using rule 67 (term -> factor sem_top_factor .)
    RIGHT_BRACKET   reduce using rule 67 (term -> factor sem_top_factor .)
    COMMA           reduce using rule 67 (term -> factor sem_top_factor .)
    MULTIPLY        shift and go to state 177
    DIVIDE          shift and go to state 178


state 138

    (95) sem_top_factor -> empty .

    MULTIPLY        reduce using rule 95 (sem_top_factor -> empty .)
    DIVIDE          reduce using rule 95 (sem_top_factor -> empty .)
    PLUS            reduce using rule 95 (sem_top_factor -> empty .)
    MINUS           reduce using rule 95 (sem_top_factor -> empty .)
    IS_EQUAL_TO     reduce using rule 95 (sem_top_factor -> empty .)
    NOT_EQUAL_TO    reduce using rule 95 (sem_top_factor -> empty .)
    GREATER_THAN    reduce using rule 95 (sem_top_factor -> empty .)
    LESS_THAN       reduce using rule 95 (sem_top_factor -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 95 (sem_top_factor -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 95 (sem_top_factor -> empty .)
    AND             reduce using rule 95 (sem_top_factor -> empty .)
    OR              reduce using rule 95 (sem_top_factor -> empty .)
    SEMICOLON       reduce using rule 95 (sem_top_factor -> empty .)
    RIGHT_PAR       reduce using rule 95 (sem_top_factor -> empty .)
    RIGHT_BRACKET   reduce using rule 95 (sem_top_factor -> empty .)
    COMMA           reduce using rule 95 (sem_top_factor -> empty .)


state 139

    (70) factor -> LEFT_PAR sem_false_bottom_begin . mega_exp RIGHT_PAR sem_false_bottom_end
    (52) mega_exp -> . hyper_exp mega_exp_1
    (56) hyper_exp -> . exp hyper_exp_1
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    mega_exp                       shift and go to state 179
    hyper_exp                      shift and go to state 89
    exp                            shift and go to state 90
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 140

    (97) sem_false_bottom_begin -> empty .

    LEFT_PAR        reduce using rule 97 (sem_false_bottom_begin -> empty .)
    PLUS            reduce using rule 97 (sem_false_bottom_begin -> empty .)
    MINUS           reduce using rule 97 (sem_false_bottom_begin -> empty .)
    ID              reduce using rule 97 (sem_false_bottom_begin -> empty .)
    CTE_I           reduce using rule 97 (sem_false_bottom_begin -> empty .)
    CTE_D           reduce using rule 97 (sem_false_bottom_begin -> empty .)
    TRUE            reduce using rule 97 (sem_false_bottom_begin -> empty .)
    FALSE           reduce using rule 97 (sem_false_bottom_begin -> empty .)
    RIGHT_PAR       reduce using rule 97 (sem_false_bottom_begin -> empty .)


state 141

    (19) var_cte -> ID sem_check_function . LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign

    LEFT_PAR        shift and go to state 180


state 142

    (23) var_cte -> ID sem_push_operand . matrix
    (7) matrix -> . LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (8) matrix -> . empty
    (85) empty -> .

    LEFT_BRACKET    shift and go to state 113
    MULTIPLY        reduce using rule 85 (empty -> .)
    DIVIDE          reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    IS_EQUAL_TO     reduce using rule 85 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 85 (empty -> .)
    GREATER_THAN    reduce using rule 85 (empty -> .)
    LESS_THAN       reduce using rule 85 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    matrix                         shift and go to state 181
    empty                          shift and go to state 114

state 143

    (110) sem_check_function -> empty .
    (91) sem_push_operand -> empty .

    LEFT_PAR        reduce using rule 110 (sem_check_function -> empty .)
    LEFT_BRACKET    reduce using rule 91 (sem_push_operand -> empty .)
    MULTIPLY        reduce using rule 91 (sem_push_operand -> empty .)
    DIVIDE          reduce using rule 91 (sem_push_operand -> empty .)
    PLUS            reduce using rule 91 (sem_push_operand -> empty .)
    MINUS           reduce using rule 91 (sem_push_operand -> empty .)
    IS_EQUAL_TO     reduce using rule 91 (sem_push_operand -> empty .)
    NOT_EQUAL_TO    reduce using rule 91 (sem_push_operand -> empty .)
    GREATER_THAN    reduce using rule 91 (sem_push_operand -> empty .)
    LESS_THAN       reduce using rule 91 (sem_push_operand -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 91 (sem_push_operand -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 91 (sem_push_operand -> empty .)
    AND             reduce using rule 91 (sem_push_operand -> empty .)
    OR              reduce using rule 91 (sem_push_operand -> empty .)
    SEMICOLON       reduce using rule 91 (sem_push_operand -> empty .)
    RIGHT_PAR       reduce using rule 91 (sem_push_operand -> empty .)
    RIGHT_BRACKET   reduce using rule 91 (sem_push_operand -> empty .)
    COMMA           reduce using rule 91 (sem_push_operand -> empty .)


state 144

    (20) var_cte -> CTE_I sem_push_constant_int .

    MULTIPLY        reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    DIVIDE          reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    PLUS            reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    MINUS           reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    IS_EQUAL_TO     reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    NOT_EQUAL_TO    reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    GREATER_THAN    reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    LESS_THAN       reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    AND             reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    OR              reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    SEMICOLON       reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    RIGHT_PAR       reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    RIGHT_BRACKET   reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    COMMA           reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)


state 145

    (92) sem_push_constant_int -> empty .

    MULTIPLY        reduce using rule 92 (sem_push_constant_int -> empty .)
    DIVIDE          reduce using rule 92 (sem_push_constant_int -> empty .)
    PLUS            reduce using rule 92 (sem_push_constant_int -> empty .)
    MINUS           reduce using rule 92 (sem_push_constant_int -> empty .)
    IS_EQUAL_TO     reduce using rule 92 (sem_push_constant_int -> empty .)
    NOT_EQUAL_TO    reduce using rule 92 (sem_push_constant_int -> empty .)
    GREATER_THAN    reduce using rule 92 (sem_push_constant_int -> empty .)
    LESS_THAN       reduce using rule 92 (sem_push_constant_int -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 92 (sem_push_constant_int -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 92 (sem_push_constant_int -> empty .)
    AND             reduce using rule 92 (sem_push_constant_int -> empty .)
    OR              reduce using rule 92 (sem_push_constant_int -> empty .)
    SEMICOLON       reduce using rule 92 (sem_push_constant_int -> empty .)
    RIGHT_PAR       reduce using rule 92 (sem_push_constant_int -> empty .)
    RIGHT_BRACKET   reduce using rule 92 (sem_push_constant_int -> empty .)
    COMMA           reduce using rule 92 (sem_push_constant_int -> empty .)


state 146

    (21) var_cte -> CTE_D sem_push_constant_double .

    MULTIPLY        reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    DIVIDE          reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    PLUS            reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    MINUS           reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    IS_EQUAL_TO     reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    NOT_EQUAL_TO    reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    GREATER_THAN    reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    LESS_THAN       reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    AND             reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    OR              reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    SEMICOLON       reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    RIGHT_PAR       reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    RIGHT_BRACKET   reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    COMMA           reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)


state 147

    (93) sem_push_constant_double -> empty .

    MULTIPLY        reduce using rule 93 (sem_push_constant_double -> empty .)
    DIVIDE          reduce using rule 93 (sem_push_constant_double -> empty .)
    PLUS            reduce using rule 93 (sem_push_constant_double -> empty .)
    MINUS           reduce using rule 93 (sem_push_constant_double -> empty .)
    IS_EQUAL_TO     reduce using rule 93 (sem_push_constant_double -> empty .)
    NOT_EQUAL_TO    reduce using rule 93 (sem_push_constant_double -> empty .)
    GREATER_THAN    reduce using rule 93 (sem_push_constant_double -> empty .)
    LESS_THAN       reduce using rule 93 (sem_push_constant_double -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 93 (sem_push_constant_double -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 93 (sem_push_constant_double -> empty .)
    AND             reduce using rule 93 (sem_push_constant_double -> empty .)
    OR              reduce using rule 93 (sem_push_constant_double -> empty .)
    SEMICOLON       reduce using rule 93 (sem_push_constant_double -> empty .)
    RIGHT_PAR       reduce using rule 93 (sem_push_constant_double -> empty .)
    RIGHT_BRACKET   reduce using rule 93 (sem_push_constant_double -> empty .)
    COMMA           reduce using rule 93 (sem_push_constant_double -> empty .)


state 148

    (22) var_cte -> cte_b sem_push_constant_bool .

    MULTIPLY        reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    DIVIDE          reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    PLUS            reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    MINUS           reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    IS_EQUAL_TO     reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    NOT_EQUAL_TO    reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    GREATER_THAN    reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    LESS_THAN       reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    AND             reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    OR              reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    SEMICOLON       reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    RIGHT_PAR       reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    RIGHT_BRACKET   reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    COMMA           reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)


state 149

    (94) sem_push_constant_bool -> empty .

    MULTIPLY        reduce using rule 94 (sem_push_constant_bool -> empty .)
    DIVIDE          reduce using rule 94 (sem_push_constant_bool -> empty .)
    PLUS            reduce using rule 94 (sem_push_constant_bool -> empty .)
    MINUS           reduce using rule 94 (sem_push_constant_bool -> empty .)
    IS_EQUAL_TO     reduce using rule 94 (sem_push_constant_bool -> empty .)
    NOT_EQUAL_TO    reduce using rule 94 (sem_push_constant_bool -> empty .)
    GREATER_THAN    reduce using rule 94 (sem_push_constant_bool -> empty .)
    LESS_THAN       reduce using rule 94 (sem_push_constant_bool -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 94 (sem_push_constant_bool -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 94 (sem_push_constant_bool -> empty .)
    AND             reduce using rule 94 (sem_push_constant_bool -> empty .)
    OR              reduce using rule 94 (sem_push_constant_bool -> empty .)
    SEMICOLON       reduce using rule 94 (sem_push_constant_bool -> empty .)
    RIGHT_PAR       reduce using rule 94 (sem_push_constant_bool -> empty .)
    RIGHT_BRACKET   reduce using rule 94 (sem_push_constant_bool -> empty .)
    COMMA           reduce using rule 94 (sem_push_constant_bool -> empty .)


state 150

    (81) while_cycle -> WHILE sem_start_while LEFT_PAR . mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (52) mega_exp -> . hyper_exp mega_exp_1
    (56) hyper_exp -> . exp hyper_exp_1
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    mega_exp                       shift and go to state 182
    hyper_exp                      shift and go to state 89
    exp                            shift and go to state 90
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 151

    (82) read -> READ sem_push_operator LEFT_PAR . mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (52) mega_exp -> . hyper_exp mega_exp_1
    (56) hyper_exp -> . exp hyper_exp_1
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    mega_exp                       shift and go to state 183
    hyper_exp                      shift and go to state 89
    exp                            shift and go to state 90
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 152

    (83) write -> WRITE sem_push_operator LEFT_PAR . mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (52) mega_exp -> . hyper_exp mega_exp_1
    (56) hyper_exp -> . exp hyper_exp_1
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    mega_exp                       shift and go to state 184
    hyper_exp                      shift and go to state 89
    exp                            shift and go to state 90
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 153

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET . LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON

    LEFT_BRACKET    shift and go to state 185


state 154

    (12) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .

    FUNCTION        reduce using rule 12 (func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .)
    MAIN            reduce using rule 12 (func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .)


state 155

    (13) param_declaration -> var_type ID sem_add_param .
    (14) param_declaration -> var_type ID sem_add_param . COMMA param_declaration

    RIGHT_PAR       reduce using rule 13 (param_declaration -> var_type ID sem_add_param .)
    COMMA           shift and go to state 186


state 156

    (109) sem_add_param -> empty .

    COMMA           reduce using rule 109 (sem_add_param -> empty .)
    RIGHT_PAR       reduce using rule 109 (sem_add_param -> empty .)


state 157

    (41) var_assignment -> ID sem_push_operand matrix ASSIGN . sem_push_operator mega_exp sem_assign_value SEMICOLON
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 187
    empty                          shift and go to state 106

state 158

    (7) matrix -> LEFT_BRACKET sem_check_dim1 . exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    exp                            shift and go to state 188
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 159

    (124) sem_check_dim1 -> empty .

    LEFT_PAR        reduce using rule 124 (sem_check_dim1 -> empty .)
    PLUS            reduce using rule 124 (sem_check_dim1 -> empty .)
    MINUS           reduce using rule 124 (sem_check_dim1 -> empty .)
    ID              reduce using rule 124 (sem_check_dim1 -> empty .)
    CTE_I           reduce using rule 124 (sem_check_dim1 -> empty .)
    CTE_D           reduce using rule 124 (sem_check_dim1 -> empty .)
    TRUE            reduce using rule 124 (sem_check_dim1 -> empty .)
    FALSE           reduce using rule 124 (sem_check_dim1 -> empty .)


state 160

    (77) function_call -> ID sem_check_function LEFT_PAR sem_create_era . param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (78) param_call -> . mega_exp sem_check_param
    (79) param_call -> . mega_exp sem_check_param COMMA param_call
    (80) param_call -> . empty
    (52) mega_exp -> . hyper_exp mega_exp_1
    (85) empty -> .
    (56) hyper_exp -> . exp hyper_exp_1
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 85 (empty -> .)
    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    param_call                     shift and go to state 189
    mega_exp                       shift and go to state 190
    empty                          shift and go to state 191
    hyper_exp                      shift and go to state 89
    exp                            shift and go to state 90
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 161

    (111) sem_create_era -> empty .

    LEFT_PAR        reduce using rule 111 (sem_create_era -> empty .)
    PLUS            reduce using rule 111 (sem_create_era -> empty .)
    MINUS           reduce using rule 111 (sem_create_era -> empty .)
    ID              reduce using rule 111 (sem_create_era -> empty .)
    CTE_I           reduce using rule 111 (sem_create_era -> empty .)
    CTE_D           reduce using rule 111 (sem_create_era -> empty .)
    TRUE            reduce using rule 111 (sem_create_era -> empty .)
    FALSE           reduce using rule 111 (sem_create_era -> empty .)
    RIGHT_PAR       reduce using rule 111 (sem_create_era -> empty .)


state 162

    (42) matrix_assignment -> MATRIX ID sem_push_operand ASSIGN . sem_push_operator matrix_construct sem_assign_matrix SEMICOLON
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_BRACE      reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 192
    empty                          shift and go to state 106

state 163

    (74) condition -> IF LEFT_PAR mega_exp RIGHT_PAR . sem_end_condition block condition_1 sem_fill_gotof
    (104) sem_end_condition -> . empty
    (85) empty -> .

    LEFT_BRACE      reduce using rule 85 (empty -> .)

    sem_end_condition              shift and go to state 193
    empty                          shift and go to state 194

state 164

    (51) return -> RETURN mega_exp sem_return_function SEMICOLON .

    ID              reduce using rule 51 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    MATRIX          reduce using rule 51 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    IF              reduce using rule 51 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    RETURN          reduce using rule 51 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    WHILE           reduce using rule 51 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    READ            reduce using rule 51 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    WRITE           reduce using rule 51 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    RIGHT_BRACE     reduce using rule 51 (return -> RETURN mega_exp sem_return_function SEMICOLON .)


state 165

    (53) mega_exp_1 -> AND sem_push_operator . mega_exp sem_top_logical
    (52) mega_exp -> . hyper_exp mega_exp_1
    (56) hyper_exp -> . exp hyper_exp_1
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    mega_exp                       shift and go to state 195
    hyper_exp                      shift and go to state 89
    exp                            shift and go to state 90
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 166

    (54) mega_exp_1 -> OR sem_push_operator . mega_exp sem_top_logical
    (52) mega_exp -> . hyper_exp mega_exp_1
    (56) hyper_exp -> . exp hyper_exp_1
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    mega_exp                       shift and go to state 196
    hyper_exp                      shift and go to state 89
    exp                            shift and go to state 90
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 167

    (57) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator . exp sem_top_relational
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    exp                            shift and go to state 197
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 168

    (58) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator . exp sem_top_relational
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    exp                            shift and go to state 198
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 169

    (59) hyper_exp_1 -> GREATER_THAN sem_push_operator . exp sem_top_relational
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    exp                            shift and go to state 199
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 170

    (60) hyper_exp_1 -> LESS_THAN sem_push_operator . exp sem_top_relational
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    exp                            shift and go to state 200
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 171

    (61) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator . exp sem_top_relational
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    exp                            shift and go to state 201
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 172

    (62) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator . exp sem_top_relational
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    exp                            shift and go to state 202
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 173

    (65) exp -> term sem_top_term PLUS . sem_push_operator exp
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 203
    empty                          shift and go to state 106

state 174

    (66) exp -> term sem_top_term MINUS . sem_push_operator exp
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 204
    empty                          shift and go to state 106

state 175

    (72) factor -> PLUS sem_push_operator var_cte .

    MULTIPLY        reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    DIVIDE          reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    PLUS            reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    MINUS           reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    IS_EQUAL_TO     reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    NOT_EQUAL_TO    reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    GREATER_THAN    reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    LESS_THAN       reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    AND             reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    OR              reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    SEMICOLON       reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    RIGHT_PAR       reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    RIGHT_BRACKET   reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)
    COMMA           reduce using rule 72 (factor -> PLUS sem_push_operator var_cte .)


state 176

    (73) factor -> MINUS sem_push_operator var_cte .

    MULTIPLY        reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    DIVIDE          reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    PLUS            reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    MINUS           reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    IS_EQUAL_TO     reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    NOT_EQUAL_TO    reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    GREATER_THAN    reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    LESS_THAN       reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    AND             reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    OR              reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    SEMICOLON       reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    RIGHT_PAR       reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    RIGHT_BRACKET   reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)
    COMMA           reduce using rule 73 (factor -> MINUS sem_push_operator var_cte .)


state 177

    (68) term -> factor sem_top_factor MULTIPLY . sem_push_operator term
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 205
    empty                          shift and go to state 106

state 178

    (69) term -> factor sem_top_factor DIVIDE . sem_push_operator term
    (90) sem_push_operator -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_push_operator              shift and go to state 206
    empty                          shift and go to state 106

state 179

    (70) factor -> LEFT_PAR sem_false_bottom_begin mega_exp . RIGHT_PAR sem_false_bottom_end

    RIGHT_PAR       shift and go to state 207


state 180

    (19) var_cte -> ID sem_check_function LEFT_PAR . sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (97) sem_false_bottom_begin -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)

    sem_false_bottom_begin         shift and go to state 208
    empty                          shift and go to state 140

state 181

    (23) var_cte -> ID sem_push_operand matrix .

    MULTIPLY        reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    DIVIDE          reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    PLUS            reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    MINUS           reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    IS_EQUAL_TO     reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    NOT_EQUAL_TO    reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    GREATER_THAN    reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    LESS_THAN       reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    AND             reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    OR              reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    SEMICOLON       reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    RIGHT_PAR       reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    RIGHT_BRACKET   reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    COMMA           reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)


state 182

    (81) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp . RIGHT_PAR sem_end_condition block sem_end_while

    RIGHT_PAR       shift and go to state 209


state 183

    (82) read -> READ sem_push_operator LEFT_PAR mega_exp . RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_PAR       shift and go to state 210


state 184

    (83) write -> WRITE sem_push_operator LEFT_PAR mega_exp . RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_PAR       shift and go to state 211


state 185

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET . CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON

    CTE_I           shift and go to state 212


state 186

    (14) param_declaration -> var_type ID sem_add_param COMMA . param_declaration
    (13) param_declaration -> . var_type ID sem_add_param
    (14) param_declaration -> . var_type ID sem_add_param COMMA param_declaration
    (15) param_declaration -> . empty
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type
    (85) empty -> .

    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    BOOL            shift and go to state 12
    RIGHT_PAR       reduce using rule 85 (empty -> .)

    var_type                       shift and go to state 79
    param_declaration              shift and go to state 213
    empty                          shift and go to state 80

state 187

    (41) var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator . mega_exp sem_assign_value SEMICOLON
    (52) mega_exp -> . hyper_exp mega_exp_1
    (56) hyper_exp -> . exp hyper_exp_1
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    mega_exp                       shift and go to state 214
    hyper_exp                      shift and go to state 89
    exp                            shift and go to state 90
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 188

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp . RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2

    RIGHT_BRACKET   shift and go to state 215


state 189

    (77) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call . RIGHT_PAR sem_count_params SEMICOLON sem_gosub

    RIGHT_PAR       shift and go to state 216


state 190

    (78) param_call -> mega_exp . sem_check_param
    (79) param_call -> mega_exp . sem_check_param COMMA param_call
    (112) sem_check_param -> . empty
    (85) empty -> .

    COMMA           reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)

    sem_check_param                shift and go to state 217
    empty                          shift and go to state 218

state 191

    (80) param_call -> empty .

    RIGHT_PAR       reduce using rule 80 (param_call -> empty .)


state 192

    (42) matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator . matrix_construct sem_assign_matrix SEMICOLON
    (43) matrix_construct -> . LEFT_BRACE rows RIGHT_BRACE

    LEFT_BRACE      shift and go to state 220

    matrix_construct               shift and go to state 219

state 193

    (74) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition . block condition_1 sem_fill_gotof
    (30) block -> . LEFT_BRACE declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 44

    block                          shift and go to state 221

state 194

    (104) sem_end_condition -> empty .

    LEFT_BRACE      reduce using rule 104 (sem_end_condition -> empty .)


state 195

    (53) mega_exp_1 -> AND sem_push_operator mega_exp . sem_top_logical
    (102) sem_top_logical -> .

    SEMICOLON       reduce using rule 102 (sem_top_logical -> .)
    RIGHT_PAR       reduce using rule 102 (sem_top_logical -> .)
    COMMA           reduce using rule 102 (sem_top_logical -> .)

    sem_top_logical                shift and go to state 222

state 196

    (54) mega_exp_1 -> OR sem_push_operator mega_exp . sem_top_logical
    (102) sem_top_logical -> .

    SEMICOLON       reduce using rule 102 (sem_top_logical -> .)
    RIGHT_PAR       reduce using rule 102 (sem_top_logical -> .)
    COMMA           reduce using rule 102 (sem_top_logical -> .)

    sem_top_logical                shift and go to state 223

state 197

    (57) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp . sem_top_relational
    (103) sem_top_relational -> .

    AND             reduce using rule 103 (sem_top_relational -> .)
    OR              reduce using rule 103 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 103 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 103 (sem_top_relational -> .)
    COMMA           reduce using rule 103 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 224

state 198

    (58) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp . sem_top_relational
    (103) sem_top_relational -> .

    AND             reduce using rule 103 (sem_top_relational -> .)
    OR              reduce using rule 103 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 103 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 103 (sem_top_relational -> .)
    COMMA           reduce using rule 103 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 225

state 199

    (59) hyper_exp_1 -> GREATER_THAN sem_push_operator exp . sem_top_relational
    (103) sem_top_relational -> .

    AND             reduce using rule 103 (sem_top_relational -> .)
    OR              reduce using rule 103 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 103 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 103 (sem_top_relational -> .)
    COMMA           reduce using rule 103 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 226

state 200

    (60) hyper_exp_1 -> LESS_THAN sem_push_operator exp . sem_top_relational
    (103) sem_top_relational -> .

    AND             reduce using rule 103 (sem_top_relational -> .)
    OR              reduce using rule 103 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 103 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 103 (sem_top_relational -> .)
    COMMA           reduce using rule 103 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 227

state 201

    (61) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp . sem_top_relational
    (103) sem_top_relational -> .

    AND             reduce using rule 103 (sem_top_relational -> .)
    OR              reduce using rule 103 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 103 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 103 (sem_top_relational -> .)
    COMMA           reduce using rule 103 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 228

state 202

    (62) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp . sem_top_relational
    (103) sem_top_relational -> .

    AND             reduce using rule 103 (sem_top_relational -> .)
    OR              reduce using rule 103 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 103 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 103 (sem_top_relational -> .)
    COMMA           reduce using rule 103 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 229

state 203

    (65) exp -> term sem_top_term PLUS sem_push_operator . exp
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    term                           shift and go to state 91
    exp                            shift and go to state 230
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 204

    (66) exp -> term sem_top_term MINUS sem_push_operator . exp
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    term                           shift and go to state 91
    exp                            shift and go to state 231
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 205

    (68) term -> factor sem_top_factor MULTIPLY sem_push_operator . term
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    factor                         shift and go to state 94
    term                           shift and go to state 232
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 206

    (69) term -> factor sem_top_factor DIVIDE sem_push_operator . term
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    factor                         shift and go to state 94
    term                           shift and go to state 233
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 207

    (70) factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR . sem_false_bottom_end
    (98) sem_false_bottom_end -> . empty
    (85) empty -> .

    MULTIPLY        reduce using rule 85 (empty -> .)
    DIVIDE          reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    IS_EQUAL_TO     reduce using rule 85 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 85 (empty -> .)
    GREATER_THAN    reduce using rule 85 (empty -> .)
    LESS_THAN       reduce using rule 85 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    sem_false_bottom_end           shift and go to state 234
    empty                          shift and go to state 235

state 208

    (19) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin . sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (111) sem_create_era -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)

    sem_create_era                 shift and go to state 236
    empty                          shift and go to state 161

state 209

    (81) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR . sem_end_condition block sem_end_while
    (104) sem_end_condition -> . empty
    (85) empty -> .

    LEFT_BRACE      reduce using rule 85 (empty -> .)

    sem_end_condition              shift and go to state 237
    empty                          shift and go to state 194

state 210

    (82) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR . sem_read_write SEMICOLON
    (100) sem_read_write -> . empty
    (85) empty -> .

    SEMICOLON       reduce using rule 85 (empty -> .)

    sem_read_write                 shift and go to state 238
    empty                          shift and go to state 239

state 211

    (83) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR . sem_read_write SEMICOLON
    (100) sem_read_write -> . empty
    (85) empty -> .

    SEMICOLON       reduce using rule 85 (empty -> .)

    sem_read_write                 shift and go to state 240
    empty                          shift and go to state 239

state 212

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I . sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (122) sem_get_dim2 -> . empty
    (85) empty -> .

    RIGHT_BRACKET   reduce using rule 85 (empty -> .)

    sem_get_dim2                   shift and go to state 241
    empty                          shift and go to state 242

state 213

    (14) param_declaration -> var_type ID sem_add_param COMMA param_declaration .

    RIGHT_PAR       reduce using rule 14 (param_declaration -> var_type ID sem_add_param COMMA param_declaration .)


state 214

    (41) var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp . sem_assign_value SEMICOLON
    (99) sem_assign_value -> . empty
    (85) empty -> .

    SEMICOLON       reduce using rule 85 (empty -> .)

    sem_assign_value               shift and go to state 243
    empty                          shift and go to state 244

state 215

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET . sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (125) sem_ver_dim1 -> . empty
    (85) empty -> .

    LEFT_BRACKET    reduce using rule 85 (empty -> .)

    sem_ver_dim1                   shift and go to state 245
    empty                          shift and go to state 246

state 216

    (77) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR . sem_count_params SEMICOLON sem_gosub
    (113) sem_count_params -> . empty
    (85) empty -> .

    SEMICOLON       reduce using rule 85 (empty -> .)

    sem_count_params               shift and go to state 247
    empty                          shift and go to state 248

state 217

    (78) param_call -> mega_exp sem_check_param .
    (79) param_call -> mega_exp sem_check_param . COMMA param_call

    RIGHT_PAR       reduce using rule 78 (param_call -> mega_exp sem_check_param .)
    COMMA           shift and go to state 249


state 218

    (112) sem_check_param -> empty .

    COMMA           reduce using rule 112 (sem_check_param -> empty .)
    RIGHT_PAR       reduce using rule 112 (sem_check_param -> empty .)


state 219

    (42) matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct . sem_assign_matrix SEMICOLON
    (128) sem_assign_matrix -> . empty
    (85) empty -> .

    SEMICOLON       reduce using rule 85 (empty -> .)

    sem_assign_matrix              shift and go to state 250
    empty                          shift and go to state 251

state 220

    (43) matrix_construct -> LEFT_BRACE . rows RIGHT_BRACE
    (44) rows -> . row
    (45) rows -> . row COMMA rows
    (46) row -> . LEFT_BRACKET col RIGHT_BRACKET sem_push_row sem_clear_row

    LEFT_BRACKET    shift and go to state 254

    rows                           shift and go to state 252
    row                            shift and go to state 253

state 221

    (74) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block . condition_1 sem_fill_gotof
    (75) condition_1 -> . ELSE sem_else_condition block
    (76) condition_1 -> . empty
    (85) empty -> .

    ELSE            shift and go to state 256
    ID              reduce using rule 85 (empty -> .)
    MATRIX          reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    WRITE           reduce using rule 85 (empty -> .)
    RIGHT_BRACE     reduce using rule 85 (empty -> .)

    condition_1                    shift and go to state 255
    empty                          shift and go to state 257

state 222

    (53) mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .

    SEMICOLON       reduce using rule 53 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)
    RIGHT_PAR       reduce using rule 53 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)
    COMMA           reduce using rule 53 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)


state 223

    (54) mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .

    SEMICOLON       reduce using rule 54 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)
    RIGHT_PAR       reduce using rule 54 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)
    COMMA           reduce using rule 54 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)


state 224

    (57) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 57 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 57 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 57 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 57 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 57 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 225

    (58) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 58 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 58 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 58 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 58 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 58 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 226

    (59) hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .

    AND             reduce using rule 59 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 59 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 59 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 59 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 59 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)


state 227

    (60) hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .

    AND             reduce using rule 60 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 60 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 60 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 60 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 60 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)


state 228

    (61) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 61 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 61 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 61 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 61 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 61 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 229

    (62) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 62 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 62 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 62 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 62 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 62 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 230

    (65) exp -> term sem_top_term PLUS sem_push_operator exp .

    IS_EQUAL_TO     reduce using rule 65 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    NOT_EQUAL_TO    reduce using rule 65 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    GREATER_THAN    reduce using rule 65 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    LESS_THAN       reduce using rule 65 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 65 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 65 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    AND             reduce using rule 65 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    OR              reduce using rule 65 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    SEMICOLON       reduce using rule 65 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    RIGHT_PAR       reduce using rule 65 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    RIGHT_BRACKET   reduce using rule 65 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    COMMA           reduce using rule 65 (exp -> term sem_top_term PLUS sem_push_operator exp .)


state 231

    (66) exp -> term sem_top_term MINUS sem_push_operator exp .

    IS_EQUAL_TO     reduce using rule 66 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    NOT_EQUAL_TO    reduce using rule 66 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    GREATER_THAN    reduce using rule 66 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    LESS_THAN       reduce using rule 66 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 66 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 66 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    AND             reduce using rule 66 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    OR              reduce using rule 66 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    SEMICOLON       reduce using rule 66 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    RIGHT_PAR       reduce using rule 66 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    RIGHT_BRACKET   reduce using rule 66 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    COMMA           reduce using rule 66 (exp -> term sem_top_term MINUS sem_push_operator exp .)


state 232

    (68) term -> factor sem_top_factor MULTIPLY sem_push_operator term .

    PLUS            reduce using rule 68 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    MINUS           reduce using rule 68 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    IS_EQUAL_TO     reduce using rule 68 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    NOT_EQUAL_TO    reduce using rule 68 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    GREATER_THAN    reduce using rule 68 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    LESS_THAN       reduce using rule 68 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 68 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 68 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    AND             reduce using rule 68 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    OR              reduce using rule 68 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    SEMICOLON       reduce using rule 68 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    RIGHT_PAR       reduce using rule 68 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    RIGHT_BRACKET   reduce using rule 68 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    COMMA           reduce using rule 68 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)


state 233

    (69) term -> factor sem_top_factor DIVIDE sem_push_operator term .

    PLUS            reduce using rule 69 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    MINUS           reduce using rule 69 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    IS_EQUAL_TO     reduce using rule 69 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    NOT_EQUAL_TO    reduce using rule 69 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    GREATER_THAN    reduce using rule 69 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    LESS_THAN       reduce using rule 69 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 69 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 69 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    AND             reduce using rule 69 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    OR              reduce using rule 69 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    SEMICOLON       reduce using rule 69 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    RIGHT_PAR       reduce using rule 69 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    RIGHT_BRACKET   reduce using rule 69 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    COMMA           reduce using rule 69 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)


state 234

    (70) factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .

    MULTIPLY        reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    DIVIDE          reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    PLUS            reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    MINUS           reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    IS_EQUAL_TO     reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    NOT_EQUAL_TO    reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    GREATER_THAN    reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    LESS_THAN       reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    AND             reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    OR              reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    SEMICOLON       reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    RIGHT_PAR       reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    RIGHT_BRACKET   reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    COMMA           reduce using rule 70 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)


state 235

    (98) sem_false_bottom_end -> empty .

    MULTIPLY        reduce using rule 98 (sem_false_bottom_end -> empty .)
    DIVIDE          reduce using rule 98 (sem_false_bottom_end -> empty .)
    PLUS            reduce using rule 98 (sem_false_bottom_end -> empty .)
    MINUS           reduce using rule 98 (sem_false_bottom_end -> empty .)
    IS_EQUAL_TO     reduce using rule 98 (sem_false_bottom_end -> empty .)
    NOT_EQUAL_TO    reduce using rule 98 (sem_false_bottom_end -> empty .)
    GREATER_THAN    reduce using rule 98 (sem_false_bottom_end -> empty .)
    LESS_THAN       reduce using rule 98 (sem_false_bottom_end -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 98 (sem_false_bottom_end -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 98 (sem_false_bottom_end -> empty .)
    AND             reduce using rule 98 (sem_false_bottom_end -> empty .)
    OR              reduce using rule 98 (sem_false_bottom_end -> empty .)
    SEMICOLON       reduce using rule 98 (sem_false_bottom_end -> empty .)
    RIGHT_PAR       reduce using rule 98 (sem_false_bottom_end -> empty .)
    RIGHT_BRACKET   reduce using rule 98 (sem_false_bottom_end -> empty .)
    COMMA           reduce using rule 98 (sem_false_bottom_end -> empty .)


state 236

    (19) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era . param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (78) param_call -> . mega_exp sem_check_param
    (79) param_call -> . mega_exp sem_check_param COMMA param_call
    (80) param_call -> . empty
    (52) mega_exp -> . hyper_exp mega_exp_1
    (85) empty -> .
    (56) hyper_exp -> . exp hyper_exp_1
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 85 (empty -> .)
    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    param_call                     shift and go to state 258
    mega_exp                       shift and go to state 190
    empty                          shift and go to state 191
    hyper_exp                      shift and go to state 89
    exp                            shift and go to state 90
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 237

    (81) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition . block sem_end_while
    (30) block -> . LEFT_BRACE declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 44

    block                          shift and go to state 259

state 238

    (82) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write . SEMICOLON

    SEMICOLON       shift and go to state 260


state 239

    (100) sem_read_write -> empty .

    SEMICOLON       reduce using rule 100 (sem_read_write -> empty .)


state 240

    (83) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write . SEMICOLON

    SEMICOLON       shift and go to state 261


state 241

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 . RIGHT_BRACKET sem_add_matrix SEMICOLON

    RIGHT_BRACKET   shift and go to state 262


state 242

    (122) sem_get_dim2 -> empty .

    RIGHT_BRACKET   reduce using rule 122 (sem_get_dim2 -> empty .)


state 243

    (41) var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value . SEMICOLON

    SEMICOLON       shift and go to state 263


state 244

    (99) sem_assign_value -> empty .

    SEMICOLON       reduce using rule 99 (sem_assign_value -> empty .)


state 245

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 . LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2

    LEFT_BRACKET    shift and go to state 264


state 246

    (125) sem_ver_dim1 -> empty .

    LEFT_BRACKET    reduce using rule 125 (sem_ver_dim1 -> empty .)


state 247

    (77) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params . SEMICOLON sem_gosub

    SEMICOLON       shift and go to state 265


state 248

    (113) sem_count_params -> empty .

    SEMICOLON       reduce using rule 113 (sem_count_params -> empty .)
    MULTIPLY        reduce using rule 113 (sem_count_params -> empty .)
    DIVIDE          reduce using rule 113 (sem_count_params -> empty .)
    PLUS            reduce using rule 113 (sem_count_params -> empty .)
    MINUS           reduce using rule 113 (sem_count_params -> empty .)
    IS_EQUAL_TO     reduce using rule 113 (sem_count_params -> empty .)
    NOT_EQUAL_TO    reduce using rule 113 (sem_count_params -> empty .)
    GREATER_THAN    reduce using rule 113 (sem_count_params -> empty .)
    LESS_THAN       reduce using rule 113 (sem_count_params -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 113 (sem_count_params -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 113 (sem_count_params -> empty .)
    AND             reduce using rule 113 (sem_count_params -> empty .)
    OR              reduce using rule 113 (sem_count_params -> empty .)
    RIGHT_PAR       reduce using rule 113 (sem_count_params -> empty .)
    RIGHT_BRACKET   reduce using rule 113 (sem_count_params -> empty .)
    COMMA           reduce using rule 113 (sem_count_params -> empty .)


state 249

    (79) param_call -> mega_exp sem_check_param COMMA . param_call
    (78) param_call -> . mega_exp sem_check_param
    (79) param_call -> . mega_exp sem_check_param COMMA param_call
    (80) param_call -> . empty
    (52) mega_exp -> . hyper_exp mega_exp_1
    (85) empty -> .
    (56) hyper_exp -> . exp hyper_exp_1
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 85 (empty -> .)
    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    mega_exp                       shift and go to state 190
    param_call                     shift and go to state 266
    empty                          shift and go to state 191
    hyper_exp                      shift and go to state 89
    exp                            shift and go to state 90
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 250

    (42) matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix . SEMICOLON

    SEMICOLON       shift and go to state 267


state 251

    (128) sem_assign_matrix -> empty .

    SEMICOLON       reduce using rule 128 (sem_assign_matrix -> empty .)


state 252

    (43) matrix_construct -> LEFT_BRACE rows . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 268


state 253

    (44) rows -> row .
    (45) rows -> row . COMMA rows

    RIGHT_BRACE     reduce using rule 44 (rows -> row .)
    COMMA           shift and go to state 269


state 254

    (46) row -> LEFT_BRACKET . col RIGHT_BRACKET sem_push_row sem_clear_row
    (47) col -> . CTE_I sem_push_col col
    (48) col -> . CTE_B sem_push_col col
    (49) col -> . COMMA col
    (50) col -> . empty
    (85) empty -> .

    CTE_I           shift and go to state 271
    CTE_B           shift and go to state 272
    COMMA           shift and go to state 273
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)

    col                            shift and go to state 270
    empty                          shift and go to state 274

state 255

    (74) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 . sem_fill_gotof
    (105) sem_fill_gotof -> . empty
    (85) empty -> .

    ID              reduce using rule 85 (empty -> .)
    MATRIX          reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    WRITE           reduce using rule 85 (empty -> .)
    RIGHT_BRACE     reduce using rule 85 (empty -> .)

    sem_fill_gotof                 shift and go to state 275
    empty                          shift and go to state 276

state 256

    (75) condition_1 -> ELSE . sem_else_condition block
    (106) sem_else_condition -> . empty
    (85) empty -> .

    LEFT_BRACE      reduce using rule 85 (empty -> .)

    sem_else_condition             shift and go to state 277
    empty                          shift and go to state 278

state 257

    (76) condition_1 -> empty .

    ID              reduce using rule 76 (condition_1 -> empty .)
    MATRIX          reduce using rule 76 (condition_1 -> empty .)
    IF              reduce using rule 76 (condition_1 -> empty .)
    RETURN          reduce using rule 76 (condition_1 -> empty .)
    WHILE           reduce using rule 76 (condition_1 -> empty .)
    READ            reduce using rule 76 (condition_1 -> empty .)
    WRITE           reduce using rule 76 (condition_1 -> empty .)
    RIGHT_BRACE     reduce using rule 76 (condition_1 -> empty .)


state 258

    (19) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call . RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign

    RIGHT_PAR       shift and go to state 279


state 259

    (81) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block . sem_end_while
    (108) sem_end_while -> . empty
    (85) empty -> .

    ID              reduce using rule 85 (empty -> .)
    MATRIX          reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    WRITE           reduce using rule 85 (empty -> .)
    RIGHT_BRACE     reduce using rule 85 (empty -> .)

    sem_end_while                  shift and go to state 280
    empty                          shift and go to state 281

state 260

    (82) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .

    ID              reduce using rule 82 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    MATRIX          reduce using rule 82 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    IF              reduce using rule 82 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RETURN          reduce using rule 82 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WHILE           reduce using rule 82 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    READ            reduce using rule 82 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WRITE           reduce using rule 82 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RIGHT_BRACE     reduce using rule 82 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)


state 261

    (83) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .

    ID              reduce using rule 83 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    MATRIX          reduce using rule 83 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    IF              reduce using rule 83 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RETURN          reduce using rule 83 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WHILE           reduce using rule 83 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    READ            reduce using rule 83 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WRITE           reduce using rule 83 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RIGHT_BRACE     reduce using rule 83 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)


state 262

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET . sem_add_matrix SEMICOLON
    (123) sem_add_matrix -> . empty
    (85) empty -> .

    SEMICOLON       reduce using rule 85 (empty -> .)

    sem_add_matrix                 shift and go to state 282
    empty                          shift and go to state 283

state 263

    (41) var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .

    ID              reduce using rule 41 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    MATRIX          reduce using rule 41 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    IF              reduce using rule 41 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    RETURN          reduce using rule 41 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    WHILE           reduce using rule 41 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    READ            reduce using rule 41 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    WRITE           reduce using rule 41 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    RIGHT_BRACE     reduce using rule 41 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)


state 264

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET . sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (126) sem_check_dim2 -> . empty
    (85) empty -> .

    LEFT_PAR        reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    CTE_I           reduce using rule 85 (empty -> .)
    CTE_D           reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)

    sem_check_dim2                 shift and go to state 284
    empty                          shift and go to state 285

state 265

    (77) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON . sem_gosub
    (114) sem_gosub -> . empty
    (85) empty -> .

    ID              reduce using rule 85 (empty -> .)
    MATRIX          reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    WRITE           reduce using rule 85 (empty -> .)
    RIGHT_BRACE     reduce using rule 85 (empty -> .)

    sem_gosub                      shift and go to state 286
    empty                          shift and go to state 287

state 266

    (79) param_call -> mega_exp sem_check_param COMMA param_call .

    RIGHT_PAR       reduce using rule 79 (param_call -> mega_exp sem_check_param COMMA param_call .)


state 267

    (42) matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .

    ID              reduce using rule 42 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    MATRIX          reduce using rule 42 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    IF              reduce using rule 42 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    RETURN          reduce using rule 42 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    WHILE           reduce using rule 42 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    READ            reduce using rule 42 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    WRITE           reduce using rule 42 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 42 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)


state 268

    (43) matrix_construct -> LEFT_BRACE rows RIGHT_BRACE .

    SEMICOLON       reduce using rule 43 (matrix_construct -> LEFT_BRACE rows RIGHT_BRACE .)


state 269

    (45) rows -> row COMMA . rows
    (44) rows -> . row
    (45) rows -> . row COMMA rows
    (46) row -> . LEFT_BRACKET col RIGHT_BRACKET sem_push_row sem_clear_row

    LEFT_BRACKET    shift and go to state 254

    row                            shift and go to state 253
    rows                           shift and go to state 288

state 270

    (46) row -> LEFT_BRACKET col . RIGHT_BRACKET sem_push_row sem_clear_row

    RIGHT_BRACKET   shift and go to state 289


state 271

    (47) col -> CTE_I . sem_push_col col
    (131) sem_push_col -> . empty
    (85) empty -> .

    CTE_I           reduce using rule 85 (empty -> .)
    CTE_B           reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)

    sem_push_col                   shift and go to state 290
    empty                          shift and go to state 291

state 272

    (48) col -> CTE_B . sem_push_col col
    (131) sem_push_col -> . empty
    (85) empty -> .

    CTE_I           reduce using rule 85 (empty -> .)
    CTE_B           reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)

    sem_push_col                   shift and go to state 292
    empty                          shift and go to state 291

state 273

    (49) col -> COMMA . col
    (47) col -> . CTE_I sem_push_col col
    (48) col -> . CTE_B sem_push_col col
    (49) col -> . COMMA col
    (50) col -> . empty
    (85) empty -> .

    CTE_I           shift and go to state 271
    CTE_B           shift and go to state 272
    COMMA           shift and go to state 273
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)

    col                            shift and go to state 293
    empty                          shift and go to state 274

state 274

    (50) col -> empty .

    RIGHT_BRACKET   reduce using rule 50 (col -> empty .)


state 275

    (74) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .

    ID              reduce using rule 74 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    MATRIX          reduce using rule 74 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    IF              reduce using rule 74 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    RETURN          reduce using rule 74 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    WHILE           reduce using rule 74 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    READ            reduce using rule 74 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    WRITE           reduce using rule 74 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    RIGHT_BRACE     reduce using rule 74 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)


state 276

    (105) sem_fill_gotof -> empty .

    ID              reduce using rule 105 (sem_fill_gotof -> empty .)
    MATRIX          reduce using rule 105 (sem_fill_gotof -> empty .)
    IF              reduce using rule 105 (sem_fill_gotof -> empty .)
    RETURN          reduce using rule 105 (sem_fill_gotof -> empty .)
    WHILE           reduce using rule 105 (sem_fill_gotof -> empty .)
    READ            reduce using rule 105 (sem_fill_gotof -> empty .)
    WRITE           reduce using rule 105 (sem_fill_gotof -> empty .)
    RIGHT_BRACE     reduce using rule 105 (sem_fill_gotof -> empty .)


state 277

    (75) condition_1 -> ELSE sem_else_condition . block
    (30) block -> . LEFT_BRACE declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 44

    block                          shift and go to state 294

state 278

    (106) sem_else_condition -> empty .

    LEFT_BRACE      reduce using rule 106 (sem_else_condition -> empty .)


state 279

    (19) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR . sem_false_bottom_end sem_count_params sem_gosub_assign
    (98) sem_false_bottom_end -> . empty
    (85) empty -> .

    MULTIPLY        reduce using rule 85 (empty -> .)
    DIVIDE          reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    IS_EQUAL_TO     reduce using rule 85 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 85 (empty -> .)
    GREATER_THAN    reduce using rule 85 (empty -> .)
    LESS_THAN       reduce using rule 85 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    sem_false_bottom_end           shift and go to state 295
    empty                          shift and go to state 235

state 280

    (81) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .

    ID              reduce using rule 81 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    MATRIX          reduce using rule 81 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    IF              reduce using rule 81 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    RETURN          reduce using rule 81 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    WHILE           reduce using rule 81 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    READ            reduce using rule 81 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    WRITE           reduce using rule 81 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    RIGHT_BRACE     reduce using rule 81 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)


state 281

    (108) sem_end_while -> empty .

    ID              reduce using rule 108 (sem_end_while -> empty .)
    MATRIX          reduce using rule 108 (sem_end_while -> empty .)
    IF              reduce using rule 108 (sem_end_while -> empty .)
    RETURN          reduce using rule 108 (sem_end_while -> empty .)
    WHILE           reduce using rule 108 (sem_end_while -> empty .)
    READ            reduce using rule 108 (sem_end_while -> empty .)
    WRITE           reduce using rule 108 (sem_end_while -> empty .)
    RIGHT_BRACE     reduce using rule 108 (sem_end_while -> empty .)


state 282

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix . SEMICOLON

    SEMICOLON       shift and go to state 296


state 283

    (123) sem_add_matrix -> empty .

    SEMICOLON       reduce using rule 123 (sem_add_matrix -> empty .)


state 284

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 . exp RIGHT_BRACKET sem_ver_dim2
    (64) exp -> . term sem_top_term
    (65) exp -> . term sem_top_term PLUS sem_push_operator exp
    (66) exp -> . term sem_top_term MINUS sem_push_operator exp
    (67) term -> . factor sem_top_factor
    (68) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (69) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (70) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (71) factor -> . var_cte
    (72) factor -> . PLUS sem_push_operator var_cte
    (73) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 95
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    ID              shift and go to state 97
    CTE_I           shift and go to state 98
    CTE_D           shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102

    exp                            shift and go to state 297
    term                           shift and go to state 91
    factor                         shift and go to state 94
    var_cte                        shift and go to state 96
    cte_b                          shift and go to state 100

state 285

    (126) sem_check_dim2 -> empty .

    LEFT_PAR        reduce using rule 126 (sem_check_dim2 -> empty .)
    PLUS            reduce using rule 126 (sem_check_dim2 -> empty .)
    MINUS           reduce using rule 126 (sem_check_dim2 -> empty .)
    ID              reduce using rule 126 (sem_check_dim2 -> empty .)
    CTE_I           reduce using rule 126 (sem_check_dim2 -> empty .)
    CTE_D           reduce using rule 126 (sem_check_dim2 -> empty .)
    TRUE            reduce using rule 126 (sem_check_dim2 -> empty .)
    FALSE           reduce using rule 126 (sem_check_dim2 -> empty .)


state 286

    (77) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .

    ID              reduce using rule 77 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    MATRIX          reduce using rule 77 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    IF              reduce using rule 77 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    RETURN          reduce using rule 77 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    WHILE           reduce using rule 77 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    READ            reduce using rule 77 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    WRITE           reduce using rule 77 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    RIGHT_BRACE     reduce using rule 77 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)


state 287

    (114) sem_gosub -> empty .

    ID              reduce using rule 114 (sem_gosub -> empty .)
    MATRIX          reduce using rule 114 (sem_gosub -> empty .)
    IF              reduce using rule 114 (sem_gosub -> empty .)
    RETURN          reduce using rule 114 (sem_gosub -> empty .)
    WHILE           reduce using rule 114 (sem_gosub -> empty .)
    READ            reduce using rule 114 (sem_gosub -> empty .)
    WRITE           reduce using rule 114 (sem_gosub -> empty .)
    RIGHT_BRACE     reduce using rule 114 (sem_gosub -> empty .)


state 288

    (45) rows -> row COMMA rows .

    RIGHT_BRACE     reduce using rule 45 (rows -> row COMMA rows .)


state 289

    (46) row -> LEFT_BRACKET col RIGHT_BRACKET . sem_push_row sem_clear_row
    (130) sem_push_row -> . empty
    (85) empty -> .

    COMMA           reduce using rule 85 (empty -> .)
    RIGHT_BRACE     reduce using rule 85 (empty -> .)

    sem_push_row                   shift and go to state 298
    empty                          shift and go to state 299

state 290

    (47) col -> CTE_I sem_push_col . col
    (47) col -> . CTE_I sem_push_col col
    (48) col -> . CTE_B sem_push_col col
    (49) col -> . COMMA col
    (50) col -> . empty
    (85) empty -> .

    CTE_I           shift and go to state 271
    CTE_B           shift and go to state 272
    COMMA           shift and go to state 273
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)

    col                            shift and go to state 300
    empty                          shift and go to state 274

state 291

    (131) sem_push_col -> empty .

    CTE_I           reduce using rule 131 (sem_push_col -> empty .)
    CTE_B           reduce using rule 131 (sem_push_col -> empty .)
    COMMA           reduce using rule 131 (sem_push_col -> empty .)
    RIGHT_BRACKET   reduce using rule 131 (sem_push_col -> empty .)


state 292

    (48) col -> CTE_B sem_push_col . col
    (47) col -> . CTE_I sem_push_col col
    (48) col -> . CTE_B sem_push_col col
    (49) col -> . COMMA col
    (50) col -> . empty
    (85) empty -> .

    CTE_I           shift and go to state 271
    CTE_B           shift and go to state 272
    COMMA           shift and go to state 273
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)

    col                            shift and go to state 301
    empty                          shift and go to state 274

state 293

    (49) col -> COMMA col .

    RIGHT_BRACKET   reduce using rule 49 (col -> COMMA col .)


state 294

    (75) condition_1 -> ELSE sem_else_condition block .

    ID              reduce using rule 75 (condition_1 -> ELSE sem_else_condition block .)
    MATRIX          reduce using rule 75 (condition_1 -> ELSE sem_else_condition block .)
    IF              reduce using rule 75 (condition_1 -> ELSE sem_else_condition block .)
    RETURN          reduce using rule 75 (condition_1 -> ELSE sem_else_condition block .)
    WHILE           reduce using rule 75 (condition_1 -> ELSE sem_else_condition block .)
    READ            reduce using rule 75 (condition_1 -> ELSE sem_else_condition block .)
    WRITE           reduce using rule 75 (condition_1 -> ELSE sem_else_condition block .)
    RIGHT_BRACE     reduce using rule 75 (condition_1 -> ELSE sem_else_condition block .)


state 295

    (19) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end . sem_count_params sem_gosub_assign
    (113) sem_count_params -> . empty
    (85) empty -> .

    MULTIPLY        reduce using rule 85 (empty -> .)
    DIVIDE          reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    IS_EQUAL_TO     reduce using rule 85 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 85 (empty -> .)
    GREATER_THAN    reduce using rule 85 (empty -> .)
    LESS_THAN       reduce using rule 85 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    sem_count_params               shift and go to state 302
    empty                          shift and go to state 248

state 296

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .

    MATRIX          reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    INT             reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    DOUBLE          reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    BOOL            reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    FUNCTION        reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    MAIN            reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    ID              reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    IF              reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    RETURN          reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    WHILE           reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    READ            reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    WRITE           reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)


state 297

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp . RIGHT_BRACKET sem_ver_dim2

    RIGHT_BRACKET   shift and go to state 303


state 298

    (46) row -> LEFT_BRACKET col RIGHT_BRACKET sem_push_row . sem_clear_row
    (129) sem_clear_row -> . empty
    (85) empty -> .

    COMMA           reduce using rule 85 (empty -> .)
    RIGHT_BRACE     reduce using rule 85 (empty -> .)

    sem_clear_row                  shift and go to state 304
    empty                          shift and go to state 305

state 299

    (130) sem_push_row -> empty .

    COMMA           reduce using rule 130 (sem_push_row -> empty .)
    RIGHT_BRACE     reduce using rule 130 (sem_push_row -> empty .)


state 300

    (47) col -> CTE_I sem_push_col col .

    RIGHT_BRACKET   reduce using rule 47 (col -> CTE_I sem_push_col col .)


state 301

    (48) col -> CTE_B sem_push_col col .

    RIGHT_BRACKET   reduce using rule 48 (col -> CTE_B sem_push_col col .)


state 302

    (19) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params . sem_gosub_assign
    (115) sem_gosub_assign -> . empty
    (85) empty -> .

    MULTIPLY        reduce using rule 85 (empty -> .)
    DIVIDE          reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    IS_EQUAL_TO     reduce using rule 85 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 85 (empty -> .)
    GREATER_THAN    reduce using rule 85 (empty -> .)
    LESS_THAN       reduce using rule 85 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    sem_gosub_assign               shift and go to state 306
    empty                          shift and go to state 307

state 303

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET . sem_ver_dim2
    (127) sem_ver_dim2 -> . empty
    (85) empty -> .

    ASSIGN          reduce using rule 85 (empty -> .)
    MULTIPLY        reduce using rule 85 (empty -> .)
    DIVIDE          reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    IS_EQUAL_TO     reduce using rule 85 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 85 (empty -> .)
    GREATER_THAN    reduce using rule 85 (empty -> .)
    LESS_THAN       reduce using rule 85 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RIGHT_PAR       reduce using rule 85 (empty -> .)
    RIGHT_BRACKET   reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    sem_ver_dim2                   shift and go to state 308
    empty                          shift and go to state 309

state 304

    (46) row -> LEFT_BRACKET col RIGHT_BRACKET sem_push_row sem_clear_row .

    COMMA           reduce using rule 46 (row -> LEFT_BRACKET col RIGHT_BRACKET sem_push_row sem_clear_row .)
    RIGHT_BRACE     reduce using rule 46 (row -> LEFT_BRACKET col RIGHT_BRACKET sem_push_row sem_clear_row .)


state 305

    (129) sem_clear_row -> empty .

    COMMA           reduce using rule 129 (sem_clear_row -> empty .)
    RIGHT_BRACE     reduce using rule 129 (sem_clear_row -> empty .)


state 306

    (19) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .

    MULTIPLY        reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    DIVIDE          reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    PLUS            reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    MINUS           reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    IS_EQUAL_TO     reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    NOT_EQUAL_TO    reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    GREATER_THAN    reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    LESS_THAN       reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    AND             reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    OR              reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    SEMICOLON       reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    RIGHT_PAR       reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    RIGHT_BRACKET   reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)
    COMMA           reduce using rule 19 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub_assign .)


state 307

    (115) sem_gosub_assign -> empty .

    MULTIPLY        reduce using rule 115 (sem_gosub_assign -> empty .)
    DIVIDE          reduce using rule 115 (sem_gosub_assign -> empty .)
    PLUS            reduce using rule 115 (sem_gosub_assign -> empty .)
    MINUS           reduce using rule 115 (sem_gosub_assign -> empty .)
    IS_EQUAL_TO     reduce using rule 115 (sem_gosub_assign -> empty .)
    NOT_EQUAL_TO    reduce using rule 115 (sem_gosub_assign -> empty .)
    GREATER_THAN    reduce using rule 115 (sem_gosub_assign -> empty .)
    LESS_THAN       reduce using rule 115 (sem_gosub_assign -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 115 (sem_gosub_assign -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 115 (sem_gosub_assign -> empty .)
    AND             reduce using rule 115 (sem_gosub_assign -> empty .)
    OR              reduce using rule 115 (sem_gosub_assign -> empty .)
    SEMICOLON       reduce using rule 115 (sem_gosub_assign -> empty .)
    RIGHT_PAR       reduce using rule 115 (sem_gosub_assign -> empty .)
    RIGHT_BRACKET   reduce using rule 115 (sem_gosub_assign -> empty .)
    COMMA           reduce using rule 115 (sem_gosub_assign -> empty .)


state 308

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .

    ASSIGN          reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    MULTIPLY        reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    DIVIDE          reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    PLUS            reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    MINUS           reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    IS_EQUAL_TO     reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    NOT_EQUAL_TO    reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    GREATER_THAN    reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    LESS_THAN       reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    AND             reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    OR              reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    SEMICOLON       reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    RIGHT_PAR       reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    RIGHT_BRACKET   reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    COMMA           reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)


state 309

    (127) sem_ver_dim2 -> empty .

    ASSIGN          reduce using rule 127 (sem_ver_dim2 -> empty .)
    MULTIPLY        reduce using rule 127 (sem_ver_dim2 -> empty .)
    DIVIDE          reduce using rule 127 (sem_ver_dim2 -> empty .)
    PLUS            reduce using rule 127 (sem_ver_dim2 -> empty .)
    MINUS           reduce using rule 127 (sem_ver_dim2 -> empty .)
    IS_EQUAL_TO     reduce using rule 127 (sem_ver_dim2 -> empty .)
    NOT_EQUAL_TO    reduce using rule 127 (sem_ver_dim2 -> empty .)
    GREATER_THAN    reduce using rule 127 (sem_ver_dim2 -> empty .)
    LESS_THAN       reduce using rule 127 (sem_ver_dim2 -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 127 (sem_ver_dim2 -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 127 (sem_ver_dim2 -> empty .)
    AND             reduce using rule 127 (sem_ver_dim2 -> empty .)
    OR              reduce using rule 127 (sem_ver_dim2 -> empty .)
    SEMICOLON       reduce using rule 127 (sem_ver_dim2 -> empty .)
    RIGHT_PAR       reduce using rule 127 (sem_ver_dim2 -> empty .)
    RIGHT_BRACKET   reduce using rule 127 (sem_ver_dim2 -> empty .)
    COMMA           reduce using rule 127 (sem_ver_dim2 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MATRIX in state 5 resolved as shift
WARNING: shift/reduce conflict for MATRIX in state 6 resolved as shift
WARNING: shift/reduce conflict for MATRIX in state 44 resolved as shift

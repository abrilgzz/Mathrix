Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD_COLS
    ADD_ROWS
    CTE_S
    FIND_DETERMINANT
    GOTO
    GOTOF
    GOTOT
    MULTIPLY_COLS
    MULTIPLY_MATRIX
    MULTIPLY_ROWS
    PRINT_MATRIX
    SWAP_COLS
    SWAP_ROWS
    TRANSPOSE_MATRIX

Grammar

Rule 0     S' -> start
Rule 1     start -> sem_start_program global_declaration
Rule 2     global_declaration -> var_declaration global_declaration
Rule 3     global_declaration -> func_declaration
Rule 4     var_declaration -> var_type ID sem_add_var array SEMICOLON
Rule 5     var_declaration -> empty
Rule 6     array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array
Rule 7     array -> empty
Rule 8     func_declaration -> func_signature func_declaration
Rule 9     func_declaration -> main
Rule 10    func_signature -> FUNCTION func_type array func_signature_1 sem_end_func
Rule 11    func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block
Rule 12    param_declaration -> var_type array ID sem_add_param
Rule 13    param_declaration -> var_type array ID sem_add_param COMMA param_declaration
Rule 14    param_declaration -> empty
Rule 15    var_type -> INT sem_get_type
Rule 16    var_type -> DOUBLE sem_get_type
Rule 17    var_type -> BOOL sem_get_type
Rule 18    var_cte -> CTE_I sem_push_constant_int
Rule 19    var_cte -> CTE_D sem_push_constant_double
Rule 20    var_cte -> cte_b sem_push_constant_bool
Rule 21    var_cte -> ID sem_push_operand array
Rule 22    var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
Rule 23    cte_b -> TRUE
Rule 24    cte_b -> FALSE
Rule 25    func_type -> INT sem_get_type
Rule 26    func_type -> DOUBLE sem_get_type
Rule 27    func_type -> BOOL sem_get_type
Rule 28    func_type -> VOID sem_get_type
Rule 29    block -> LEFT_BRACE block_1
Rule 30    block_1 -> statement block_1
Rule 31    block_1 -> block_2
Rule 32    block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3
Rule 33    block_2 -> block_3
Rule 34    block_3 -> RIGHT_BRACE
Rule 35    statement -> var_declaration
Rule 36    statement -> assignment
Rule 37    statement -> condition
Rule 38    statement -> function_call SEMICOLON
Rule 39    statement -> while_cycle
Rule 40    statement -> read
Rule 41    statement -> write
Rule 42    assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
Rule 43    mega_exp -> hyper_exp mega_exp_1
Rule 44    mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical
Rule 45    mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical
Rule 46    mega_exp_1 -> empty
Rule 47    hyper_exp -> exp hyper_exp_1
Rule 48    hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 49    hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 50    hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational
Rule 51    hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational
Rule 52    hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 53    hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 54    hyper_exp_1 -> empty
Rule 55    exp -> term sem_top_term
Rule 56    exp -> term sem_top_term PLUS sem_push_operator exp
Rule 57    exp -> term sem_top_term MINUS sem_push_operator exp
Rule 58    term -> factor sem_top_factor
Rule 59    term -> factor sem_top_factor MULTIPLY sem_push_operator term
Rule 60    term -> factor sem_top_factor DIVIDE sem_push_operator term
Rule 61    factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
Rule 62    factor -> var_cte
Rule 63    factor -> PLUS sem_push_operator var_cte
Rule 64    factor -> MINUS sem_push_operator var_cte
Rule 65    condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
Rule 66    condition_1 -> ELSE sem_else_condition block
Rule 67    condition_1 -> empty
Rule 68    function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
Rule 69    param_call -> mega_exp sem_check_param
Rule 70    param_call -> mega_exp sem_check_param COMMA param_call
Rule 71    param_call -> empty
Rule 72    while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
Rule 73    read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
Rule 74    write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
Rule 75    main -> MAIN sem_fill_goto_main block sem_end_main
Rule 76    empty -> <empty>
Rule 77    sem_get_type -> empty
Rule 78    sem_add_func -> empty
Rule 79    sem_end_func -> empty
Rule 80    sem_add_var -> empty
Rule 81    sem_push_operator -> empty
Rule 82    sem_push_operand -> empty
Rule 83    sem_push_constant_int -> empty
Rule 84    sem_push_constant_double -> empty
Rule 85    sem_push_constant_bool -> empty
Rule 86    sem_top_factor -> empty
Rule 87    sem_top_term -> empty
Rule 88    sem_false_bottom_begin -> empty
Rule 89    sem_false_bottom_end -> empty
Rule 90    sem_assign_value -> empty
Rule 91    sem_read_write -> empty
Rule 92    sem_return_function -> empty
Rule 93    sem_top_logical -> <empty>
Rule 94    sem_top_relational -> <empty>
Rule 95    sem_end_condition -> empty
Rule 96    sem_fill_gotof -> empty
Rule 97    sem_else_condition -> empty
Rule 98    sem_start_while -> empty
Rule 99    sem_end_while -> empty
Rule 100   sem_add_param -> empty
Rule 101   sem_check_function -> empty
Rule 102   sem_create_era -> empty
Rule 103   sem_check_param -> empty
Rule 104   sem_count_params -> empty
Rule 105   sem_gosub -> empty
Rule 106   sem_start_program -> empty
Rule 107   sem_fill_goto_main -> empty
Rule 108   sem_end_main -> empty

Terminals, with rules where they appear

ADD_COLS             : 
ADD_ROWS             : 
AND                  : 44
ASSIGN               : 42
BOOL                 : 17 27
COMMA                : 13 70
CTE_D                : 19
CTE_I                : 18
CTE_S                : 
DIVIDE               : 60
DOUBLE               : 16 26
ELSE                 : 66
FALSE                : 24
FIND_DETERMINANT     : 
FUNCTION             : 10
GOTO                 : 
GOTOF                : 
GOTOT                : 
GREATER_THAN         : 50
GREATER_THAN_OR_EQUAL_TO : 52
ID                   : 4 11 12 13 21 22 42 68
IF                   : 65
INT                  : 15 25
IS_EQUAL_TO          : 48
LEFT_BRACE           : 29
LEFT_BRACKET         : 6
LEFT_PAR             : 11 22 61 65 68 72 73 74
LESS_THAN            : 51
LESS_THAN_OR_EQUAL_TO : 53
MAIN                 : 75
MINUS                : 57 64
MULTIPLY             : 59
MULTIPLY_COLS        : 
MULTIPLY_MATRIX      : 
MULTIPLY_ROWS        : 
NOT_EQUAL_TO         : 49
OR                   : 45
PLUS                 : 56 63
PRINT_MATRIX         : 
READ                 : 73
RETURN               : 32
RIGHT_BRACE          : 34
RIGHT_BRACKET        : 6
RIGHT_PAR            : 11 22 61 65 68 72 73 74
SEMICOLON            : 4 32 38 42 73 74
SWAP_COLS            : 
SWAP_ROWS            : 
TRANSPOSE_MATRIX     : 
TRUE                 : 23
VOID                 : 28
WHILE                : 72
WRITE                : 74
error                : 

Nonterminals, with rules where they appear

array                : 4 6 10 12 13 21
assignment           : 36
block                : 11 65 66 72 75
block_1              : 29 30
block_2              : 31
block_3              : 32 33
condition            : 37
condition_1          : 65
cte_b                : 20
empty                : 5 7 14 46 54 67 71 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 95 96 97 98 99 100 101 102 103 104 105 106 107 108
exp                  : 47 48 49 50 51 52 53 56 57
factor               : 58 59 60
func_declaration     : 3 8
func_signature       : 8
func_signature_1     : 10
func_type            : 10
function_call        : 38
global_declaration   : 1 2
hyper_exp            : 43
hyper_exp_1          : 47
main                 : 9
mega_exp             : 6 32 42 44 45 61 65 69 70 72 73 74
mega_exp_1           : 43
param_call           : 22 68 70
param_declaration    : 11 13
read                 : 40
sem_add_func         : 11
sem_add_param        : 12 13
sem_add_var          : 4
sem_assign_value     : 42
sem_check_function   : 22 68
sem_check_param      : 69 70
sem_count_params     : 22 68
sem_create_era       : 22 68
sem_else_condition   : 66
sem_end_condition    : 65 72
sem_end_func         : 10
sem_end_main         : 75
sem_end_while        : 72
sem_false_bottom_begin : 22 61
sem_false_bottom_end : 22 61
sem_fill_goto_main   : 75
sem_fill_gotof       : 65
sem_get_type         : 15 16 17 25 26 27 28
sem_gosub            : 22 68
sem_push_constant_bool : 20
sem_push_constant_double : 19
sem_push_constant_int : 18
sem_push_operand     : 21 42
sem_push_operator    : 32 42 44 45 48 49 50 51 52 53 56 57 59 60 63 64 73 74
sem_read_write       : 73 74
sem_return_function  : 32
sem_start_program    : 1
sem_start_while      : 72
sem_top_factor       : 58 59 60
sem_top_logical      : 44 45
sem_top_relational   : 48 49 50 51 52 53
sem_top_term         : 55 56 57
start                : 0
statement            : 30
term                 : 55 56 57 59 60
var_cte              : 62 63 64
var_declaration      : 2 35
var_type             : 4 12 13
while_cycle          : 39
write                : 41

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . sem_start_program global_declaration
    (106) sem_start_program -> . empty
    (76) empty -> .

    INT             reduce using rule 76 (empty -> .)
    DOUBLE          reduce using rule 76 (empty -> .)
    BOOL            reduce using rule 76 (empty -> .)
    FUNCTION        reduce using rule 76 (empty -> .)
    MAIN            reduce using rule 76 (empty -> .)

    start                          shift and go to state 1
    sem_start_program              shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> sem_start_program . global_declaration
    (2) global_declaration -> . var_declaration global_declaration
    (3) global_declaration -> . func_declaration
    (4) var_declaration -> . var_type ID sem_add_var array SEMICOLON
    (5) var_declaration -> . empty
    (8) func_declaration -> . func_signature func_declaration
    (9) func_declaration -> . main
    (15) var_type -> . INT sem_get_type
    (16) var_type -> . DOUBLE sem_get_type
    (17) var_type -> . BOOL sem_get_type
    (76) empty -> .
    (10) func_signature -> . FUNCTION func_type array func_signature_1 sem_end_func
    (75) main -> . MAIN sem_fill_goto_main block sem_end_main

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    FUNCTION        shift and go to state 14
    MAIN            shift and go to state 15

  ! INT             [ reduce using rule 76 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 76 (empty -> .) ]
  ! BOOL            [ reduce using rule 76 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 76 (empty -> .) ]
  ! MAIN            [ reduce using rule 76 (empty -> .) ]

    global_declaration             shift and go to state 4
    var_declaration                shift and go to state 5
    func_declaration               shift and go to state 6
    var_type                       shift and go to state 7
    empty                          shift and go to state 8
    func_signature                 shift and go to state 9
    main                           shift and go to state 10

state 3

    (106) sem_start_program -> empty .

    INT             reduce using rule 106 (sem_start_program -> empty .)
    DOUBLE          reduce using rule 106 (sem_start_program -> empty .)
    BOOL            reduce using rule 106 (sem_start_program -> empty .)
    FUNCTION        reduce using rule 106 (sem_start_program -> empty .)
    MAIN            reduce using rule 106 (sem_start_program -> empty .)


state 4

    (1) start -> sem_start_program global_declaration .

    $end            reduce using rule 1 (start -> sem_start_program global_declaration .)


state 5

    (2) global_declaration -> var_declaration . global_declaration
    (2) global_declaration -> . var_declaration global_declaration
    (3) global_declaration -> . func_declaration
    (4) var_declaration -> . var_type ID sem_add_var array SEMICOLON
    (5) var_declaration -> . empty
    (8) func_declaration -> . func_signature func_declaration
    (9) func_declaration -> . main
    (15) var_type -> . INT sem_get_type
    (16) var_type -> . DOUBLE sem_get_type
    (17) var_type -> . BOOL sem_get_type
    (76) empty -> .
    (10) func_signature -> . FUNCTION func_type array func_signature_1 sem_end_func
    (75) main -> . MAIN sem_fill_goto_main block sem_end_main

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    FUNCTION        shift and go to state 14
    MAIN            shift and go to state 15

  ! INT             [ reduce using rule 76 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 76 (empty -> .) ]
  ! BOOL            [ reduce using rule 76 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 76 (empty -> .) ]
  ! MAIN            [ reduce using rule 76 (empty -> .) ]

    var_declaration                shift and go to state 5
    global_declaration             shift and go to state 16
    func_declaration               shift and go to state 6
    var_type                       shift and go to state 7
    empty                          shift and go to state 8
    func_signature                 shift and go to state 9
    main                           shift and go to state 10

state 6

    (3) global_declaration -> func_declaration .

    $end            reduce using rule 3 (global_declaration -> func_declaration .)


state 7

    (4) var_declaration -> var_type . ID sem_add_var array SEMICOLON

    ID              shift and go to state 17


state 8

    (5) var_declaration -> empty .

    INT             reduce using rule 5 (var_declaration -> empty .)
    DOUBLE          reduce using rule 5 (var_declaration -> empty .)
    BOOL            reduce using rule 5 (var_declaration -> empty .)
    FUNCTION        reduce using rule 5 (var_declaration -> empty .)
    MAIN            reduce using rule 5 (var_declaration -> empty .)
    RETURN          reduce using rule 5 (var_declaration -> empty .)
    ID              reduce using rule 5 (var_declaration -> empty .)
    IF              reduce using rule 5 (var_declaration -> empty .)
    WHILE           reduce using rule 5 (var_declaration -> empty .)
    READ            reduce using rule 5 (var_declaration -> empty .)
    WRITE           reduce using rule 5 (var_declaration -> empty .)
    RIGHT_BRACE     reduce using rule 5 (var_declaration -> empty .)


state 9

    (8) func_declaration -> func_signature . func_declaration
    (8) func_declaration -> . func_signature func_declaration
    (9) func_declaration -> . main
    (10) func_signature -> . FUNCTION func_type array func_signature_1 sem_end_func
    (75) main -> . MAIN sem_fill_goto_main block sem_end_main

    FUNCTION        shift and go to state 14
    MAIN            shift and go to state 15

    func_signature                 shift and go to state 9
    func_declaration               shift and go to state 18
    main                           shift and go to state 10

state 10

    (9) func_declaration -> main .

    $end            reduce using rule 9 (func_declaration -> main .)


state 11

    (15) var_type -> INT . sem_get_type
    (77) sem_get_type -> . empty
    (76) empty -> .

    ID              reduce using rule 76 (empty -> .)
    LEFT_BRACKET    reduce using rule 76 (empty -> .)

    sem_get_type                   shift and go to state 19
    empty                          shift and go to state 20

state 12

    (16) var_type -> DOUBLE . sem_get_type
    (77) sem_get_type -> . empty
    (76) empty -> .

    ID              reduce using rule 76 (empty -> .)
    LEFT_BRACKET    reduce using rule 76 (empty -> .)

    sem_get_type                   shift and go to state 21
    empty                          shift and go to state 20

state 13

    (17) var_type -> BOOL . sem_get_type
    (77) sem_get_type -> . empty
    (76) empty -> .

    ID              reduce using rule 76 (empty -> .)
    LEFT_BRACKET    reduce using rule 76 (empty -> .)

    sem_get_type                   shift and go to state 22
    empty                          shift and go to state 20

state 14

    (10) func_signature -> FUNCTION . func_type array func_signature_1 sem_end_func
    (25) func_type -> . INT sem_get_type
    (26) func_type -> . DOUBLE sem_get_type
    (27) func_type -> . BOOL sem_get_type
    (28) func_type -> . VOID sem_get_type

    INT             shift and go to state 24
    DOUBLE          shift and go to state 25
    BOOL            shift and go to state 26
    VOID            shift and go to state 27

    func_type                      shift and go to state 23

state 15

    (75) main -> MAIN . sem_fill_goto_main block sem_end_main
    (107) sem_fill_goto_main -> . empty
    (76) empty -> .

    LEFT_BRACE      reduce using rule 76 (empty -> .)

    sem_fill_goto_main             shift and go to state 28
    empty                          shift and go to state 29

state 16

    (2) global_declaration -> var_declaration global_declaration .

    $end            reduce using rule 2 (global_declaration -> var_declaration global_declaration .)


state 17

    (4) var_declaration -> var_type ID . sem_add_var array SEMICOLON
    (80) sem_add_var -> . empty
    (76) empty -> .

    LEFT_BRACKET    reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)

    sem_add_var                    shift and go to state 30
    empty                          shift and go to state 31

state 18

    (8) func_declaration -> func_signature func_declaration .

    $end            reduce using rule 8 (func_declaration -> func_signature func_declaration .)


state 19

    (15) var_type -> INT sem_get_type .

    ID              reduce using rule 15 (var_type -> INT sem_get_type .)
    LEFT_BRACKET    reduce using rule 15 (var_type -> INT sem_get_type .)


state 20

    (77) sem_get_type -> empty .

    ID              reduce using rule 77 (sem_get_type -> empty .)
    LEFT_BRACKET    reduce using rule 77 (sem_get_type -> empty .)


state 21

    (16) var_type -> DOUBLE sem_get_type .

    ID              reduce using rule 16 (var_type -> DOUBLE sem_get_type .)
    LEFT_BRACKET    reduce using rule 16 (var_type -> DOUBLE sem_get_type .)


state 22

    (17) var_type -> BOOL sem_get_type .

    ID              reduce using rule 17 (var_type -> BOOL sem_get_type .)
    LEFT_BRACKET    reduce using rule 17 (var_type -> BOOL sem_get_type .)


state 23

    (10) func_signature -> FUNCTION func_type . array func_signature_1 sem_end_func
    (6) array -> . LEFT_BRACKET mega_exp RIGHT_BRACKET array
    (7) array -> . empty
    (76) empty -> .

    LEFT_BRACKET    shift and go to state 33
    ID              reduce using rule 76 (empty -> .)

    array                          shift and go to state 32
    empty                          shift and go to state 34

state 24

    (25) func_type -> INT . sem_get_type
    (77) sem_get_type -> . empty
    (76) empty -> .

    LEFT_BRACKET    reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    sem_get_type                   shift and go to state 35
    empty                          shift and go to state 20

state 25

    (26) func_type -> DOUBLE . sem_get_type
    (77) sem_get_type -> . empty
    (76) empty -> .

    LEFT_BRACKET    reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    sem_get_type                   shift and go to state 36
    empty                          shift and go to state 20

state 26

    (27) func_type -> BOOL . sem_get_type
    (77) sem_get_type -> . empty
    (76) empty -> .

    LEFT_BRACKET    reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    sem_get_type                   shift and go to state 37
    empty                          shift and go to state 20

state 27

    (28) func_type -> VOID . sem_get_type
    (77) sem_get_type -> . empty
    (76) empty -> .

    LEFT_BRACKET    reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    sem_get_type                   shift and go to state 38
    empty                          shift and go to state 20

state 28

    (75) main -> MAIN sem_fill_goto_main . block sem_end_main
    (29) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 40

    block                          shift and go to state 39

state 29

    (107) sem_fill_goto_main -> empty .

    LEFT_BRACE      reduce using rule 107 (sem_fill_goto_main -> empty .)


state 30

    (4) var_declaration -> var_type ID sem_add_var . array SEMICOLON
    (6) array -> . LEFT_BRACKET mega_exp RIGHT_BRACKET array
    (7) array -> . empty
    (76) empty -> .

    LEFT_BRACKET    shift and go to state 33
    SEMICOLON       reduce using rule 76 (empty -> .)

    array                          shift and go to state 41
    empty                          shift and go to state 34

state 31

    (80) sem_add_var -> empty .

    LEFT_BRACKET    reduce using rule 80 (sem_add_var -> empty .)
    SEMICOLON       reduce using rule 80 (sem_add_var -> empty .)


state 32

    (10) func_signature -> FUNCTION func_type array . func_signature_1 sem_end_func
    (11) func_signature_1 -> . ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block

    ID              shift and go to state 43

    func_signature_1               shift and go to state 42

state 33

    (6) array -> LEFT_BRACKET . mega_exp RIGHT_BRACKET array
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    mega_exp                       shift and go to state 44
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 34

    (7) array -> empty .

    ID              reduce using rule 7 (array -> empty .)
    SEMICOLON       reduce using rule 7 (array -> empty .)
    MULTIPLY        reduce using rule 7 (array -> empty .)
    DIVIDE          reduce using rule 7 (array -> empty .)
    PLUS            reduce using rule 7 (array -> empty .)
    MINUS           reduce using rule 7 (array -> empty .)
    IS_EQUAL_TO     reduce using rule 7 (array -> empty .)
    NOT_EQUAL_TO    reduce using rule 7 (array -> empty .)
    GREATER_THAN    reduce using rule 7 (array -> empty .)
    LESS_THAN       reduce using rule 7 (array -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 7 (array -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 7 (array -> empty .)
    AND             reduce using rule 7 (array -> empty .)
    OR              reduce using rule 7 (array -> empty .)
    RIGHT_BRACKET   reduce using rule 7 (array -> empty .)
    RIGHT_PAR       reduce using rule 7 (array -> empty .)
    COMMA           reduce using rule 7 (array -> empty .)


state 35

    (25) func_type -> INT sem_get_type .

    LEFT_BRACKET    reduce using rule 25 (func_type -> INT sem_get_type .)
    ID              reduce using rule 25 (func_type -> INT sem_get_type .)


state 36

    (26) func_type -> DOUBLE sem_get_type .

    LEFT_BRACKET    reduce using rule 26 (func_type -> DOUBLE sem_get_type .)
    ID              reduce using rule 26 (func_type -> DOUBLE sem_get_type .)


state 37

    (27) func_type -> BOOL sem_get_type .

    LEFT_BRACKET    reduce using rule 27 (func_type -> BOOL sem_get_type .)
    ID              reduce using rule 27 (func_type -> BOOL sem_get_type .)


state 38

    (28) func_type -> VOID sem_get_type .

    LEFT_BRACKET    reduce using rule 28 (func_type -> VOID sem_get_type .)
    ID              reduce using rule 28 (func_type -> VOID sem_get_type .)


state 39

    (75) main -> MAIN sem_fill_goto_main block . sem_end_main
    (108) sem_end_main -> . empty
    (76) empty -> .

    $end            reduce using rule 76 (empty -> .)

    sem_end_main                   shift and go to state 59
    empty                          shift and go to state 60

state 40

    (29) block -> LEFT_BRACE . block_1
    (30) block_1 -> . statement block_1
    (31) block_1 -> . block_2
    (35) statement -> . var_declaration
    (36) statement -> . assignment
    (37) statement -> . condition
    (38) statement -> . function_call SEMICOLON
    (39) statement -> . while_cycle
    (40) statement -> . read
    (41) statement -> . write
    (32) block_2 -> . RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3
    (33) block_2 -> . block_3
    (4) var_declaration -> . var_type ID sem_add_var array SEMICOLON
    (5) var_declaration -> . empty
    (42) assignment -> . ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (65) condition -> . IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (68) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (72) while_cycle -> . WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (73) read -> . READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (74) write -> . WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (34) block_3 -> . RIGHT_BRACE
    (15) var_type -> . INT sem_get_type
    (16) var_type -> . DOUBLE sem_get_type
    (17) var_type -> . BOOL sem_get_type
    (76) empty -> .

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RIGHT_BRACE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RETURN          shift and go to state 71
    ID              shift and go to state 73
    IF              shift and go to state 74
    WHILE           shift and go to state 75
    READ            shift and go to state 76
    WRITE           shift and go to state 77
    RIGHT_BRACE     shift and go to state 78
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13

  ! RETURN          [ reduce using rule 76 (empty -> .) ]
  ! ID              [ reduce using rule 76 (empty -> .) ]
  ! IF              [ reduce using rule 76 (empty -> .) ]
  ! WHILE           [ reduce using rule 76 (empty -> .) ]
  ! READ            [ reduce using rule 76 (empty -> .) ]
  ! WRITE           [ reduce using rule 76 (empty -> .) ]
  ! RIGHT_BRACE     [ reduce using rule 76 (empty -> .) ]
  ! INT             [ reduce using rule 76 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 76 (empty -> .) ]
  ! BOOL            [ reduce using rule 76 (empty -> .) ]

    block_1                        shift and go to state 61
    statement                      shift and go to state 62
    block_2                        shift and go to state 63
    var_declaration                shift and go to state 64
    assignment                     shift and go to state 65
    condition                      shift and go to state 66
    function_call                  shift and go to state 67
    while_cycle                    shift and go to state 68
    read                           shift and go to state 69
    write                          shift and go to state 70
    block_3                        shift and go to state 72
    var_type                       shift and go to state 7
    empty                          shift and go to state 8

state 41

    (4) var_declaration -> var_type ID sem_add_var array . SEMICOLON

    SEMICOLON       shift and go to state 79


state 42

    (10) func_signature -> FUNCTION func_type array func_signature_1 . sem_end_func
    (79) sem_end_func -> . empty
    (76) empty -> .

    FUNCTION        reduce using rule 76 (empty -> .)
    MAIN            reduce using rule 76 (empty -> .)

    sem_end_func                   shift and go to state 80
    empty                          shift and go to state 81

state 43

    (11) func_signature_1 -> ID . sem_add_func LEFT_PAR param_declaration RIGHT_PAR block
    (78) sem_add_func -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)

    sem_add_func                   shift and go to state 82
    empty                          shift and go to state 83

state 44

    (6) array -> LEFT_BRACKET mega_exp . RIGHT_BRACKET array

    RIGHT_BRACKET   shift and go to state 84


state 45

    (43) mega_exp -> hyper_exp . mega_exp_1
    (44) mega_exp_1 -> . AND sem_push_operator mega_exp sem_top_logical
    (45) mega_exp_1 -> . OR sem_push_operator mega_exp sem_top_logical
    (46) mega_exp_1 -> . empty
    (76) empty -> .

    AND             shift and go to state 86
    OR              shift and go to state 87
    RIGHT_BRACKET   reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    mega_exp_1                     shift and go to state 85
    empty                          shift and go to state 88

state 46

    (47) hyper_exp -> exp . hyper_exp_1
    (48) hyper_exp_1 -> . IS_EQUAL_TO sem_push_operator exp sem_top_relational
    (49) hyper_exp_1 -> . NOT_EQUAL_TO sem_push_operator exp sem_top_relational
    (50) hyper_exp_1 -> . GREATER_THAN sem_push_operator exp sem_top_relational
    (51) hyper_exp_1 -> . LESS_THAN sem_push_operator exp sem_top_relational
    (52) hyper_exp_1 -> . GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
    (53) hyper_exp_1 -> . LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
    (54) hyper_exp_1 -> . empty
    (76) empty -> .

    IS_EQUAL_TO     shift and go to state 90
    NOT_EQUAL_TO    shift and go to state 91
    GREATER_THAN    shift and go to state 92
    LESS_THAN       shift and go to state 93
    GREATER_THAN_OR_EQUAL_TO shift and go to state 94
    LESS_THAN_OR_EQUAL_TO shift and go to state 95
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    RIGHT_BRACKET   reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    hyper_exp_1                    shift and go to state 89
    empty                          shift and go to state 96

state 47

    (55) exp -> term . sem_top_term
    (56) exp -> term . sem_top_term PLUS sem_push_operator exp
    (57) exp -> term . sem_top_term MINUS sem_push_operator exp
    (87) sem_top_term -> . empty
    (76) empty -> .

    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    RIGHT_BRACKET   reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_top_term                   shift and go to state 97
    empty                          shift and go to state 98

state 48

    (63) factor -> PLUS . sem_push_operator var_cte
    (81) sem_push_operator -> . empty
    (76) empty -> .

    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 99
    empty                          shift and go to state 100

state 49

    (64) factor -> MINUS . sem_push_operator var_cte
    (81) sem_push_operator -> . empty
    (76) empty -> .

    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 101
    empty                          shift and go to state 100

state 50

    (58) term -> factor . sem_top_factor
    (59) term -> factor . sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> factor . sem_top_factor DIVIDE sem_push_operator term
    (86) sem_top_factor -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    RIGHT_BRACKET   reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_top_factor                 shift and go to state 102
    empty                          shift and go to state 103

state 51

    (61) factor -> LEFT_PAR . sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (88) sem_false_bottom_begin -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_false_bottom_begin         shift and go to state 104
    empty                          shift and go to state 105

state 52

    (62) factor -> var_cte .

    MULTIPLY        reduce using rule 62 (factor -> var_cte .)
    DIVIDE          reduce using rule 62 (factor -> var_cte .)
    PLUS            reduce using rule 62 (factor -> var_cte .)
    MINUS           reduce using rule 62 (factor -> var_cte .)
    IS_EQUAL_TO     reduce using rule 62 (factor -> var_cte .)
    NOT_EQUAL_TO    reduce using rule 62 (factor -> var_cte .)
    GREATER_THAN    reduce using rule 62 (factor -> var_cte .)
    LESS_THAN       reduce using rule 62 (factor -> var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 62 (factor -> var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 62 (factor -> var_cte .)
    AND             reduce using rule 62 (factor -> var_cte .)
    OR              reduce using rule 62 (factor -> var_cte .)
    RIGHT_BRACKET   reduce using rule 62 (factor -> var_cte .)
    RIGHT_PAR       reduce using rule 62 (factor -> var_cte .)
    SEMICOLON       reduce using rule 62 (factor -> var_cte .)
    COMMA           reduce using rule 62 (factor -> var_cte .)


state 53

    (18) var_cte -> CTE_I . sem_push_constant_int
    (83) sem_push_constant_int -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    RIGHT_BRACKET   reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_push_constant_int          shift and go to state 106
    empty                          shift and go to state 107

state 54

    (19) var_cte -> CTE_D . sem_push_constant_double
    (84) sem_push_constant_double -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    RIGHT_BRACKET   reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_push_constant_double       shift and go to state 108
    empty                          shift and go to state 109

state 55

    (20) var_cte -> cte_b . sem_push_constant_bool
    (85) sem_push_constant_bool -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    RIGHT_BRACKET   reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_push_constant_bool         shift and go to state 110
    empty                          shift and go to state 111

state 56

    (21) var_cte -> ID . sem_push_operand array
    (22) var_cte -> ID . sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (82) sem_push_operand -> . empty
    (101) sem_check_function -> . empty
    (76) empty -> .

    LEFT_BRACKET    reduce using rule 76 (empty -> .)
    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    RIGHT_BRACKET   reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)
    LEFT_PAR        reduce using rule 76 (empty -> .)

    sem_push_operand               shift and go to state 112
    sem_check_function             shift and go to state 113
    empty                          shift and go to state 114

state 57

    (23) cte_b -> TRUE .

    MULTIPLY        reduce using rule 23 (cte_b -> TRUE .)
    DIVIDE          reduce using rule 23 (cte_b -> TRUE .)
    PLUS            reduce using rule 23 (cte_b -> TRUE .)
    MINUS           reduce using rule 23 (cte_b -> TRUE .)
    IS_EQUAL_TO     reduce using rule 23 (cte_b -> TRUE .)
    NOT_EQUAL_TO    reduce using rule 23 (cte_b -> TRUE .)
    GREATER_THAN    reduce using rule 23 (cte_b -> TRUE .)
    LESS_THAN       reduce using rule 23 (cte_b -> TRUE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 23 (cte_b -> TRUE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 23 (cte_b -> TRUE .)
    AND             reduce using rule 23 (cte_b -> TRUE .)
    OR              reduce using rule 23 (cte_b -> TRUE .)
    RIGHT_BRACKET   reduce using rule 23 (cte_b -> TRUE .)
    RIGHT_PAR       reduce using rule 23 (cte_b -> TRUE .)
    SEMICOLON       reduce using rule 23 (cte_b -> TRUE .)
    COMMA           reduce using rule 23 (cte_b -> TRUE .)


state 58

    (24) cte_b -> FALSE .

    MULTIPLY        reduce using rule 24 (cte_b -> FALSE .)
    DIVIDE          reduce using rule 24 (cte_b -> FALSE .)
    PLUS            reduce using rule 24 (cte_b -> FALSE .)
    MINUS           reduce using rule 24 (cte_b -> FALSE .)
    IS_EQUAL_TO     reduce using rule 24 (cte_b -> FALSE .)
    NOT_EQUAL_TO    reduce using rule 24 (cte_b -> FALSE .)
    GREATER_THAN    reduce using rule 24 (cte_b -> FALSE .)
    LESS_THAN       reduce using rule 24 (cte_b -> FALSE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 24 (cte_b -> FALSE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 24 (cte_b -> FALSE .)
    AND             reduce using rule 24 (cte_b -> FALSE .)
    OR              reduce using rule 24 (cte_b -> FALSE .)
    RIGHT_BRACKET   reduce using rule 24 (cte_b -> FALSE .)
    RIGHT_PAR       reduce using rule 24 (cte_b -> FALSE .)
    SEMICOLON       reduce using rule 24 (cte_b -> FALSE .)
    COMMA           reduce using rule 24 (cte_b -> FALSE .)


state 59

    (75) main -> MAIN sem_fill_goto_main block sem_end_main .

    $end            reduce using rule 75 (main -> MAIN sem_fill_goto_main block sem_end_main .)


state 60

    (108) sem_end_main -> empty .

    $end            reduce using rule 108 (sem_end_main -> empty .)


state 61

    (29) block -> LEFT_BRACE block_1 .

    $end            reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    FUNCTION        reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    MAIN            reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    ELSE            reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    RETURN          reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    ID              reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    IF              reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    WHILE           reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    READ            reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    WRITE           reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    RIGHT_BRACE     reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    INT             reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    DOUBLE          reduce using rule 29 (block -> LEFT_BRACE block_1 .)
    BOOL            reduce using rule 29 (block -> LEFT_BRACE block_1 .)


state 62

    (30) block_1 -> statement . block_1
    (30) block_1 -> . statement block_1
    (31) block_1 -> . block_2
    (35) statement -> . var_declaration
    (36) statement -> . assignment
    (37) statement -> . condition
    (38) statement -> . function_call SEMICOLON
    (39) statement -> . while_cycle
    (40) statement -> . read
    (41) statement -> . write
    (32) block_2 -> . RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3
    (33) block_2 -> . block_3
    (4) var_declaration -> . var_type ID sem_add_var array SEMICOLON
    (5) var_declaration -> . empty
    (42) assignment -> . ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (65) condition -> . IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (68) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (72) while_cycle -> . WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (73) read -> . READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (74) write -> . WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (34) block_3 -> . RIGHT_BRACE
    (15) var_type -> . INT sem_get_type
    (16) var_type -> . DOUBLE sem_get_type
    (17) var_type -> . BOOL sem_get_type
    (76) empty -> .

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RIGHT_BRACE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RETURN          shift and go to state 71
    ID              shift and go to state 73
    IF              shift and go to state 74
    WHILE           shift and go to state 75
    READ            shift and go to state 76
    WRITE           shift and go to state 77
    RIGHT_BRACE     shift and go to state 78
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13

  ! RETURN          [ reduce using rule 76 (empty -> .) ]
  ! ID              [ reduce using rule 76 (empty -> .) ]
  ! IF              [ reduce using rule 76 (empty -> .) ]
  ! WHILE           [ reduce using rule 76 (empty -> .) ]
  ! READ            [ reduce using rule 76 (empty -> .) ]
  ! WRITE           [ reduce using rule 76 (empty -> .) ]
  ! RIGHT_BRACE     [ reduce using rule 76 (empty -> .) ]
  ! INT             [ reduce using rule 76 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 76 (empty -> .) ]
  ! BOOL            [ reduce using rule 76 (empty -> .) ]

    statement                      shift and go to state 62
    block_1                        shift and go to state 115
    block_2                        shift and go to state 63
    var_declaration                shift and go to state 64
    assignment                     shift and go to state 65
    condition                      shift and go to state 66
    function_call                  shift and go to state 67
    while_cycle                    shift and go to state 68
    read                           shift and go to state 69
    write                          shift and go to state 70
    block_3                        shift and go to state 72
    var_type                       shift and go to state 7
    empty                          shift and go to state 8

state 63

    (31) block_1 -> block_2 .

    $end            reduce using rule 31 (block_1 -> block_2 .)
    FUNCTION        reduce using rule 31 (block_1 -> block_2 .)
    MAIN            reduce using rule 31 (block_1 -> block_2 .)
    ELSE            reduce using rule 31 (block_1 -> block_2 .)
    RETURN          reduce using rule 31 (block_1 -> block_2 .)
    ID              reduce using rule 31 (block_1 -> block_2 .)
    IF              reduce using rule 31 (block_1 -> block_2 .)
    WHILE           reduce using rule 31 (block_1 -> block_2 .)
    READ            reduce using rule 31 (block_1 -> block_2 .)
    WRITE           reduce using rule 31 (block_1 -> block_2 .)
    RIGHT_BRACE     reduce using rule 31 (block_1 -> block_2 .)
    INT             reduce using rule 31 (block_1 -> block_2 .)
    DOUBLE          reduce using rule 31 (block_1 -> block_2 .)
    BOOL            reduce using rule 31 (block_1 -> block_2 .)


state 64

    (35) statement -> var_declaration .

    RETURN          reduce using rule 35 (statement -> var_declaration .)
    ID              reduce using rule 35 (statement -> var_declaration .)
    IF              reduce using rule 35 (statement -> var_declaration .)
    WHILE           reduce using rule 35 (statement -> var_declaration .)
    READ            reduce using rule 35 (statement -> var_declaration .)
    WRITE           reduce using rule 35 (statement -> var_declaration .)
    RIGHT_BRACE     reduce using rule 35 (statement -> var_declaration .)
    INT             reduce using rule 35 (statement -> var_declaration .)
    DOUBLE          reduce using rule 35 (statement -> var_declaration .)
    BOOL            reduce using rule 35 (statement -> var_declaration .)


state 65

    (36) statement -> assignment .

    RETURN          reduce using rule 36 (statement -> assignment .)
    ID              reduce using rule 36 (statement -> assignment .)
    IF              reduce using rule 36 (statement -> assignment .)
    WHILE           reduce using rule 36 (statement -> assignment .)
    READ            reduce using rule 36 (statement -> assignment .)
    WRITE           reduce using rule 36 (statement -> assignment .)
    RIGHT_BRACE     reduce using rule 36 (statement -> assignment .)
    INT             reduce using rule 36 (statement -> assignment .)
    DOUBLE          reduce using rule 36 (statement -> assignment .)
    BOOL            reduce using rule 36 (statement -> assignment .)


state 66

    (37) statement -> condition .

    RETURN          reduce using rule 37 (statement -> condition .)
    ID              reduce using rule 37 (statement -> condition .)
    IF              reduce using rule 37 (statement -> condition .)
    WHILE           reduce using rule 37 (statement -> condition .)
    READ            reduce using rule 37 (statement -> condition .)
    WRITE           reduce using rule 37 (statement -> condition .)
    RIGHT_BRACE     reduce using rule 37 (statement -> condition .)
    INT             reduce using rule 37 (statement -> condition .)
    DOUBLE          reduce using rule 37 (statement -> condition .)
    BOOL            reduce using rule 37 (statement -> condition .)


state 67

    (38) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 116


state 68

    (39) statement -> while_cycle .

    RETURN          reduce using rule 39 (statement -> while_cycle .)
    ID              reduce using rule 39 (statement -> while_cycle .)
    IF              reduce using rule 39 (statement -> while_cycle .)
    WHILE           reduce using rule 39 (statement -> while_cycle .)
    READ            reduce using rule 39 (statement -> while_cycle .)
    WRITE           reduce using rule 39 (statement -> while_cycle .)
    RIGHT_BRACE     reduce using rule 39 (statement -> while_cycle .)
    INT             reduce using rule 39 (statement -> while_cycle .)
    DOUBLE          reduce using rule 39 (statement -> while_cycle .)
    BOOL            reduce using rule 39 (statement -> while_cycle .)


state 69

    (40) statement -> read .

    RETURN          reduce using rule 40 (statement -> read .)
    ID              reduce using rule 40 (statement -> read .)
    IF              reduce using rule 40 (statement -> read .)
    WHILE           reduce using rule 40 (statement -> read .)
    READ            reduce using rule 40 (statement -> read .)
    WRITE           reduce using rule 40 (statement -> read .)
    RIGHT_BRACE     reduce using rule 40 (statement -> read .)
    INT             reduce using rule 40 (statement -> read .)
    DOUBLE          reduce using rule 40 (statement -> read .)
    BOOL            reduce using rule 40 (statement -> read .)


state 70

    (41) statement -> write .

    RETURN          reduce using rule 41 (statement -> write .)
    ID              reduce using rule 41 (statement -> write .)
    IF              reduce using rule 41 (statement -> write .)
    WHILE           reduce using rule 41 (statement -> write .)
    READ            reduce using rule 41 (statement -> write .)
    WRITE           reduce using rule 41 (statement -> write .)
    RIGHT_BRACE     reduce using rule 41 (statement -> write .)
    INT             reduce using rule 41 (statement -> write .)
    DOUBLE          reduce using rule 41 (statement -> write .)
    BOOL            reduce using rule 41 (statement -> write .)


state 71

    (32) block_2 -> RETURN . sem_push_operator mega_exp sem_return_function SEMICOLON block_3
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 117
    empty                          shift and go to state 100

state 72

    (33) block_2 -> block_3 .

    $end            reduce using rule 33 (block_2 -> block_3 .)
    FUNCTION        reduce using rule 33 (block_2 -> block_3 .)
    MAIN            reduce using rule 33 (block_2 -> block_3 .)
    ELSE            reduce using rule 33 (block_2 -> block_3 .)
    RETURN          reduce using rule 33 (block_2 -> block_3 .)
    ID              reduce using rule 33 (block_2 -> block_3 .)
    IF              reduce using rule 33 (block_2 -> block_3 .)
    WHILE           reduce using rule 33 (block_2 -> block_3 .)
    READ            reduce using rule 33 (block_2 -> block_3 .)
    WRITE           reduce using rule 33 (block_2 -> block_3 .)
    RIGHT_BRACE     reduce using rule 33 (block_2 -> block_3 .)
    INT             reduce using rule 33 (block_2 -> block_3 .)
    DOUBLE          reduce using rule 33 (block_2 -> block_3 .)
    BOOL            reduce using rule 33 (block_2 -> block_3 .)


state 73

    (42) assignment -> ID . sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (68) function_call -> ID . sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (82) sem_push_operand -> . empty
    (101) sem_check_function -> . empty
    (76) empty -> .

    ASSIGN          reduce using rule 76 (empty -> .)
    LEFT_PAR        reduce using rule 76 (empty -> .)

    sem_push_operand               shift and go to state 118
    sem_check_function             shift and go to state 119
    empty                          shift and go to state 114

state 74

    (65) condition -> IF . LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof

    LEFT_PAR        shift and go to state 120


state 75

    (72) while_cycle -> WHILE . sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (98) sem_start_while -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)

    sem_start_while                shift and go to state 121
    empty                          shift and go to state 122

state 76

    (73) read -> READ . sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 123
    empty                          shift and go to state 100

state 77

    (74) write -> WRITE . sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 124
    empty                          shift and go to state 100

state 78

    (34) block_3 -> RIGHT_BRACE .

    $end            reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    FUNCTION        reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    MAIN            reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    ELSE            reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    RETURN          reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    ID              reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    IF              reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    WHILE           reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    READ            reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    WRITE           reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    INT             reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    DOUBLE          reduce using rule 34 (block_3 -> RIGHT_BRACE .)
    BOOL            reduce using rule 34 (block_3 -> RIGHT_BRACE .)


state 79

    (4) var_declaration -> var_type ID sem_add_var array SEMICOLON .

    INT             reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    DOUBLE          reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    BOOL            reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    FUNCTION        reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    MAIN            reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    RETURN          reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    ID              reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    IF              reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    WHILE           reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    READ            reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    WRITE           reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)


state 80

    (10) func_signature -> FUNCTION func_type array func_signature_1 sem_end_func .

    FUNCTION        reduce using rule 10 (func_signature -> FUNCTION func_type array func_signature_1 sem_end_func .)
    MAIN            reduce using rule 10 (func_signature -> FUNCTION func_type array func_signature_1 sem_end_func .)


state 81

    (79) sem_end_func -> empty .

    FUNCTION        reduce using rule 79 (sem_end_func -> empty .)
    MAIN            reduce using rule 79 (sem_end_func -> empty .)


state 82

    (11) func_signature_1 -> ID sem_add_func . LEFT_PAR param_declaration RIGHT_PAR block

    LEFT_PAR        shift and go to state 125


state 83

    (78) sem_add_func -> empty .

    LEFT_PAR        reduce using rule 78 (sem_add_func -> empty .)


state 84

    (6) array -> LEFT_BRACKET mega_exp RIGHT_BRACKET . array
    (6) array -> . LEFT_BRACKET mega_exp RIGHT_BRACKET array
    (7) array -> . empty
    (76) empty -> .

    LEFT_BRACKET    shift and go to state 33
    ID              reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    RIGHT_BRACKET   reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    array                          shift and go to state 126
    empty                          shift and go to state 34

state 85

    (43) mega_exp -> hyper_exp mega_exp_1 .

    RIGHT_BRACKET   reduce using rule 43 (mega_exp -> hyper_exp mega_exp_1 .)
    RIGHT_PAR       reduce using rule 43 (mega_exp -> hyper_exp mega_exp_1 .)
    SEMICOLON       reduce using rule 43 (mega_exp -> hyper_exp mega_exp_1 .)
    COMMA           reduce using rule 43 (mega_exp -> hyper_exp mega_exp_1 .)


state 86

    (44) mega_exp_1 -> AND . sem_push_operator mega_exp sem_top_logical
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 127
    empty                          shift and go to state 100

state 87

    (45) mega_exp_1 -> OR . sem_push_operator mega_exp sem_top_logical
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 128
    empty                          shift and go to state 100

state 88

    (46) mega_exp_1 -> empty .

    RIGHT_BRACKET   reduce using rule 46 (mega_exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 46 (mega_exp_1 -> empty .)
    SEMICOLON       reduce using rule 46 (mega_exp_1 -> empty .)
    COMMA           reduce using rule 46 (mega_exp_1 -> empty .)


state 89

    (47) hyper_exp -> exp hyper_exp_1 .

    AND             reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)
    OR              reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)
    RIGHT_BRACKET   reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)
    RIGHT_PAR       reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)
    SEMICOLON       reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)
    COMMA           reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)


state 90

    (48) hyper_exp_1 -> IS_EQUAL_TO . sem_push_operator exp sem_top_relational
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 129
    empty                          shift and go to state 100

state 91

    (49) hyper_exp_1 -> NOT_EQUAL_TO . sem_push_operator exp sem_top_relational
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 130
    empty                          shift and go to state 100

state 92

    (50) hyper_exp_1 -> GREATER_THAN . sem_push_operator exp sem_top_relational
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 131
    empty                          shift and go to state 100

state 93

    (51) hyper_exp_1 -> LESS_THAN . sem_push_operator exp sem_top_relational
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 132
    empty                          shift and go to state 100

state 94

    (52) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO . sem_push_operator exp sem_top_relational
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 133
    empty                          shift and go to state 100

state 95

    (53) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO . sem_push_operator exp sem_top_relational
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 134
    empty                          shift and go to state 100

state 96

    (54) hyper_exp_1 -> empty .

    AND             reduce using rule 54 (hyper_exp_1 -> empty .)
    OR              reduce using rule 54 (hyper_exp_1 -> empty .)
    RIGHT_BRACKET   reduce using rule 54 (hyper_exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 54 (hyper_exp_1 -> empty .)
    SEMICOLON       reduce using rule 54 (hyper_exp_1 -> empty .)
    COMMA           reduce using rule 54 (hyper_exp_1 -> empty .)


state 97

    (55) exp -> term sem_top_term .
    (56) exp -> term sem_top_term . PLUS sem_push_operator exp
    (57) exp -> term sem_top_term . MINUS sem_push_operator exp

    IS_EQUAL_TO     reduce using rule 55 (exp -> term sem_top_term .)
    NOT_EQUAL_TO    reduce using rule 55 (exp -> term sem_top_term .)
    GREATER_THAN    reduce using rule 55 (exp -> term sem_top_term .)
    LESS_THAN       reduce using rule 55 (exp -> term sem_top_term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 55 (exp -> term sem_top_term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 55 (exp -> term sem_top_term .)
    AND             reduce using rule 55 (exp -> term sem_top_term .)
    OR              reduce using rule 55 (exp -> term sem_top_term .)
    RIGHT_BRACKET   reduce using rule 55 (exp -> term sem_top_term .)
    RIGHT_PAR       reduce using rule 55 (exp -> term sem_top_term .)
    SEMICOLON       reduce using rule 55 (exp -> term sem_top_term .)
    COMMA           reduce using rule 55 (exp -> term sem_top_term .)
    PLUS            shift and go to state 135
    MINUS           shift and go to state 136


state 98

    (87) sem_top_term -> empty .

    PLUS            reduce using rule 87 (sem_top_term -> empty .)
    MINUS           reduce using rule 87 (sem_top_term -> empty .)
    IS_EQUAL_TO     reduce using rule 87 (sem_top_term -> empty .)
    NOT_EQUAL_TO    reduce using rule 87 (sem_top_term -> empty .)
    GREATER_THAN    reduce using rule 87 (sem_top_term -> empty .)
    LESS_THAN       reduce using rule 87 (sem_top_term -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 87 (sem_top_term -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 87 (sem_top_term -> empty .)
    AND             reduce using rule 87 (sem_top_term -> empty .)
    OR              reduce using rule 87 (sem_top_term -> empty .)
    RIGHT_BRACKET   reduce using rule 87 (sem_top_term -> empty .)
    RIGHT_PAR       reduce using rule 87 (sem_top_term -> empty .)
    SEMICOLON       reduce using rule 87 (sem_top_term -> empty .)
    COMMA           reduce using rule 87 (sem_top_term -> empty .)


state 99

    (63) factor -> PLUS sem_push_operator . var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    var_cte                        shift and go to state 137
    cte_b                          shift and go to state 55

state 100

    (81) sem_push_operator -> empty .

    CTE_I           reduce using rule 81 (sem_push_operator -> empty .)
    CTE_D           reduce using rule 81 (sem_push_operator -> empty .)
    ID              reduce using rule 81 (sem_push_operator -> empty .)
    TRUE            reduce using rule 81 (sem_push_operator -> empty .)
    FALSE           reduce using rule 81 (sem_push_operator -> empty .)
    LEFT_PAR        reduce using rule 81 (sem_push_operator -> empty .)
    PLUS            reduce using rule 81 (sem_push_operator -> empty .)
    MINUS           reduce using rule 81 (sem_push_operator -> empty .)


state 101

    (64) factor -> MINUS sem_push_operator . var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    var_cte                        shift and go to state 138
    cte_b                          shift and go to state 55

state 102

    (58) term -> factor sem_top_factor .
    (59) term -> factor sem_top_factor . MULTIPLY sem_push_operator term
    (60) term -> factor sem_top_factor . DIVIDE sem_push_operator term

    PLUS            reduce using rule 58 (term -> factor sem_top_factor .)
    MINUS           reduce using rule 58 (term -> factor sem_top_factor .)
    IS_EQUAL_TO     reduce using rule 58 (term -> factor sem_top_factor .)
    NOT_EQUAL_TO    reduce using rule 58 (term -> factor sem_top_factor .)
    GREATER_THAN    reduce using rule 58 (term -> factor sem_top_factor .)
    LESS_THAN       reduce using rule 58 (term -> factor sem_top_factor .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 58 (term -> factor sem_top_factor .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 58 (term -> factor sem_top_factor .)
    AND             reduce using rule 58 (term -> factor sem_top_factor .)
    OR              reduce using rule 58 (term -> factor sem_top_factor .)
    RIGHT_BRACKET   reduce using rule 58 (term -> factor sem_top_factor .)
    RIGHT_PAR       reduce using rule 58 (term -> factor sem_top_factor .)
    SEMICOLON       reduce using rule 58 (term -> factor sem_top_factor .)
    COMMA           reduce using rule 58 (term -> factor sem_top_factor .)
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140


state 103

    (86) sem_top_factor -> empty .

    MULTIPLY        reduce using rule 86 (sem_top_factor -> empty .)
    DIVIDE          reduce using rule 86 (sem_top_factor -> empty .)
    PLUS            reduce using rule 86 (sem_top_factor -> empty .)
    MINUS           reduce using rule 86 (sem_top_factor -> empty .)
    IS_EQUAL_TO     reduce using rule 86 (sem_top_factor -> empty .)
    NOT_EQUAL_TO    reduce using rule 86 (sem_top_factor -> empty .)
    GREATER_THAN    reduce using rule 86 (sem_top_factor -> empty .)
    LESS_THAN       reduce using rule 86 (sem_top_factor -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 86 (sem_top_factor -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 86 (sem_top_factor -> empty .)
    AND             reduce using rule 86 (sem_top_factor -> empty .)
    OR              reduce using rule 86 (sem_top_factor -> empty .)
    RIGHT_BRACKET   reduce using rule 86 (sem_top_factor -> empty .)
    RIGHT_PAR       reduce using rule 86 (sem_top_factor -> empty .)
    SEMICOLON       reduce using rule 86 (sem_top_factor -> empty .)
    COMMA           reduce using rule 86 (sem_top_factor -> empty .)


state 104

    (61) factor -> LEFT_PAR sem_false_bottom_begin . mega_exp RIGHT_PAR sem_false_bottom_end
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    mega_exp                       shift and go to state 141
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 105

    (88) sem_false_bottom_begin -> empty .

    LEFT_PAR        reduce using rule 88 (sem_false_bottom_begin -> empty .)
    PLUS            reduce using rule 88 (sem_false_bottom_begin -> empty .)
    MINUS           reduce using rule 88 (sem_false_bottom_begin -> empty .)
    CTE_I           reduce using rule 88 (sem_false_bottom_begin -> empty .)
    CTE_D           reduce using rule 88 (sem_false_bottom_begin -> empty .)
    ID              reduce using rule 88 (sem_false_bottom_begin -> empty .)
    TRUE            reduce using rule 88 (sem_false_bottom_begin -> empty .)
    FALSE           reduce using rule 88 (sem_false_bottom_begin -> empty .)
    RIGHT_PAR       reduce using rule 88 (sem_false_bottom_begin -> empty .)


state 106

    (18) var_cte -> CTE_I sem_push_constant_int .

    MULTIPLY        reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    DIVIDE          reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    PLUS            reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    MINUS           reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    IS_EQUAL_TO     reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    NOT_EQUAL_TO    reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    GREATER_THAN    reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    LESS_THAN       reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    AND             reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    OR              reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    RIGHT_BRACKET   reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    RIGHT_PAR       reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    SEMICOLON       reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)
    COMMA           reduce using rule 18 (var_cte -> CTE_I sem_push_constant_int .)


state 107

    (83) sem_push_constant_int -> empty .

    MULTIPLY        reduce using rule 83 (sem_push_constant_int -> empty .)
    DIVIDE          reduce using rule 83 (sem_push_constant_int -> empty .)
    PLUS            reduce using rule 83 (sem_push_constant_int -> empty .)
    MINUS           reduce using rule 83 (sem_push_constant_int -> empty .)
    IS_EQUAL_TO     reduce using rule 83 (sem_push_constant_int -> empty .)
    NOT_EQUAL_TO    reduce using rule 83 (sem_push_constant_int -> empty .)
    GREATER_THAN    reduce using rule 83 (sem_push_constant_int -> empty .)
    LESS_THAN       reduce using rule 83 (sem_push_constant_int -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 83 (sem_push_constant_int -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 83 (sem_push_constant_int -> empty .)
    AND             reduce using rule 83 (sem_push_constant_int -> empty .)
    OR              reduce using rule 83 (sem_push_constant_int -> empty .)
    RIGHT_BRACKET   reduce using rule 83 (sem_push_constant_int -> empty .)
    RIGHT_PAR       reduce using rule 83 (sem_push_constant_int -> empty .)
    SEMICOLON       reduce using rule 83 (sem_push_constant_int -> empty .)
    COMMA           reduce using rule 83 (sem_push_constant_int -> empty .)


state 108

    (19) var_cte -> CTE_D sem_push_constant_double .

    MULTIPLY        reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    DIVIDE          reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    PLUS            reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    MINUS           reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    IS_EQUAL_TO     reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    NOT_EQUAL_TO    reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    GREATER_THAN    reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    LESS_THAN       reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    AND             reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    OR              reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    RIGHT_BRACKET   reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    RIGHT_PAR       reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    SEMICOLON       reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)
    COMMA           reduce using rule 19 (var_cte -> CTE_D sem_push_constant_double .)


state 109

    (84) sem_push_constant_double -> empty .

    MULTIPLY        reduce using rule 84 (sem_push_constant_double -> empty .)
    DIVIDE          reduce using rule 84 (sem_push_constant_double -> empty .)
    PLUS            reduce using rule 84 (sem_push_constant_double -> empty .)
    MINUS           reduce using rule 84 (sem_push_constant_double -> empty .)
    IS_EQUAL_TO     reduce using rule 84 (sem_push_constant_double -> empty .)
    NOT_EQUAL_TO    reduce using rule 84 (sem_push_constant_double -> empty .)
    GREATER_THAN    reduce using rule 84 (sem_push_constant_double -> empty .)
    LESS_THAN       reduce using rule 84 (sem_push_constant_double -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 84 (sem_push_constant_double -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 84 (sem_push_constant_double -> empty .)
    AND             reduce using rule 84 (sem_push_constant_double -> empty .)
    OR              reduce using rule 84 (sem_push_constant_double -> empty .)
    RIGHT_BRACKET   reduce using rule 84 (sem_push_constant_double -> empty .)
    RIGHT_PAR       reduce using rule 84 (sem_push_constant_double -> empty .)
    SEMICOLON       reduce using rule 84 (sem_push_constant_double -> empty .)
    COMMA           reduce using rule 84 (sem_push_constant_double -> empty .)


state 110

    (20) var_cte -> cte_b sem_push_constant_bool .

    MULTIPLY        reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    DIVIDE          reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    PLUS            reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    MINUS           reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    IS_EQUAL_TO     reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    NOT_EQUAL_TO    reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    GREATER_THAN    reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    LESS_THAN       reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    AND             reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    OR              reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    RIGHT_BRACKET   reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    RIGHT_PAR       reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    SEMICOLON       reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)
    COMMA           reduce using rule 20 (var_cte -> cte_b sem_push_constant_bool .)


state 111

    (85) sem_push_constant_bool -> empty .

    MULTIPLY        reduce using rule 85 (sem_push_constant_bool -> empty .)
    DIVIDE          reduce using rule 85 (sem_push_constant_bool -> empty .)
    PLUS            reduce using rule 85 (sem_push_constant_bool -> empty .)
    MINUS           reduce using rule 85 (sem_push_constant_bool -> empty .)
    IS_EQUAL_TO     reduce using rule 85 (sem_push_constant_bool -> empty .)
    NOT_EQUAL_TO    reduce using rule 85 (sem_push_constant_bool -> empty .)
    GREATER_THAN    reduce using rule 85 (sem_push_constant_bool -> empty .)
    LESS_THAN       reduce using rule 85 (sem_push_constant_bool -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (sem_push_constant_bool -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (sem_push_constant_bool -> empty .)
    AND             reduce using rule 85 (sem_push_constant_bool -> empty .)
    OR              reduce using rule 85 (sem_push_constant_bool -> empty .)
    RIGHT_BRACKET   reduce using rule 85 (sem_push_constant_bool -> empty .)
    RIGHT_PAR       reduce using rule 85 (sem_push_constant_bool -> empty .)
    SEMICOLON       reduce using rule 85 (sem_push_constant_bool -> empty .)
    COMMA           reduce using rule 85 (sem_push_constant_bool -> empty .)


state 112

    (21) var_cte -> ID sem_push_operand . array
    (6) array -> . LEFT_BRACKET mega_exp RIGHT_BRACKET array
    (7) array -> . empty
    (76) empty -> .

    LEFT_BRACKET    shift and go to state 33
    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    RIGHT_BRACKET   reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    array                          shift and go to state 142
    empty                          shift and go to state 34

state 113

    (22) var_cte -> ID sem_check_function . LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub

    LEFT_PAR        shift and go to state 143


state 114

    (82) sem_push_operand -> empty .
    (101) sem_check_function -> empty .

    LEFT_BRACKET    reduce using rule 82 (sem_push_operand -> empty .)
    MULTIPLY        reduce using rule 82 (sem_push_operand -> empty .)
    DIVIDE          reduce using rule 82 (sem_push_operand -> empty .)
    PLUS            reduce using rule 82 (sem_push_operand -> empty .)
    MINUS           reduce using rule 82 (sem_push_operand -> empty .)
    IS_EQUAL_TO     reduce using rule 82 (sem_push_operand -> empty .)
    NOT_EQUAL_TO    reduce using rule 82 (sem_push_operand -> empty .)
    GREATER_THAN    reduce using rule 82 (sem_push_operand -> empty .)
    LESS_THAN       reduce using rule 82 (sem_push_operand -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 82 (sem_push_operand -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 82 (sem_push_operand -> empty .)
    AND             reduce using rule 82 (sem_push_operand -> empty .)
    OR              reduce using rule 82 (sem_push_operand -> empty .)
    RIGHT_BRACKET   reduce using rule 82 (sem_push_operand -> empty .)
    RIGHT_PAR       reduce using rule 82 (sem_push_operand -> empty .)
    SEMICOLON       reduce using rule 82 (sem_push_operand -> empty .)
    COMMA           reduce using rule 82 (sem_push_operand -> empty .)
    ASSIGN          reduce using rule 82 (sem_push_operand -> empty .)
    LEFT_PAR        reduce using rule 101 (sem_check_function -> empty .)


state 115

    (30) block_1 -> statement block_1 .

    $end            reduce using rule 30 (block_1 -> statement block_1 .)
    FUNCTION        reduce using rule 30 (block_1 -> statement block_1 .)
    MAIN            reduce using rule 30 (block_1 -> statement block_1 .)
    ELSE            reduce using rule 30 (block_1 -> statement block_1 .)
    RETURN          reduce using rule 30 (block_1 -> statement block_1 .)
    ID              reduce using rule 30 (block_1 -> statement block_1 .)
    IF              reduce using rule 30 (block_1 -> statement block_1 .)
    WHILE           reduce using rule 30 (block_1 -> statement block_1 .)
    READ            reduce using rule 30 (block_1 -> statement block_1 .)
    WRITE           reduce using rule 30 (block_1 -> statement block_1 .)
    RIGHT_BRACE     reduce using rule 30 (block_1 -> statement block_1 .)
    INT             reduce using rule 30 (block_1 -> statement block_1 .)
    DOUBLE          reduce using rule 30 (block_1 -> statement block_1 .)
    BOOL            reduce using rule 30 (block_1 -> statement block_1 .)


state 116

    (38) statement -> function_call SEMICOLON .

    RETURN          reduce using rule 38 (statement -> function_call SEMICOLON .)
    ID              reduce using rule 38 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 38 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 38 (statement -> function_call SEMICOLON .)
    READ            reduce using rule 38 (statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 38 (statement -> function_call SEMICOLON .)
    RIGHT_BRACE     reduce using rule 38 (statement -> function_call SEMICOLON .)
    INT             reduce using rule 38 (statement -> function_call SEMICOLON .)
    DOUBLE          reduce using rule 38 (statement -> function_call SEMICOLON .)
    BOOL            reduce using rule 38 (statement -> function_call SEMICOLON .)


state 117

    (32) block_2 -> RETURN sem_push_operator . mega_exp sem_return_function SEMICOLON block_3
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    mega_exp                       shift and go to state 144
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 118

    (42) assignment -> ID sem_push_operand . ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON

    ASSIGN          shift and go to state 145


state 119

    (68) function_call -> ID sem_check_function . LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub

    LEFT_PAR        shift and go to state 146


state 120

    (65) condition -> IF LEFT_PAR . mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    mega_exp                       shift and go to state 147
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 121

    (72) while_cycle -> WHILE sem_start_while . LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while

    LEFT_PAR        shift and go to state 148


state 122

    (98) sem_start_while -> empty .

    LEFT_PAR        reduce using rule 98 (sem_start_while -> empty .)


state 123

    (73) read -> READ sem_push_operator . LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    LEFT_PAR        shift and go to state 149


state 124

    (74) write -> WRITE sem_push_operator . LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    LEFT_PAR        shift and go to state 150


state 125

    (11) func_signature_1 -> ID sem_add_func LEFT_PAR . param_declaration RIGHT_PAR block
    (12) param_declaration -> . var_type array ID sem_add_param
    (13) param_declaration -> . var_type array ID sem_add_param COMMA param_declaration
    (14) param_declaration -> . empty
    (15) var_type -> . INT sem_get_type
    (16) var_type -> . DOUBLE sem_get_type
    (17) var_type -> . BOOL sem_get_type
    (76) empty -> .

    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    RIGHT_PAR       reduce using rule 76 (empty -> .)

    param_declaration              shift and go to state 151
    var_type                       shift and go to state 152
    empty                          shift and go to state 153

state 126

    (6) array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .

    ID              reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    SEMICOLON       reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    MULTIPLY        reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    DIVIDE          reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    PLUS            reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    MINUS           reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    IS_EQUAL_TO     reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    NOT_EQUAL_TO    reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    GREATER_THAN    reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    LESS_THAN       reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    AND             reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    OR              reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    RIGHT_BRACKET   reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    RIGHT_PAR       reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)
    COMMA           reduce using rule 6 (array -> LEFT_BRACKET mega_exp RIGHT_BRACKET array .)


state 127

    (44) mega_exp_1 -> AND sem_push_operator . mega_exp sem_top_logical
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    mega_exp                       shift and go to state 154
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 128

    (45) mega_exp_1 -> OR sem_push_operator . mega_exp sem_top_logical
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    mega_exp                       shift and go to state 155
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 129

    (48) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    exp                            shift and go to state 156
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 130

    (49) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    exp                            shift and go to state 157
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 131

    (50) hyper_exp_1 -> GREATER_THAN sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    exp                            shift and go to state 158
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 132

    (51) hyper_exp_1 -> LESS_THAN sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    exp                            shift and go to state 159
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 133

    (52) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    exp                            shift and go to state 160
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 134

    (53) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    exp                            shift and go to state 161
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 135

    (56) exp -> term sem_top_term PLUS . sem_push_operator exp
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 162
    empty                          shift and go to state 100

state 136

    (57) exp -> term sem_top_term MINUS . sem_push_operator exp
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 163
    empty                          shift and go to state 100

state 137

    (63) factor -> PLUS sem_push_operator var_cte .

    MULTIPLY        reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    DIVIDE          reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    PLUS            reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    MINUS           reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    IS_EQUAL_TO     reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    NOT_EQUAL_TO    reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    GREATER_THAN    reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    LESS_THAN       reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    AND             reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    OR              reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    RIGHT_BRACKET   reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    RIGHT_PAR       reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    SEMICOLON       reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    COMMA           reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)


state 138

    (64) factor -> MINUS sem_push_operator var_cte .

    MULTIPLY        reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    DIVIDE          reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    PLUS            reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    MINUS           reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    IS_EQUAL_TO     reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    NOT_EQUAL_TO    reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    GREATER_THAN    reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    LESS_THAN       reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    AND             reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    OR              reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    RIGHT_BRACKET   reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    RIGHT_PAR       reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    SEMICOLON       reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    COMMA           reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)


state 139

    (59) term -> factor sem_top_factor MULTIPLY . sem_push_operator term
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 164
    empty                          shift and go to state 100

state 140

    (60) term -> factor sem_top_factor DIVIDE . sem_push_operator term
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 165
    empty                          shift and go to state 100

state 141

    (61) factor -> LEFT_PAR sem_false_bottom_begin mega_exp . RIGHT_PAR sem_false_bottom_end

    RIGHT_PAR       shift and go to state 166


state 142

    (21) var_cte -> ID sem_push_operand array .

    MULTIPLY        reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    DIVIDE          reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    PLUS            reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    MINUS           reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    IS_EQUAL_TO     reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    NOT_EQUAL_TO    reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    GREATER_THAN    reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    LESS_THAN       reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    AND             reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    OR              reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    RIGHT_BRACKET   reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    RIGHT_PAR       reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    SEMICOLON       reduce using rule 21 (var_cte -> ID sem_push_operand array .)
    COMMA           reduce using rule 21 (var_cte -> ID sem_push_operand array .)


state 143

    (22) var_cte -> ID sem_check_function LEFT_PAR . sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (88) sem_false_bottom_begin -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)

    sem_false_bottom_begin         shift and go to state 167
    empty                          shift and go to state 105

state 144

    (32) block_2 -> RETURN sem_push_operator mega_exp . sem_return_function SEMICOLON block_3
    (92) sem_return_function -> . empty
    (76) empty -> .

    SEMICOLON       reduce using rule 76 (empty -> .)

    sem_return_function            shift and go to state 168
    empty                          shift and go to state 169

state 145

    (42) assignment -> ID sem_push_operand ASSIGN . sem_push_operator mega_exp sem_assign_value SEMICOLON
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 170
    empty                          shift and go to state 100

state 146

    (68) function_call -> ID sem_check_function LEFT_PAR . sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub
    (102) sem_create_era -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)

    sem_create_era                 shift and go to state 171
    empty                          shift and go to state 172

state 147

    (65) condition -> IF LEFT_PAR mega_exp . RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof

    RIGHT_PAR       shift and go to state 173


state 148

    (72) while_cycle -> WHILE sem_start_while LEFT_PAR . mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    mega_exp                       shift and go to state 174
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 149

    (73) read -> READ sem_push_operator LEFT_PAR . mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    mega_exp                       shift and go to state 175
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 150

    (74) write -> WRITE sem_push_operator LEFT_PAR . mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    mega_exp                       shift and go to state 176
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 151

    (11) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration . RIGHT_PAR block

    RIGHT_PAR       shift and go to state 177


state 152

    (12) param_declaration -> var_type . array ID sem_add_param
    (13) param_declaration -> var_type . array ID sem_add_param COMMA param_declaration
    (6) array -> . LEFT_BRACKET mega_exp RIGHT_BRACKET array
    (7) array -> . empty
    (76) empty -> .

    LEFT_BRACKET    shift and go to state 33
    ID              reduce using rule 76 (empty -> .)

    array                          shift and go to state 178
    empty                          shift and go to state 34

state 153

    (14) param_declaration -> empty .

    RIGHT_PAR       reduce using rule 14 (param_declaration -> empty .)


state 154

    (44) mega_exp_1 -> AND sem_push_operator mega_exp . sem_top_logical
    (93) sem_top_logical -> .

    RIGHT_BRACKET   reduce using rule 93 (sem_top_logical -> .)
    RIGHT_PAR       reduce using rule 93 (sem_top_logical -> .)
    SEMICOLON       reduce using rule 93 (sem_top_logical -> .)
    COMMA           reduce using rule 93 (sem_top_logical -> .)

    sem_top_logical                shift and go to state 179

state 155

    (45) mega_exp_1 -> OR sem_push_operator mega_exp . sem_top_logical
    (93) sem_top_logical -> .

    RIGHT_BRACKET   reduce using rule 93 (sem_top_logical -> .)
    RIGHT_PAR       reduce using rule 93 (sem_top_logical -> .)
    SEMICOLON       reduce using rule 93 (sem_top_logical -> .)
    COMMA           reduce using rule 93 (sem_top_logical -> .)

    sem_top_logical                shift and go to state 180

state 156

    (48) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp . sem_top_relational
    (94) sem_top_relational -> .

    AND             reduce using rule 94 (sem_top_relational -> .)
    OR              reduce using rule 94 (sem_top_relational -> .)
    RIGHT_BRACKET   reduce using rule 94 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 94 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 94 (sem_top_relational -> .)
    COMMA           reduce using rule 94 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 181

state 157

    (49) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp . sem_top_relational
    (94) sem_top_relational -> .

    AND             reduce using rule 94 (sem_top_relational -> .)
    OR              reduce using rule 94 (sem_top_relational -> .)
    RIGHT_BRACKET   reduce using rule 94 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 94 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 94 (sem_top_relational -> .)
    COMMA           reduce using rule 94 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 182

state 158

    (50) hyper_exp_1 -> GREATER_THAN sem_push_operator exp . sem_top_relational
    (94) sem_top_relational -> .

    AND             reduce using rule 94 (sem_top_relational -> .)
    OR              reduce using rule 94 (sem_top_relational -> .)
    RIGHT_BRACKET   reduce using rule 94 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 94 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 94 (sem_top_relational -> .)
    COMMA           reduce using rule 94 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 183

state 159

    (51) hyper_exp_1 -> LESS_THAN sem_push_operator exp . sem_top_relational
    (94) sem_top_relational -> .

    AND             reduce using rule 94 (sem_top_relational -> .)
    OR              reduce using rule 94 (sem_top_relational -> .)
    RIGHT_BRACKET   reduce using rule 94 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 94 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 94 (sem_top_relational -> .)
    COMMA           reduce using rule 94 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 184

state 160

    (52) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp . sem_top_relational
    (94) sem_top_relational -> .

    AND             reduce using rule 94 (sem_top_relational -> .)
    OR              reduce using rule 94 (sem_top_relational -> .)
    RIGHT_BRACKET   reduce using rule 94 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 94 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 94 (sem_top_relational -> .)
    COMMA           reduce using rule 94 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 185

state 161

    (53) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp . sem_top_relational
    (94) sem_top_relational -> .

    AND             reduce using rule 94 (sem_top_relational -> .)
    OR              reduce using rule 94 (sem_top_relational -> .)
    RIGHT_BRACKET   reduce using rule 94 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 94 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 94 (sem_top_relational -> .)
    COMMA           reduce using rule 94 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 186

state 162

    (56) exp -> term sem_top_term PLUS sem_push_operator . exp
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    term                           shift and go to state 47
    exp                            shift and go to state 187
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 163

    (57) exp -> term sem_top_term MINUS sem_push_operator . exp
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    term                           shift and go to state 47
    exp                            shift and go to state 188
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 164

    (59) term -> factor sem_top_factor MULTIPLY sem_push_operator . term
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    factor                         shift and go to state 50
    term                           shift and go to state 189
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 165

    (60) term -> factor sem_top_factor DIVIDE sem_push_operator . term
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    factor                         shift and go to state 50
    term                           shift and go to state 190
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 166

    (61) factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR . sem_false_bottom_end
    (89) sem_false_bottom_end -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    RIGHT_BRACKET   reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_false_bottom_end           shift and go to state 191
    empty                          shift and go to state 192

state 167

    (22) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin . sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (102) sem_create_era -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)

    sem_create_era                 shift and go to state 193
    empty                          shift and go to state 172

state 168

    (32) block_2 -> RETURN sem_push_operator mega_exp sem_return_function . SEMICOLON block_3

    SEMICOLON       shift and go to state 194


state 169

    (92) sem_return_function -> empty .

    SEMICOLON       reduce using rule 92 (sem_return_function -> empty .)


state 170

    (42) assignment -> ID sem_push_operand ASSIGN sem_push_operator . mega_exp sem_assign_value SEMICOLON
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    mega_exp                       shift and go to state 195
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 171

    (68) function_call -> ID sem_check_function LEFT_PAR sem_create_era . param_call RIGHT_PAR sem_count_params sem_gosub
    (69) param_call -> . mega_exp sem_check_param
    (70) param_call -> . mega_exp sem_check_param COMMA param_call
    (71) param_call -> . empty
    (43) mega_exp -> . hyper_exp mega_exp_1
    (76) empty -> .
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 76 (empty -> .)
    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    param_call                     shift and go to state 196
    mega_exp                       shift and go to state 197
    empty                          shift and go to state 198
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 172

    (102) sem_create_era -> empty .

    LEFT_PAR        reduce using rule 102 (sem_create_era -> empty .)
    PLUS            reduce using rule 102 (sem_create_era -> empty .)
    MINUS           reduce using rule 102 (sem_create_era -> empty .)
    CTE_I           reduce using rule 102 (sem_create_era -> empty .)
    CTE_D           reduce using rule 102 (sem_create_era -> empty .)
    ID              reduce using rule 102 (sem_create_era -> empty .)
    TRUE            reduce using rule 102 (sem_create_era -> empty .)
    FALSE           reduce using rule 102 (sem_create_era -> empty .)
    RIGHT_PAR       reduce using rule 102 (sem_create_era -> empty .)


state 173

    (65) condition -> IF LEFT_PAR mega_exp RIGHT_PAR . sem_end_condition block condition_1 sem_fill_gotof
    (95) sem_end_condition -> . empty
    (76) empty -> .

    LEFT_BRACE      reduce using rule 76 (empty -> .)

    sem_end_condition              shift and go to state 199
    empty                          shift and go to state 200

state 174

    (72) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp . RIGHT_PAR sem_end_condition block sem_end_while

    RIGHT_PAR       shift and go to state 201


state 175

    (73) read -> READ sem_push_operator LEFT_PAR mega_exp . RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_PAR       shift and go to state 202


state 176

    (74) write -> WRITE sem_push_operator LEFT_PAR mega_exp . RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_PAR       shift and go to state 203


state 177

    (11) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR . block
    (29) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 40

    block                          shift and go to state 204

state 178

    (12) param_declaration -> var_type array . ID sem_add_param
    (13) param_declaration -> var_type array . ID sem_add_param COMMA param_declaration

    ID              shift and go to state 205


state 179

    (44) mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .

    RIGHT_BRACKET   reduce using rule 44 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)
    RIGHT_PAR       reduce using rule 44 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)
    SEMICOLON       reduce using rule 44 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)
    COMMA           reduce using rule 44 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)


state 180

    (45) mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .

    RIGHT_BRACKET   reduce using rule 45 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)
    RIGHT_PAR       reduce using rule 45 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)
    SEMICOLON       reduce using rule 45 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)
    COMMA           reduce using rule 45 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)


state 181

    (48) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_BRACKET   reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 182

    (49) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_BRACKET   reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 183

    (50) hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .

    AND             reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_BRACKET   reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)


state 184

    (51) hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .

    AND             reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_BRACKET   reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)


state 185

    (52) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_BRACKET   reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 186

    (53) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_BRACKET   reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 187

    (56) exp -> term sem_top_term PLUS sem_push_operator exp .

    IS_EQUAL_TO     reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    NOT_EQUAL_TO    reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    GREATER_THAN    reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    LESS_THAN       reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    AND             reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    OR              reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    RIGHT_BRACKET   reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    RIGHT_PAR       reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    SEMICOLON       reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    COMMA           reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)


state 188

    (57) exp -> term sem_top_term MINUS sem_push_operator exp .

    IS_EQUAL_TO     reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    NOT_EQUAL_TO    reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    GREATER_THAN    reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    LESS_THAN       reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    AND             reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    OR              reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    RIGHT_BRACKET   reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    RIGHT_PAR       reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    SEMICOLON       reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    COMMA           reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)


state 189

    (59) term -> factor sem_top_factor MULTIPLY sem_push_operator term .

    PLUS            reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    MINUS           reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    IS_EQUAL_TO     reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    NOT_EQUAL_TO    reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    GREATER_THAN    reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    LESS_THAN       reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    AND             reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    OR              reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    RIGHT_BRACKET   reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    RIGHT_PAR       reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    SEMICOLON       reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    COMMA           reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)


state 190

    (60) term -> factor sem_top_factor DIVIDE sem_push_operator term .

    PLUS            reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    MINUS           reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    IS_EQUAL_TO     reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    NOT_EQUAL_TO    reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    GREATER_THAN    reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    LESS_THAN       reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    AND             reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    OR              reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    RIGHT_BRACKET   reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    RIGHT_PAR       reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    SEMICOLON       reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    COMMA           reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)


state 191

    (61) factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .

    MULTIPLY        reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    DIVIDE          reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    PLUS            reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    MINUS           reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    IS_EQUAL_TO     reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    NOT_EQUAL_TO    reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    GREATER_THAN    reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    LESS_THAN       reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    AND             reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    OR              reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    RIGHT_BRACKET   reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    RIGHT_PAR       reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    SEMICOLON       reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    COMMA           reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)


state 192

    (89) sem_false_bottom_end -> empty .

    MULTIPLY        reduce using rule 89 (sem_false_bottom_end -> empty .)
    DIVIDE          reduce using rule 89 (sem_false_bottom_end -> empty .)
    PLUS            reduce using rule 89 (sem_false_bottom_end -> empty .)
    MINUS           reduce using rule 89 (sem_false_bottom_end -> empty .)
    IS_EQUAL_TO     reduce using rule 89 (sem_false_bottom_end -> empty .)
    NOT_EQUAL_TO    reduce using rule 89 (sem_false_bottom_end -> empty .)
    GREATER_THAN    reduce using rule 89 (sem_false_bottom_end -> empty .)
    LESS_THAN       reduce using rule 89 (sem_false_bottom_end -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 89 (sem_false_bottom_end -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 89 (sem_false_bottom_end -> empty .)
    AND             reduce using rule 89 (sem_false_bottom_end -> empty .)
    OR              reduce using rule 89 (sem_false_bottom_end -> empty .)
    RIGHT_BRACKET   reduce using rule 89 (sem_false_bottom_end -> empty .)
    RIGHT_PAR       reduce using rule 89 (sem_false_bottom_end -> empty .)
    SEMICOLON       reduce using rule 89 (sem_false_bottom_end -> empty .)
    COMMA           reduce using rule 89 (sem_false_bottom_end -> empty .)


state 193

    (22) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era . param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (69) param_call -> . mega_exp sem_check_param
    (70) param_call -> . mega_exp sem_check_param COMMA param_call
    (71) param_call -> . empty
    (43) mega_exp -> . hyper_exp mega_exp_1
    (76) empty -> .
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 76 (empty -> .)
    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    param_call                     shift and go to state 206
    mega_exp                       shift and go to state 197
    empty                          shift and go to state 198
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 194

    (32) block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON . block_3
    (34) block_3 -> . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 78

    block_3                        shift and go to state 207

state 195

    (42) assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp . sem_assign_value SEMICOLON
    (90) sem_assign_value -> . empty
    (76) empty -> .

    SEMICOLON       reduce using rule 76 (empty -> .)

    sem_assign_value               shift and go to state 208
    empty                          shift and go to state 209

state 196

    (68) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call . RIGHT_PAR sem_count_params sem_gosub

    RIGHT_PAR       shift and go to state 210


state 197

    (69) param_call -> mega_exp . sem_check_param
    (70) param_call -> mega_exp . sem_check_param COMMA param_call
    (103) sem_check_param -> . empty
    (76) empty -> .

    COMMA           reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)

    sem_check_param                shift and go to state 211
    empty                          shift and go to state 212

state 198

    (71) param_call -> empty .

    RIGHT_PAR       reduce using rule 71 (param_call -> empty .)


state 199

    (65) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition . block condition_1 sem_fill_gotof
    (29) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 40

    block                          shift and go to state 213

state 200

    (95) sem_end_condition -> empty .

    LEFT_BRACE      reduce using rule 95 (sem_end_condition -> empty .)


state 201

    (72) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR . sem_end_condition block sem_end_while
    (95) sem_end_condition -> . empty
    (76) empty -> .

    LEFT_BRACE      reduce using rule 76 (empty -> .)

    sem_end_condition              shift and go to state 214
    empty                          shift and go to state 200

state 202

    (73) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR . sem_read_write SEMICOLON
    (91) sem_read_write -> . empty
    (76) empty -> .

    SEMICOLON       reduce using rule 76 (empty -> .)

    sem_read_write                 shift and go to state 215
    empty                          shift and go to state 216

state 203

    (74) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR . sem_read_write SEMICOLON
    (91) sem_read_write -> . empty
    (76) empty -> .

    SEMICOLON       reduce using rule 76 (empty -> .)

    sem_read_write                 shift and go to state 217
    empty                          shift and go to state 216

state 204

    (11) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .

    FUNCTION        reduce using rule 11 (func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .)
    MAIN            reduce using rule 11 (func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .)


state 205

    (12) param_declaration -> var_type array ID . sem_add_param
    (13) param_declaration -> var_type array ID . sem_add_param COMMA param_declaration
    (100) sem_add_param -> . empty
    (76) empty -> .

    COMMA           reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)

    sem_add_param                  shift and go to state 218
    empty                          shift and go to state 219

state 206

    (22) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call . RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub

    RIGHT_PAR       shift and go to state 220


state 207

    (32) block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .

    $end            reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    FUNCTION        reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    MAIN            reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    ELSE            reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    RETURN          reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    ID              reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    IF              reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    WHILE           reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    READ            reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    WRITE           reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    RIGHT_BRACE     reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    INT             reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    DOUBLE          reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)
    BOOL            reduce using rule 32 (block_2 -> RETURN sem_push_operator mega_exp sem_return_function SEMICOLON block_3 .)


state 208

    (42) assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value . SEMICOLON

    SEMICOLON       shift and go to state 221


state 209

    (90) sem_assign_value -> empty .

    SEMICOLON       reduce using rule 90 (sem_assign_value -> empty .)


state 210

    (68) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR . sem_count_params sem_gosub
    (104) sem_count_params -> . empty
    (76) empty -> .

    SEMICOLON       reduce using rule 76 (empty -> .)

    sem_count_params               shift and go to state 222
    empty                          shift and go to state 223

state 211

    (69) param_call -> mega_exp sem_check_param .
    (70) param_call -> mega_exp sem_check_param . COMMA param_call

    RIGHT_PAR       reduce using rule 69 (param_call -> mega_exp sem_check_param .)
    COMMA           shift and go to state 224


state 212

    (103) sem_check_param -> empty .

    COMMA           reduce using rule 103 (sem_check_param -> empty .)
    RIGHT_PAR       reduce using rule 103 (sem_check_param -> empty .)


state 213

    (65) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block . condition_1 sem_fill_gotof
    (66) condition_1 -> . ELSE sem_else_condition block
    (67) condition_1 -> . empty
    (76) empty -> .

    ELSE            shift and go to state 226
    RETURN          reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    IF              reduce using rule 76 (empty -> .)
    WHILE           reduce using rule 76 (empty -> .)
    READ            reduce using rule 76 (empty -> .)
    WRITE           reduce using rule 76 (empty -> .)
    RIGHT_BRACE     reduce using rule 76 (empty -> .)
    INT             reduce using rule 76 (empty -> .)
    DOUBLE          reduce using rule 76 (empty -> .)
    BOOL            reduce using rule 76 (empty -> .)

    condition_1                    shift and go to state 225
    empty                          shift and go to state 227

state 214

    (72) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition . block sem_end_while
    (29) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 40

    block                          shift and go to state 228

state 215

    (73) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write . SEMICOLON

    SEMICOLON       shift and go to state 229


state 216

    (91) sem_read_write -> empty .

    SEMICOLON       reduce using rule 91 (sem_read_write -> empty .)


state 217

    (74) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write . SEMICOLON

    SEMICOLON       shift and go to state 230


state 218

    (12) param_declaration -> var_type array ID sem_add_param .
    (13) param_declaration -> var_type array ID sem_add_param . COMMA param_declaration

    RIGHT_PAR       reduce using rule 12 (param_declaration -> var_type array ID sem_add_param .)
    COMMA           shift and go to state 231


state 219

    (100) sem_add_param -> empty .

    COMMA           reduce using rule 100 (sem_add_param -> empty .)
    RIGHT_PAR       reduce using rule 100 (sem_add_param -> empty .)


state 220

    (22) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR . sem_false_bottom_end sem_count_params sem_gosub
    (89) sem_false_bottom_end -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    RIGHT_BRACKET   reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_false_bottom_end           shift and go to state 232
    empty                          shift and go to state 192

state 221

    (42) assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .

    RETURN          reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    ID              reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    IF              reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    WHILE           reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    READ            reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    WRITE           reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    RIGHT_BRACE     reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    INT             reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    DOUBLE          reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    BOOL            reduce using rule 42 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)


state 222

    (68) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params . sem_gosub
    (105) sem_gosub -> . empty
    (76) empty -> .

    SEMICOLON       reduce using rule 76 (empty -> .)

    sem_gosub                      shift and go to state 233
    empty                          shift and go to state 234

state 223

    (104) sem_count_params -> empty .

    SEMICOLON       reduce using rule 104 (sem_count_params -> empty .)
    MULTIPLY        reduce using rule 104 (sem_count_params -> empty .)
    DIVIDE          reduce using rule 104 (sem_count_params -> empty .)
    PLUS            reduce using rule 104 (sem_count_params -> empty .)
    MINUS           reduce using rule 104 (sem_count_params -> empty .)
    IS_EQUAL_TO     reduce using rule 104 (sem_count_params -> empty .)
    NOT_EQUAL_TO    reduce using rule 104 (sem_count_params -> empty .)
    GREATER_THAN    reduce using rule 104 (sem_count_params -> empty .)
    LESS_THAN       reduce using rule 104 (sem_count_params -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 104 (sem_count_params -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 104 (sem_count_params -> empty .)
    AND             reduce using rule 104 (sem_count_params -> empty .)
    OR              reduce using rule 104 (sem_count_params -> empty .)
    RIGHT_BRACKET   reduce using rule 104 (sem_count_params -> empty .)
    RIGHT_PAR       reduce using rule 104 (sem_count_params -> empty .)
    COMMA           reduce using rule 104 (sem_count_params -> empty .)


state 224

    (70) param_call -> mega_exp sem_check_param COMMA . param_call
    (69) param_call -> . mega_exp sem_check_param
    (70) param_call -> . mega_exp sem_check_param COMMA param_call
    (71) param_call -> . empty
    (43) mega_exp -> . hyper_exp mega_exp_1
    (76) empty -> .
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (18) var_cte -> . CTE_I sem_push_constant_int
    (19) var_cte -> . CTE_D sem_push_constant_double
    (20) var_cte -> . cte_b sem_push_constant_bool
    (21) var_cte -> . ID sem_push_operand array
    (22) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (23) cte_b -> . TRUE
    (24) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 76 (empty -> .)
    LEFT_PAR        shift and go to state 51
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CTE_I           shift and go to state 53
    CTE_D           shift and go to state 54
    ID              shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    mega_exp                       shift and go to state 197
    param_call                     shift and go to state 235
    empty                          shift and go to state 198
    hyper_exp                      shift and go to state 45
    exp                            shift and go to state 46
    term                           shift and go to state 47
    factor                         shift and go to state 50
    var_cte                        shift and go to state 52
    cte_b                          shift and go to state 55

state 225

    (65) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 . sem_fill_gotof
    (96) sem_fill_gotof -> . empty
    (76) empty -> .

    RETURN          reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    IF              reduce using rule 76 (empty -> .)
    WHILE           reduce using rule 76 (empty -> .)
    READ            reduce using rule 76 (empty -> .)
    WRITE           reduce using rule 76 (empty -> .)
    RIGHT_BRACE     reduce using rule 76 (empty -> .)
    INT             reduce using rule 76 (empty -> .)
    DOUBLE          reduce using rule 76 (empty -> .)
    BOOL            reduce using rule 76 (empty -> .)

    sem_fill_gotof                 shift and go to state 236
    empty                          shift and go to state 237

state 226

    (66) condition_1 -> ELSE . sem_else_condition block
    (97) sem_else_condition -> . empty
    (76) empty -> .

    LEFT_BRACE      reduce using rule 76 (empty -> .)

    sem_else_condition             shift and go to state 238
    empty                          shift and go to state 239

state 227

    (67) condition_1 -> empty .

    RETURN          reduce using rule 67 (condition_1 -> empty .)
    ID              reduce using rule 67 (condition_1 -> empty .)
    IF              reduce using rule 67 (condition_1 -> empty .)
    WHILE           reduce using rule 67 (condition_1 -> empty .)
    READ            reduce using rule 67 (condition_1 -> empty .)
    WRITE           reduce using rule 67 (condition_1 -> empty .)
    RIGHT_BRACE     reduce using rule 67 (condition_1 -> empty .)
    INT             reduce using rule 67 (condition_1 -> empty .)
    DOUBLE          reduce using rule 67 (condition_1 -> empty .)
    BOOL            reduce using rule 67 (condition_1 -> empty .)


state 228

    (72) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block . sem_end_while
    (99) sem_end_while -> . empty
    (76) empty -> .

    RETURN          reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    IF              reduce using rule 76 (empty -> .)
    WHILE           reduce using rule 76 (empty -> .)
    READ            reduce using rule 76 (empty -> .)
    WRITE           reduce using rule 76 (empty -> .)
    RIGHT_BRACE     reduce using rule 76 (empty -> .)
    INT             reduce using rule 76 (empty -> .)
    DOUBLE          reduce using rule 76 (empty -> .)
    BOOL            reduce using rule 76 (empty -> .)

    sem_end_while                  shift and go to state 240
    empty                          shift and go to state 241

state 229

    (73) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .

    RETURN          reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    ID              reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    IF              reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WHILE           reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    READ            reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WRITE           reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RIGHT_BRACE     reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    INT             reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    DOUBLE          reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    BOOL            reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)


state 230

    (74) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .

    RETURN          reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    ID              reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    IF              reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WHILE           reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    READ            reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WRITE           reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RIGHT_BRACE     reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    INT             reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    DOUBLE          reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    BOOL            reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)


state 231

    (13) param_declaration -> var_type array ID sem_add_param COMMA . param_declaration
    (12) param_declaration -> . var_type array ID sem_add_param
    (13) param_declaration -> . var_type array ID sem_add_param COMMA param_declaration
    (14) param_declaration -> . empty
    (15) var_type -> . INT sem_get_type
    (16) var_type -> . DOUBLE sem_get_type
    (17) var_type -> . BOOL sem_get_type
    (76) empty -> .

    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    RIGHT_PAR       reduce using rule 76 (empty -> .)

    var_type                       shift and go to state 152
    param_declaration              shift and go to state 242
    empty                          shift and go to state 153

state 232

    (22) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end . sem_count_params sem_gosub
    (104) sem_count_params -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    RIGHT_BRACKET   reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_count_params               shift and go to state 243
    empty                          shift and go to state 223

state 233

    (68) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .

    SEMICOLON       reduce using rule 68 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params sem_gosub .)


state 234

    (105) sem_gosub -> empty .

    SEMICOLON       reduce using rule 105 (sem_gosub -> empty .)
    MULTIPLY        reduce using rule 105 (sem_gosub -> empty .)
    DIVIDE          reduce using rule 105 (sem_gosub -> empty .)
    PLUS            reduce using rule 105 (sem_gosub -> empty .)
    MINUS           reduce using rule 105 (sem_gosub -> empty .)
    IS_EQUAL_TO     reduce using rule 105 (sem_gosub -> empty .)
    NOT_EQUAL_TO    reduce using rule 105 (sem_gosub -> empty .)
    GREATER_THAN    reduce using rule 105 (sem_gosub -> empty .)
    LESS_THAN       reduce using rule 105 (sem_gosub -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 105 (sem_gosub -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 105 (sem_gosub -> empty .)
    AND             reduce using rule 105 (sem_gosub -> empty .)
    OR              reduce using rule 105 (sem_gosub -> empty .)
    RIGHT_BRACKET   reduce using rule 105 (sem_gosub -> empty .)
    RIGHT_PAR       reduce using rule 105 (sem_gosub -> empty .)
    COMMA           reduce using rule 105 (sem_gosub -> empty .)


state 235

    (70) param_call -> mega_exp sem_check_param COMMA param_call .

    RIGHT_PAR       reduce using rule 70 (param_call -> mega_exp sem_check_param COMMA param_call .)


state 236

    (65) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .

    RETURN          reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    ID              reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    IF              reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    WHILE           reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    READ            reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    WRITE           reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    RIGHT_BRACE     reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    INT             reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    DOUBLE          reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    BOOL            reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)


state 237

    (96) sem_fill_gotof -> empty .

    RETURN          reduce using rule 96 (sem_fill_gotof -> empty .)
    ID              reduce using rule 96 (sem_fill_gotof -> empty .)
    IF              reduce using rule 96 (sem_fill_gotof -> empty .)
    WHILE           reduce using rule 96 (sem_fill_gotof -> empty .)
    READ            reduce using rule 96 (sem_fill_gotof -> empty .)
    WRITE           reduce using rule 96 (sem_fill_gotof -> empty .)
    RIGHT_BRACE     reduce using rule 96 (sem_fill_gotof -> empty .)
    INT             reduce using rule 96 (sem_fill_gotof -> empty .)
    DOUBLE          reduce using rule 96 (sem_fill_gotof -> empty .)
    BOOL            reduce using rule 96 (sem_fill_gotof -> empty .)


state 238

    (66) condition_1 -> ELSE sem_else_condition . block
    (29) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 40

    block                          shift and go to state 244

state 239

    (97) sem_else_condition -> empty .

    LEFT_BRACE      reduce using rule 97 (sem_else_condition -> empty .)


state 240

    (72) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .

    RETURN          reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    ID              reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    IF              reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    WHILE           reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    READ            reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    WRITE           reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    RIGHT_BRACE     reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    INT             reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    DOUBLE          reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    BOOL            reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)


state 241

    (99) sem_end_while -> empty .

    RETURN          reduce using rule 99 (sem_end_while -> empty .)
    ID              reduce using rule 99 (sem_end_while -> empty .)
    IF              reduce using rule 99 (sem_end_while -> empty .)
    WHILE           reduce using rule 99 (sem_end_while -> empty .)
    READ            reduce using rule 99 (sem_end_while -> empty .)
    WRITE           reduce using rule 99 (sem_end_while -> empty .)
    RIGHT_BRACE     reduce using rule 99 (sem_end_while -> empty .)
    INT             reduce using rule 99 (sem_end_while -> empty .)
    DOUBLE          reduce using rule 99 (sem_end_while -> empty .)
    BOOL            reduce using rule 99 (sem_end_while -> empty .)


state 242

    (13) param_declaration -> var_type array ID sem_add_param COMMA param_declaration .

    RIGHT_PAR       reduce using rule 13 (param_declaration -> var_type array ID sem_add_param COMMA param_declaration .)


state 243

    (22) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params . sem_gosub
    (105) sem_gosub -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    RIGHT_BRACKET   reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_gosub                      shift and go to state 245
    empty                          shift and go to state 234

state 244

    (66) condition_1 -> ELSE sem_else_condition block .

    RETURN          reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    ID              reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    IF              reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    WHILE           reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    READ            reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    WRITE           reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    RIGHT_BRACE     reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    INT             reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    DOUBLE          reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    BOOL            reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)


state 245

    (22) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .

    MULTIPLY        reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    DIVIDE          reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    PLUS            reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    MINUS           reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    IS_EQUAL_TO     reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    NOT_EQUAL_TO    reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    GREATER_THAN    reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    LESS_THAN       reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    AND             reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    OR              reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    RIGHT_BRACKET   reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    RIGHT_PAR       reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    SEMICOLON       reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    COMMA           reduce using rule 22 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 2 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for IF in state 40 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 40 resolved as shift
WARNING: shift/reduce conflict for READ in state 40 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 40 resolved as shift
WARNING: shift/reduce conflict for RIGHT_BRACE in state 40 resolved as shift
WARNING: shift/reduce conflict for INT in state 40 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 40 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 40 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for IF in state 62 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 62 resolved as shift
WARNING: shift/reduce conflict for READ in state 62 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 62 resolved as shift
WARNING: shift/reduce conflict for RIGHT_BRACE in state 62 resolved as shift
WARNING: shift/reduce conflict for INT in state 62 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 62 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 62 resolved as shift

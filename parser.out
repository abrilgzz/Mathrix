Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD_COLS
    ADD_ROWS
    CTE_S
    FIND_DETERMINANT
    MULTIPLY_COLS
    MULTIPLY_MATRIX
    MULTIPLY_ROWS
    PRINT_MATRIX
    SWAP_COLS
    SWAP_ROWS
    TRANSPOSE_MATRIX

Grammar

Rule 0     S' -> start
Rule 1     start -> sem_start_program global_declaration
Rule 2     global_declaration -> var_declaration global_declaration
Rule 3     global_declaration -> func_declaration
Rule 4     var_declaration -> var_type ID sem_add_var SEMICOLON
Rule 5     var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix
Rule 6     var_declaration -> empty
Rule 7     matrix_declaration -> LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim1 LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim2
Rule 8     matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
Rule 9     matrix -> empty
Rule 10    func_declaration -> func_signature func_declaration
Rule 11    func_declaration -> main
Rule 12    func_signature -> FUNCTION func_type matrix func_signature_1 sem_end_func
Rule 13    func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block
Rule 14    param_declaration -> var_type matrix ID sem_add_param
Rule 15    param_declaration -> var_type matrix ID sem_add_param COMMA param_declaration
Rule 16    param_declaration -> empty
Rule 17    var_type -> INT sem_get_type
Rule 18    var_type -> DOUBLE sem_get_type
Rule 19    var_type -> BOOL sem_get_type
Rule 20    var_cte -> CTE_I sem_push_constant_int
Rule 21    var_cte -> CTE_D sem_push_constant_double
Rule 22    var_cte -> cte_b sem_push_constant_bool
Rule 23    var_cte -> ID sem_push_operand matrix
Rule 24    var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
Rule 25    cte_b -> TRUE
Rule 26    cte_b -> FALSE
Rule 27    func_type -> INT sem_get_type
Rule 28    func_type -> DOUBLE sem_get_type
Rule 29    func_type -> BOOL sem_get_type
Rule 30    func_type -> VOID sem_get_type
Rule 31    block -> LEFT_BRACE var_declaration statements RIGHT_BRACE
Rule 32    statements -> statement statements
Rule 33    statements -> empty
Rule 34    statement -> assignment
Rule 35    statement -> condition
Rule 36    statement -> return
Rule 37    statement -> function_call
Rule 38    statement -> while_cycle
Rule 39    statement -> read
Rule 40    statement -> write
Rule 41    assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
Rule 42    return -> RETURN mega_exp sem_return_function SEMICOLON
Rule 43    mega_exp -> hyper_exp mega_exp_1
Rule 44    mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical
Rule 45    mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical
Rule 46    mega_exp_1 -> empty
Rule 47    hyper_exp -> exp hyper_exp_1
Rule 48    hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 49    hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 50    hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational
Rule 51    hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational
Rule 52    hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 53    hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 54    hyper_exp_1 -> empty
Rule 55    exp -> term sem_top_term
Rule 56    exp -> term sem_top_term PLUS sem_push_operator exp
Rule 57    exp -> term sem_top_term MINUS sem_push_operator exp
Rule 58    term -> factor sem_top_factor
Rule 59    term -> factor sem_top_factor MULTIPLY sem_push_operator term
Rule 60    term -> factor sem_top_factor DIVIDE sem_push_operator term
Rule 61    factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
Rule 62    factor -> var_cte
Rule 63    factor -> PLUS sem_push_operator var_cte
Rule 64    factor -> MINUS sem_push_operator var_cte
Rule 65    condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
Rule 66    condition_1 -> ELSE sem_else_condition block
Rule 67    condition_1 -> empty
Rule 68    function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
Rule 69    param_call -> mega_exp sem_check_param
Rule 70    param_call -> mega_exp sem_check_param COMMA param_call
Rule 71    param_call -> empty
Rule 72    while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
Rule 73    read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
Rule 74    write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
Rule 75    main -> MAIN sem_fill_goto_main block sem_fill_eras sem_end_main
Rule 76    empty -> <empty>
Rule 77    sem_get_type -> empty
Rule 78    sem_add_func -> empty
Rule 79    sem_end_func -> empty
Rule 80    sem_add_var -> empty
Rule 81    sem_push_operator -> empty
Rule 82    sem_push_operand -> empty
Rule 83    sem_push_constant_int -> empty
Rule 84    sem_push_constant_double -> empty
Rule 85    sem_push_constant_bool -> empty
Rule 86    sem_top_factor -> empty
Rule 87    sem_top_term -> empty
Rule 88    sem_false_bottom_begin -> empty
Rule 89    sem_false_bottom_end -> empty
Rule 90    sem_assign_value -> empty
Rule 91    sem_read_write -> empty
Rule 92    sem_return_function -> empty
Rule 93    sem_top_logical -> <empty>
Rule 94    sem_top_relational -> <empty>
Rule 95    sem_end_condition -> empty
Rule 96    sem_fill_gotof -> empty
Rule 97    sem_else_condition -> empty
Rule 98    sem_start_while -> empty
Rule 99    sem_end_while -> empty
Rule 100   sem_add_param -> empty
Rule 101   sem_check_function -> empty
Rule 102   sem_create_era -> empty
Rule 103   sem_check_param -> empty
Rule 104   sem_count_params -> empty
Rule 105   sem_gosub -> empty
Rule 106   sem_start_program -> empty
Rule 107   sem_fill_goto_main -> empty
Rule 108   sem_end_main -> empty
Rule 109   sem_fill_eras -> empty
Rule 110   sem_get_matrix_id -> empty
Rule 111   sem_add_dim1 -> empty
Rule 112   sem_add_dim2 -> empty
Rule 113   sem_add_matrix -> empty

Terminals, with rules where they appear

ADD_COLS             : 
ADD_ROWS             : 
AND                  : 44
ASSIGN               : 41
BOOL                 : 19 29
COMMA                : 15 70
CTE_D                : 21
CTE_I                : 7 7 8 8 20
CTE_S                : 
DIVIDE               : 60
DOUBLE               : 18 28
ELSE                 : 66
FALSE                : 26
FIND_DETERMINANT     : 
FUNCTION             : 12
GREATER_THAN         : 50
GREATER_THAN_OR_EQUAL_TO : 52
ID                   : 4 5 13 14 15 23 24 41 68
IF                   : 65
INT                  : 17 27
IS_EQUAL_TO          : 48
LEFT_BRACE           : 31
LEFT_BRACKET         : 7 7 8 8
LEFT_PAR             : 13 24 61 65 68 72 73 74
LESS_THAN            : 51
LESS_THAN_OR_EQUAL_TO : 53
MAIN                 : 75
MINUS                : 57 64
MULTIPLY             : 59
MULTIPLY_COLS        : 
MULTIPLY_MATRIX      : 
MULTIPLY_ROWS        : 
NOT_EQUAL_TO         : 49
OR                   : 45
PLUS                 : 56 63
PRINT_MATRIX         : 
READ                 : 73
RETURN               : 42
RIGHT_BRACE          : 31
RIGHT_BRACKET        : 7 7 8 8
RIGHT_PAR            : 13 24 61 65 68 72 73 74
SEMICOLON            : 4 5 41 42 68 73 74
SWAP_COLS            : 
SWAP_ROWS            : 
TRANSPOSE_MATRIX     : 
TRUE                 : 25
VOID                 : 30
WHILE                : 72
WRITE                : 74
error                : 

Nonterminals, with rules where they appear

assignment           : 34
block                : 13 65 66 72 75
condition            : 35
condition_1          : 65
cte_b                : 22
empty                : 6 9 16 33 46 54 67 71 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113
exp                  : 47 48 49 50 51 52 53 56 57
factor               : 58 59 60
func_declaration     : 3 10
func_signature       : 10
func_signature_1     : 12
func_type            : 12
function_call        : 37
global_declaration   : 1 2
hyper_exp            : 43
hyper_exp_1          : 47
main                 : 11
matrix               : 12 14 15 23
matrix_declaration   : 5
mega_exp             : 41 42 44 45 61 65 69 70 72 73 74
mega_exp_1           : 43
param_call           : 24 68 70
param_declaration    : 13 15
read                 : 39
return               : 36
sem_add_dim1         : 7
sem_add_dim2         : 7
sem_add_func         : 13
sem_add_matrix       : 5
sem_add_param        : 14 15
sem_add_var          : 4
sem_assign_value     : 41
sem_check_function   : 24 68
sem_check_param      : 69 70
sem_count_params     : 24 68
sem_create_era       : 24 68
sem_else_condition   : 66
sem_end_condition    : 65 72
sem_end_func         : 12
sem_end_main         : 75
sem_end_while        : 72
sem_false_bottom_begin : 24 61
sem_false_bottom_end : 24 61
sem_fill_eras        : 75
sem_fill_goto_main   : 75
sem_fill_gotof       : 65
sem_get_matrix_id    : 5
sem_get_type         : 17 18 19 27 28 29 30
sem_gosub            : 24 68
sem_push_constant_bool : 22
sem_push_constant_double : 21
sem_push_constant_int : 20
sem_push_operand     : 23 41
sem_push_operator    : 41 44 45 48 49 50 51 52 53 56 57 59 60 63 64 73 74
sem_read_write       : 73 74
sem_return_function  : 42
sem_start_program    : 1
sem_start_while      : 72
sem_top_factor       : 58 59 60
sem_top_logical      : 44 45
sem_top_relational   : 48 49 50 51 52 53
sem_top_term         : 55 56 57
start                : 0
statement            : 32
statements           : 31 32
term                 : 55 56 57 59 60
var_cte              : 62 63 64
var_declaration      : 2 31
var_type             : 4 5 14 15
while_cycle          : 38
write                : 40

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . sem_start_program global_declaration
    (106) sem_start_program -> . empty
    (76) empty -> .

    INT             reduce using rule 76 (empty -> .)
    DOUBLE          reduce using rule 76 (empty -> .)
    BOOL            reduce using rule 76 (empty -> .)
    FUNCTION        reduce using rule 76 (empty -> .)
    MAIN            reduce using rule 76 (empty -> .)

    start                          shift and go to state 1
    sem_start_program              shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> sem_start_program . global_declaration
    (2) global_declaration -> . var_declaration global_declaration
    (3) global_declaration -> . func_declaration
    (4) var_declaration -> . var_type ID sem_add_var SEMICOLON
    (5) var_declaration -> . var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix
    (6) var_declaration -> . empty
    (10) func_declaration -> . func_signature func_declaration
    (11) func_declaration -> . main
    (17) var_type -> . INT sem_get_type
    (18) var_type -> . DOUBLE sem_get_type
    (19) var_type -> . BOOL sem_get_type
    (76) empty -> .
    (12) func_signature -> . FUNCTION func_type matrix func_signature_1 sem_end_func
    (75) main -> . MAIN sem_fill_goto_main block sem_fill_eras sem_end_main

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    FUNCTION        shift and go to state 14
    MAIN            shift and go to state 15

  ! INT             [ reduce using rule 76 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 76 (empty -> .) ]
  ! BOOL            [ reduce using rule 76 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 76 (empty -> .) ]
  ! MAIN            [ reduce using rule 76 (empty -> .) ]

    global_declaration             shift and go to state 4
    var_declaration                shift and go to state 5
    func_declaration               shift and go to state 6
    var_type                       shift and go to state 7
    empty                          shift and go to state 8
    func_signature                 shift and go to state 9
    main                           shift and go to state 10

state 3

    (106) sem_start_program -> empty .

    INT             reduce using rule 106 (sem_start_program -> empty .)
    DOUBLE          reduce using rule 106 (sem_start_program -> empty .)
    BOOL            reduce using rule 106 (sem_start_program -> empty .)
    FUNCTION        reduce using rule 106 (sem_start_program -> empty .)
    MAIN            reduce using rule 106 (sem_start_program -> empty .)


state 4

    (1) start -> sem_start_program global_declaration .

    $end            reduce using rule 1 (start -> sem_start_program global_declaration .)


state 5

    (2) global_declaration -> var_declaration . global_declaration
    (2) global_declaration -> . var_declaration global_declaration
    (3) global_declaration -> . func_declaration
    (4) var_declaration -> . var_type ID sem_add_var SEMICOLON
    (5) var_declaration -> . var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix
    (6) var_declaration -> . empty
    (10) func_declaration -> . func_signature func_declaration
    (11) func_declaration -> . main
    (17) var_type -> . INT sem_get_type
    (18) var_type -> . DOUBLE sem_get_type
    (19) var_type -> . BOOL sem_get_type
    (76) empty -> .
    (12) func_signature -> . FUNCTION func_type matrix func_signature_1 sem_end_func
    (75) main -> . MAIN sem_fill_goto_main block sem_fill_eras sem_end_main

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    FUNCTION        shift and go to state 14
    MAIN            shift and go to state 15

  ! INT             [ reduce using rule 76 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 76 (empty -> .) ]
  ! BOOL            [ reduce using rule 76 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 76 (empty -> .) ]
  ! MAIN            [ reduce using rule 76 (empty -> .) ]

    var_declaration                shift and go to state 5
    global_declaration             shift and go to state 16
    func_declaration               shift and go to state 6
    var_type                       shift and go to state 7
    empty                          shift and go to state 8
    func_signature                 shift and go to state 9
    main                           shift and go to state 10

state 6

    (3) global_declaration -> func_declaration .

    $end            reduce using rule 3 (global_declaration -> func_declaration .)


state 7

    (4) var_declaration -> var_type . ID sem_add_var SEMICOLON
    (5) var_declaration -> var_type . ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix

    ID              shift and go to state 17


state 8

    (6) var_declaration -> empty .

    INT             reduce using rule 6 (var_declaration -> empty .)
    DOUBLE          reduce using rule 6 (var_declaration -> empty .)
    BOOL            reduce using rule 6 (var_declaration -> empty .)
    FUNCTION        reduce using rule 6 (var_declaration -> empty .)
    MAIN            reduce using rule 6 (var_declaration -> empty .)
    ID              reduce using rule 6 (var_declaration -> empty .)
    IF              reduce using rule 6 (var_declaration -> empty .)
    RETURN          reduce using rule 6 (var_declaration -> empty .)
    WHILE           reduce using rule 6 (var_declaration -> empty .)
    READ            reduce using rule 6 (var_declaration -> empty .)
    WRITE           reduce using rule 6 (var_declaration -> empty .)
    RIGHT_BRACE     reduce using rule 6 (var_declaration -> empty .)


state 9

    (10) func_declaration -> func_signature . func_declaration
    (10) func_declaration -> . func_signature func_declaration
    (11) func_declaration -> . main
    (12) func_signature -> . FUNCTION func_type matrix func_signature_1 sem_end_func
    (75) main -> . MAIN sem_fill_goto_main block sem_fill_eras sem_end_main

    FUNCTION        shift and go to state 14
    MAIN            shift and go to state 15

    func_signature                 shift and go to state 9
    func_declaration               shift and go to state 18
    main                           shift and go to state 10

state 10

    (11) func_declaration -> main .

    $end            reduce using rule 11 (func_declaration -> main .)


state 11

    (17) var_type -> INT . sem_get_type
    (77) sem_get_type -> . empty
    (76) empty -> .

    ID              reduce using rule 76 (empty -> .)
    LEFT_BRACKET    reduce using rule 76 (empty -> .)

    sem_get_type                   shift and go to state 19
    empty                          shift and go to state 20

state 12

    (18) var_type -> DOUBLE . sem_get_type
    (77) sem_get_type -> . empty
    (76) empty -> .

    ID              reduce using rule 76 (empty -> .)
    LEFT_BRACKET    reduce using rule 76 (empty -> .)

    sem_get_type                   shift and go to state 21
    empty                          shift and go to state 20

state 13

    (19) var_type -> BOOL . sem_get_type
    (77) sem_get_type -> . empty
    (76) empty -> .

    ID              reduce using rule 76 (empty -> .)
    LEFT_BRACKET    reduce using rule 76 (empty -> .)

    sem_get_type                   shift and go to state 22
    empty                          shift and go to state 20

state 14

    (12) func_signature -> FUNCTION . func_type matrix func_signature_1 sem_end_func
    (27) func_type -> . INT sem_get_type
    (28) func_type -> . DOUBLE sem_get_type
    (29) func_type -> . BOOL sem_get_type
    (30) func_type -> . VOID sem_get_type

    INT             shift and go to state 24
    DOUBLE          shift and go to state 25
    BOOL            shift and go to state 26
    VOID            shift and go to state 27

    func_type                      shift and go to state 23

state 15

    (75) main -> MAIN . sem_fill_goto_main block sem_fill_eras sem_end_main
    (107) sem_fill_goto_main -> . empty
    (76) empty -> .

    LEFT_BRACE      reduce using rule 76 (empty -> .)

    sem_fill_goto_main             shift and go to state 28
    empty                          shift and go to state 29

state 16

    (2) global_declaration -> var_declaration global_declaration .

    $end            reduce using rule 2 (global_declaration -> var_declaration global_declaration .)


state 17

    (4) var_declaration -> var_type ID . sem_add_var SEMICOLON
    (5) var_declaration -> var_type ID . sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix
    (80) sem_add_var -> . empty
    (110) sem_get_matrix_id -> . empty
    (76) empty -> .

    SEMICOLON       reduce using rule 76 (empty -> .)
    LEFT_BRACKET    reduce using rule 76 (empty -> .)

    sem_add_var                    shift and go to state 30
    sem_get_matrix_id              shift and go to state 31
    empty                          shift and go to state 32

state 18

    (10) func_declaration -> func_signature func_declaration .

    $end            reduce using rule 10 (func_declaration -> func_signature func_declaration .)


state 19

    (17) var_type -> INT sem_get_type .

    ID              reduce using rule 17 (var_type -> INT sem_get_type .)
    LEFT_BRACKET    reduce using rule 17 (var_type -> INT sem_get_type .)


state 20

    (77) sem_get_type -> empty .

    ID              reduce using rule 77 (sem_get_type -> empty .)
    LEFT_BRACKET    reduce using rule 77 (sem_get_type -> empty .)


state 21

    (18) var_type -> DOUBLE sem_get_type .

    ID              reduce using rule 18 (var_type -> DOUBLE sem_get_type .)
    LEFT_BRACKET    reduce using rule 18 (var_type -> DOUBLE sem_get_type .)


state 22

    (19) var_type -> BOOL sem_get_type .

    ID              reduce using rule 19 (var_type -> BOOL sem_get_type .)
    LEFT_BRACKET    reduce using rule 19 (var_type -> BOOL sem_get_type .)


state 23

    (12) func_signature -> FUNCTION func_type . matrix func_signature_1 sem_end_func
    (8) matrix -> . LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (9) matrix -> . empty
    (76) empty -> .

    LEFT_BRACKET    shift and go to state 34
    ID              reduce using rule 76 (empty -> .)

    matrix                         shift and go to state 33
    empty                          shift and go to state 35

state 24

    (27) func_type -> INT . sem_get_type
    (77) sem_get_type -> . empty
    (76) empty -> .

    LEFT_BRACKET    reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    sem_get_type                   shift and go to state 36
    empty                          shift and go to state 20

state 25

    (28) func_type -> DOUBLE . sem_get_type
    (77) sem_get_type -> . empty
    (76) empty -> .

    LEFT_BRACKET    reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    sem_get_type                   shift and go to state 37
    empty                          shift and go to state 20

state 26

    (29) func_type -> BOOL . sem_get_type
    (77) sem_get_type -> . empty
    (76) empty -> .

    LEFT_BRACKET    reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    sem_get_type                   shift and go to state 38
    empty                          shift and go to state 20

state 27

    (30) func_type -> VOID . sem_get_type
    (77) sem_get_type -> . empty
    (76) empty -> .

    LEFT_BRACKET    reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)

    sem_get_type                   shift and go to state 39
    empty                          shift and go to state 20

state 28

    (75) main -> MAIN sem_fill_goto_main . block sem_fill_eras sem_end_main
    (31) block -> . LEFT_BRACE var_declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 41

    block                          shift and go to state 40

state 29

    (107) sem_fill_goto_main -> empty .

    LEFT_BRACE      reduce using rule 107 (sem_fill_goto_main -> empty .)


state 30

    (4) var_declaration -> var_type ID sem_add_var . SEMICOLON

    SEMICOLON       shift and go to state 42


state 31

    (5) var_declaration -> var_type ID sem_get_matrix_id . matrix_declaration SEMICOLON sem_add_matrix
    (7) matrix_declaration -> . LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim1 LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim2

    LEFT_BRACKET    shift and go to state 44

    matrix_declaration             shift and go to state 43

state 32

    (80) sem_add_var -> empty .
    (110) sem_get_matrix_id -> empty .

    SEMICOLON       reduce using rule 80 (sem_add_var -> empty .)
    LEFT_BRACKET    reduce using rule 110 (sem_get_matrix_id -> empty .)


state 33

    (12) func_signature -> FUNCTION func_type matrix . func_signature_1 sem_end_func
    (13) func_signature_1 -> . ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block

    ID              shift and go to state 46

    func_signature_1               shift and go to state 45

state 34

    (8) matrix -> LEFT_BRACKET . CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET

    CTE_I           shift and go to state 47


state 35

    (9) matrix -> empty .

    ID              reduce using rule 9 (matrix -> empty .)
    MULTIPLY        reduce using rule 9 (matrix -> empty .)
    DIVIDE          reduce using rule 9 (matrix -> empty .)
    PLUS            reduce using rule 9 (matrix -> empty .)
    MINUS           reduce using rule 9 (matrix -> empty .)
    IS_EQUAL_TO     reduce using rule 9 (matrix -> empty .)
    NOT_EQUAL_TO    reduce using rule 9 (matrix -> empty .)
    GREATER_THAN    reduce using rule 9 (matrix -> empty .)
    LESS_THAN       reduce using rule 9 (matrix -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 9 (matrix -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 9 (matrix -> empty .)
    AND             reduce using rule 9 (matrix -> empty .)
    OR              reduce using rule 9 (matrix -> empty .)
    SEMICOLON       reduce using rule 9 (matrix -> empty .)
    RIGHT_PAR       reduce using rule 9 (matrix -> empty .)
    COMMA           reduce using rule 9 (matrix -> empty .)


state 36

    (27) func_type -> INT sem_get_type .

    LEFT_BRACKET    reduce using rule 27 (func_type -> INT sem_get_type .)
    ID              reduce using rule 27 (func_type -> INT sem_get_type .)


state 37

    (28) func_type -> DOUBLE sem_get_type .

    LEFT_BRACKET    reduce using rule 28 (func_type -> DOUBLE sem_get_type .)
    ID              reduce using rule 28 (func_type -> DOUBLE sem_get_type .)


state 38

    (29) func_type -> BOOL sem_get_type .

    LEFT_BRACKET    reduce using rule 29 (func_type -> BOOL sem_get_type .)
    ID              reduce using rule 29 (func_type -> BOOL sem_get_type .)


state 39

    (30) func_type -> VOID sem_get_type .

    LEFT_BRACKET    reduce using rule 30 (func_type -> VOID sem_get_type .)
    ID              reduce using rule 30 (func_type -> VOID sem_get_type .)


state 40

    (75) main -> MAIN sem_fill_goto_main block . sem_fill_eras sem_end_main
    (109) sem_fill_eras -> . empty
    (76) empty -> .

    $end            reduce using rule 76 (empty -> .)

    sem_fill_eras                  shift and go to state 48
    empty                          shift and go to state 49

state 41

    (31) block -> LEFT_BRACE . var_declaration statements RIGHT_BRACE
    (4) var_declaration -> . var_type ID sem_add_var SEMICOLON
    (5) var_declaration -> . var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix
    (6) var_declaration -> . empty
    (17) var_type -> . INT sem_get_type
    (18) var_type -> . DOUBLE sem_get_type
    (19) var_type -> . BOOL sem_get_type
    (76) empty -> .

    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    ID              reduce using rule 76 (empty -> .)
    IF              reduce using rule 76 (empty -> .)
    RETURN          reduce using rule 76 (empty -> .)
    WHILE           reduce using rule 76 (empty -> .)
    READ            reduce using rule 76 (empty -> .)
    WRITE           reduce using rule 76 (empty -> .)
    RIGHT_BRACE     reduce using rule 76 (empty -> .)

    var_declaration                shift and go to state 50
    var_type                       shift and go to state 7
    empty                          shift and go to state 8

state 42

    (4) var_declaration -> var_type ID sem_add_var SEMICOLON .

    INT             reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    DOUBLE          reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    BOOL            reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    FUNCTION        reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    MAIN            reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    ID              reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    IF              reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    RETURN          reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    WHILE           reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    READ            reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    WRITE           reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (var_declaration -> var_type ID sem_add_var SEMICOLON .)


state 43

    (5) var_declaration -> var_type ID sem_get_matrix_id matrix_declaration . SEMICOLON sem_add_matrix

    SEMICOLON       shift and go to state 51


state 44

    (7) matrix_declaration -> LEFT_BRACKET . CTE_I RIGHT_BRACKET sem_add_dim1 LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim2

    CTE_I           shift and go to state 52


state 45

    (12) func_signature -> FUNCTION func_type matrix func_signature_1 . sem_end_func
    (79) sem_end_func -> . empty
    (76) empty -> .

    FUNCTION        reduce using rule 76 (empty -> .)
    MAIN            reduce using rule 76 (empty -> .)

    sem_end_func                   shift and go to state 53
    empty                          shift and go to state 54

state 46

    (13) func_signature_1 -> ID . sem_add_func LEFT_PAR param_declaration RIGHT_PAR block
    (78) sem_add_func -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)

    sem_add_func                   shift and go to state 55
    empty                          shift and go to state 56

state 47

    (8) matrix -> LEFT_BRACKET CTE_I . RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 57


state 48

    (75) main -> MAIN sem_fill_goto_main block sem_fill_eras . sem_end_main
    (108) sem_end_main -> . empty
    (76) empty -> .

    $end            reduce using rule 76 (empty -> .)

    sem_end_main                   shift and go to state 58
    empty                          shift and go to state 59

state 49

    (109) sem_fill_eras -> empty .

    $end            reduce using rule 109 (sem_fill_eras -> empty .)


state 50

    (31) block -> LEFT_BRACE var_declaration . statements RIGHT_BRACE
    (32) statements -> . statement statements
    (33) statements -> . empty
    (34) statement -> . assignment
    (35) statement -> . condition
    (36) statement -> . return
    (37) statement -> . function_call
    (38) statement -> . while_cycle
    (39) statement -> . read
    (40) statement -> . write
    (76) empty -> .
    (41) assignment -> . ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (65) condition -> . IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (42) return -> . RETURN mega_exp sem_return_function SEMICOLON
    (68) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (72) while_cycle -> . WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (73) read -> . READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (74) write -> . WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_BRACE     reduce using rule 76 (empty -> .)
    ID              shift and go to state 70
    IF              shift and go to state 71
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    READ            shift and go to state 74
    WRITE           shift and go to state 75

    statements                     shift and go to state 60
    statement                      shift and go to state 61
    empty                          shift and go to state 62
    assignment                     shift and go to state 63
    condition                      shift and go to state 64
    return                         shift and go to state 65
    function_call                  shift and go to state 66
    while_cycle                    shift and go to state 67
    read                           shift and go to state 68
    write                          shift and go to state 69

state 51

    (5) var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON . sem_add_matrix
    (113) sem_add_matrix -> . empty
    (76) empty -> .

    INT             reduce using rule 76 (empty -> .)
    DOUBLE          reduce using rule 76 (empty -> .)
    BOOL            reduce using rule 76 (empty -> .)
    FUNCTION        reduce using rule 76 (empty -> .)
    MAIN            reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    IF              reduce using rule 76 (empty -> .)
    RETURN          reduce using rule 76 (empty -> .)
    WHILE           reduce using rule 76 (empty -> .)
    READ            reduce using rule 76 (empty -> .)
    WRITE           reduce using rule 76 (empty -> .)
    RIGHT_BRACE     reduce using rule 76 (empty -> .)

    sem_add_matrix                 shift and go to state 76
    empty                          shift and go to state 77

state 52

    (7) matrix_declaration -> LEFT_BRACKET CTE_I . RIGHT_BRACKET sem_add_dim1 LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim2

    RIGHT_BRACKET   shift and go to state 78


state 53

    (12) func_signature -> FUNCTION func_type matrix func_signature_1 sem_end_func .

    FUNCTION        reduce using rule 12 (func_signature -> FUNCTION func_type matrix func_signature_1 sem_end_func .)
    MAIN            reduce using rule 12 (func_signature -> FUNCTION func_type matrix func_signature_1 sem_end_func .)


state 54

    (79) sem_end_func -> empty .

    FUNCTION        reduce using rule 79 (sem_end_func -> empty .)
    MAIN            reduce using rule 79 (sem_end_func -> empty .)


state 55

    (13) func_signature_1 -> ID sem_add_func . LEFT_PAR param_declaration RIGHT_PAR block

    LEFT_PAR        shift and go to state 79


state 56

    (78) sem_add_func -> empty .

    LEFT_PAR        reduce using rule 78 (sem_add_func -> empty .)


state 57

    (8) matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET . LEFT_BRACKET CTE_I RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 80


state 58

    (75) main -> MAIN sem_fill_goto_main block sem_fill_eras sem_end_main .

    $end            reduce using rule 75 (main -> MAIN sem_fill_goto_main block sem_fill_eras sem_end_main .)


state 59

    (108) sem_end_main -> empty .

    $end            reduce using rule 108 (sem_end_main -> empty .)


state 60

    (31) block -> LEFT_BRACE var_declaration statements . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 81


state 61

    (32) statements -> statement . statements
    (32) statements -> . statement statements
    (33) statements -> . empty
    (34) statement -> . assignment
    (35) statement -> . condition
    (36) statement -> . return
    (37) statement -> . function_call
    (38) statement -> . while_cycle
    (39) statement -> . read
    (40) statement -> . write
    (76) empty -> .
    (41) assignment -> . ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (65) condition -> . IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (42) return -> . RETURN mega_exp sem_return_function SEMICOLON
    (68) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (72) while_cycle -> . WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (73) read -> . READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (74) write -> . WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_BRACE     reduce using rule 76 (empty -> .)
    ID              shift and go to state 70
    IF              shift and go to state 71
    RETURN          shift and go to state 72
    WHILE           shift and go to state 73
    READ            shift and go to state 74
    WRITE           shift and go to state 75

    statement                      shift and go to state 61
    statements                     shift and go to state 82
    empty                          shift and go to state 62
    assignment                     shift and go to state 63
    condition                      shift and go to state 64
    return                         shift and go to state 65
    function_call                  shift and go to state 66
    while_cycle                    shift and go to state 67
    read                           shift and go to state 68
    write                          shift and go to state 69

state 62

    (33) statements -> empty .

    RIGHT_BRACE     reduce using rule 33 (statements -> empty .)


state 63

    (34) statement -> assignment .

    ID              reduce using rule 34 (statement -> assignment .)
    IF              reduce using rule 34 (statement -> assignment .)
    RETURN          reduce using rule 34 (statement -> assignment .)
    WHILE           reduce using rule 34 (statement -> assignment .)
    READ            reduce using rule 34 (statement -> assignment .)
    WRITE           reduce using rule 34 (statement -> assignment .)
    RIGHT_BRACE     reduce using rule 34 (statement -> assignment .)


state 64

    (35) statement -> condition .

    ID              reduce using rule 35 (statement -> condition .)
    IF              reduce using rule 35 (statement -> condition .)
    RETURN          reduce using rule 35 (statement -> condition .)
    WHILE           reduce using rule 35 (statement -> condition .)
    READ            reduce using rule 35 (statement -> condition .)
    WRITE           reduce using rule 35 (statement -> condition .)
    RIGHT_BRACE     reduce using rule 35 (statement -> condition .)


state 65

    (36) statement -> return .

    ID              reduce using rule 36 (statement -> return .)
    IF              reduce using rule 36 (statement -> return .)
    RETURN          reduce using rule 36 (statement -> return .)
    WHILE           reduce using rule 36 (statement -> return .)
    READ            reduce using rule 36 (statement -> return .)
    WRITE           reduce using rule 36 (statement -> return .)
    RIGHT_BRACE     reduce using rule 36 (statement -> return .)


state 66

    (37) statement -> function_call .

    ID              reduce using rule 37 (statement -> function_call .)
    IF              reduce using rule 37 (statement -> function_call .)
    RETURN          reduce using rule 37 (statement -> function_call .)
    WHILE           reduce using rule 37 (statement -> function_call .)
    READ            reduce using rule 37 (statement -> function_call .)
    WRITE           reduce using rule 37 (statement -> function_call .)
    RIGHT_BRACE     reduce using rule 37 (statement -> function_call .)


state 67

    (38) statement -> while_cycle .

    ID              reduce using rule 38 (statement -> while_cycle .)
    IF              reduce using rule 38 (statement -> while_cycle .)
    RETURN          reduce using rule 38 (statement -> while_cycle .)
    WHILE           reduce using rule 38 (statement -> while_cycle .)
    READ            reduce using rule 38 (statement -> while_cycle .)
    WRITE           reduce using rule 38 (statement -> while_cycle .)
    RIGHT_BRACE     reduce using rule 38 (statement -> while_cycle .)


state 68

    (39) statement -> read .

    ID              reduce using rule 39 (statement -> read .)
    IF              reduce using rule 39 (statement -> read .)
    RETURN          reduce using rule 39 (statement -> read .)
    WHILE           reduce using rule 39 (statement -> read .)
    READ            reduce using rule 39 (statement -> read .)
    WRITE           reduce using rule 39 (statement -> read .)
    RIGHT_BRACE     reduce using rule 39 (statement -> read .)


state 69

    (40) statement -> write .

    ID              reduce using rule 40 (statement -> write .)
    IF              reduce using rule 40 (statement -> write .)
    RETURN          reduce using rule 40 (statement -> write .)
    WHILE           reduce using rule 40 (statement -> write .)
    READ            reduce using rule 40 (statement -> write .)
    WRITE           reduce using rule 40 (statement -> write .)
    RIGHT_BRACE     reduce using rule 40 (statement -> write .)


state 70

    (41) assignment -> ID . sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (68) function_call -> ID . sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (82) sem_push_operand -> . empty
    (101) sem_check_function -> . empty
    (76) empty -> .

    ASSIGN          reduce using rule 76 (empty -> .)
    LEFT_PAR        reduce using rule 76 (empty -> .)

    sem_push_operand               shift and go to state 83
    sem_check_function             shift and go to state 84
    empty                          shift and go to state 85

state 71

    (65) condition -> IF . LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof

    LEFT_PAR        shift and go to state 86


state 72

    (42) return -> RETURN . mega_exp sem_return_function SEMICOLON
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    mega_exp                       shift and go to state 87
    hyper_exp                      shift and go to state 88
    exp                            shift and go to state 89
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 73

    (72) while_cycle -> WHILE . sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (98) sem_start_while -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)

    sem_start_while                shift and go to state 102
    empty                          shift and go to state 103

state 74

    (73) read -> READ . sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 104
    empty                          shift and go to state 105

state 75

    (74) write -> WRITE . sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 106
    empty                          shift and go to state 105

state 76

    (5) var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .

    INT             reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    DOUBLE          reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    BOOL            reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    FUNCTION        reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    MAIN            reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    ID              reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    IF              reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    RETURN          reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    WHILE           reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    READ            reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    WRITE           reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)
    RIGHT_BRACE     reduce using rule 5 (var_declaration -> var_type ID sem_get_matrix_id matrix_declaration SEMICOLON sem_add_matrix .)


state 77

    (113) sem_add_matrix -> empty .

    INT             reduce using rule 113 (sem_add_matrix -> empty .)
    DOUBLE          reduce using rule 113 (sem_add_matrix -> empty .)
    BOOL            reduce using rule 113 (sem_add_matrix -> empty .)
    FUNCTION        reduce using rule 113 (sem_add_matrix -> empty .)
    MAIN            reduce using rule 113 (sem_add_matrix -> empty .)
    ID              reduce using rule 113 (sem_add_matrix -> empty .)
    IF              reduce using rule 113 (sem_add_matrix -> empty .)
    RETURN          reduce using rule 113 (sem_add_matrix -> empty .)
    WHILE           reduce using rule 113 (sem_add_matrix -> empty .)
    READ            reduce using rule 113 (sem_add_matrix -> empty .)
    WRITE           reduce using rule 113 (sem_add_matrix -> empty .)
    RIGHT_BRACE     reduce using rule 113 (sem_add_matrix -> empty .)


state 78

    (7) matrix_declaration -> LEFT_BRACKET CTE_I RIGHT_BRACKET . sem_add_dim1 LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim2
    (111) sem_add_dim1 -> . empty
    (76) empty -> .

    LEFT_BRACKET    reduce using rule 76 (empty -> .)

    sem_add_dim1                   shift and go to state 107
    empty                          shift and go to state 108

state 79

    (13) func_signature_1 -> ID sem_add_func LEFT_PAR . param_declaration RIGHT_PAR block
    (14) param_declaration -> . var_type matrix ID sem_add_param
    (15) param_declaration -> . var_type matrix ID sem_add_param COMMA param_declaration
    (16) param_declaration -> . empty
    (17) var_type -> . INT sem_get_type
    (18) var_type -> . DOUBLE sem_get_type
    (19) var_type -> . BOOL sem_get_type
    (76) empty -> .

    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    RIGHT_PAR       reduce using rule 76 (empty -> .)

    param_declaration              shift and go to state 109
    var_type                       shift and go to state 110
    empty                          shift and go to state 111

state 80

    (8) matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET . CTE_I RIGHT_BRACKET

    CTE_I           shift and go to state 112


state 81

    (31) block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .

    $end            reduce using rule 31 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    FUNCTION        reduce using rule 31 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    MAIN            reduce using rule 31 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    ELSE            reduce using rule 31 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    ID              reduce using rule 31 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    IF              reduce using rule 31 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    RETURN          reduce using rule 31 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    WHILE           reduce using rule 31 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    READ            reduce using rule 31 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    WRITE           reduce using rule 31 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 31 (block -> LEFT_BRACE var_declaration statements RIGHT_BRACE .)


state 82

    (32) statements -> statement statements .

    RIGHT_BRACE     reduce using rule 32 (statements -> statement statements .)


state 83

    (41) assignment -> ID sem_push_operand . ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON

    ASSIGN          shift and go to state 113


state 84

    (68) function_call -> ID sem_check_function . LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub

    LEFT_PAR        shift and go to state 114


state 85

    (82) sem_push_operand -> empty .
    (101) sem_check_function -> empty .

    ASSIGN          reduce using rule 82 (sem_push_operand -> empty .)
    LEFT_BRACKET    reduce using rule 82 (sem_push_operand -> empty .)
    MULTIPLY        reduce using rule 82 (sem_push_operand -> empty .)
    DIVIDE          reduce using rule 82 (sem_push_operand -> empty .)
    PLUS            reduce using rule 82 (sem_push_operand -> empty .)
    MINUS           reduce using rule 82 (sem_push_operand -> empty .)
    IS_EQUAL_TO     reduce using rule 82 (sem_push_operand -> empty .)
    NOT_EQUAL_TO    reduce using rule 82 (sem_push_operand -> empty .)
    GREATER_THAN    reduce using rule 82 (sem_push_operand -> empty .)
    LESS_THAN       reduce using rule 82 (sem_push_operand -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 82 (sem_push_operand -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 82 (sem_push_operand -> empty .)
    AND             reduce using rule 82 (sem_push_operand -> empty .)
    OR              reduce using rule 82 (sem_push_operand -> empty .)
    SEMICOLON       reduce using rule 82 (sem_push_operand -> empty .)
    RIGHT_PAR       reduce using rule 82 (sem_push_operand -> empty .)
    COMMA           reduce using rule 82 (sem_push_operand -> empty .)
    LEFT_PAR        reduce using rule 101 (sem_check_function -> empty .)


state 86

    (65) condition -> IF LEFT_PAR . mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    mega_exp                       shift and go to state 115
    hyper_exp                      shift and go to state 88
    exp                            shift and go to state 89
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 87

    (42) return -> RETURN mega_exp . sem_return_function SEMICOLON
    (92) sem_return_function -> . empty
    (76) empty -> .

    SEMICOLON       reduce using rule 76 (empty -> .)

    sem_return_function            shift and go to state 116
    empty                          shift and go to state 117

state 88

    (43) mega_exp -> hyper_exp . mega_exp_1
    (44) mega_exp_1 -> . AND sem_push_operator mega_exp sem_top_logical
    (45) mega_exp_1 -> . OR sem_push_operator mega_exp sem_top_logical
    (46) mega_exp_1 -> . empty
    (76) empty -> .

    AND             shift and go to state 119
    OR              shift and go to state 120
    SEMICOLON       reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    mega_exp_1                     shift and go to state 118
    empty                          shift and go to state 121

state 89

    (47) hyper_exp -> exp . hyper_exp_1
    (48) hyper_exp_1 -> . IS_EQUAL_TO sem_push_operator exp sem_top_relational
    (49) hyper_exp_1 -> . NOT_EQUAL_TO sem_push_operator exp sem_top_relational
    (50) hyper_exp_1 -> . GREATER_THAN sem_push_operator exp sem_top_relational
    (51) hyper_exp_1 -> . LESS_THAN sem_push_operator exp sem_top_relational
    (52) hyper_exp_1 -> . GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
    (53) hyper_exp_1 -> . LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
    (54) hyper_exp_1 -> . empty
    (76) empty -> .

    IS_EQUAL_TO     shift and go to state 123
    NOT_EQUAL_TO    shift and go to state 124
    GREATER_THAN    shift and go to state 125
    LESS_THAN       shift and go to state 126
    GREATER_THAN_OR_EQUAL_TO shift and go to state 127
    LESS_THAN_OR_EQUAL_TO shift and go to state 128
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    hyper_exp_1                    shift and go to state 122
    empty                          shift and go to state 129

state 90

    (55) exp -> term . sem_top_term
    (56) exp -> term . sem_top_term PLUS sem_push_operator exp
    (57) exp -> term . sem_top_term MINUS sem_push_operator exp
    (87) sem_top_term -> . empty
    (76) empty -> .

    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_top_term                   shift and go to state 130
    empty                          shift and go to state 131

state 91

    (63) factor -> PLUS . sem_push_operator var_cte
    (81) sem_push_operator -> . empty
    (76) empty -> .

    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 132
    empty                          shift and go to state 105

state 92

    (64) factor -> MINUS . sem_push_operator var_cte
    (81) sem_push_operator -> . empty
    (76) empty -> .

    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 133
    empty                          shift and go to state 105

state 93

    (58) term -> factor . sem_top_factor
    (59) term -> factor . sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> factor . sem_top_factor DIVIDE sem_push_operator term
    (86) sem_top_factor -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_top_factor                 shift and go to state 134
    empty                          shift and go to state 135

state 94

    (61) factor -> LEFT_PAR . sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (88) sem_false_bottom_begin -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_false_bottom_begin         shift and go to state 136
    empty                          shift and go to state 137

state 95

    (62) factor -> var_cte .

    MULTIPLY        reduce using rule 62 (factor -> var_cte .)
    DIVIDE          reduce using rule 62 (factor -> var_cte .)
    PLUS            reduce using rule 62 (factor -> var_cte .)
    MINUS           reduce using rule 62 (factor -> var_cte .)
    IS_EQUAL_TO     reduce using rule 62 (factor -> var_cte .)
    NOT_EQUAL_TO    reduce using rule 62 (factor -> var_cte .)
    GREATER_THAN    reduce using rule 62 (factor -> var_cte .)
    LESS_THAN       reduce using rule 62 (factor -> var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 62 (factor -> var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 62 (factor -> var_cte .)
    AND             reduce using rule 62 (factor -> var_cte .)
    OR              reduce using rule 62 (factor -> var_cte .)
    SEMICOLON       reduce using rule 62 (factor -> var_cte .)
    RIGHT_PAR       reduce using rule 62 (factor -> var_cte .)
    COMMA           reduce using rule 62 (factor -> var_cte .)


state 96

    (20) var_cte -> CTE_I . sem_push_constant_int
    (83) sem_push_constant_int -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_push_constant_int          shift and go to state 138
    empty                          shift and go to state 139

state 97

    (21) var_cte -> CTE_D . sem_push_constant_double
    (84) sem_push_constant_double -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_push_constant_double       shift and go to state 140
    empty                          shift and go to state 141

state 98

    (22) var_cte -> cte_b . sem_push_constant_bool
    (85) sem_push_constant_bool -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_push_constant_bool         shift and go to state 142
    empty                          shift and go to state 143

state 99

    (23) var_cte -> ID . sem_push_operand matrix
    (24) var_cte -> ID . sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (82) sem_push_operand -> . empty
    (101) sem_check_function -> . empty
    (76) empty -> .

    LEFT_BRACKET    reduce using rule 76 (empty -> .)
    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)
    LEFT_PAR        reduce using rule 76 (empty -> .)

    sem_push_operand               shift and go to state 144
    sem_check_function             shift and go to state 145
    empty                          shift and go to state 85

state 100

    (25) cte_b -> TRUE .

    MULTIPLY        reduce using rule 25 (cte_b -> TRUE .)
    DIVIDE          reduce using rule 25 (cte_b -> TRUE .)
    PLUS            reduce using rule 25 (cte_b -> TRUE .)
    MINUS           reduce using rule 25 (cte_b -> TRUE .)
    IS_EQUAL_TO     reduce using rule 25 (cte_b -> TRUE .)
    NOT_EQUAL_TO    reduce using rule 25 (cte_b -> TRUE .)
    GREATER_THAN    reduce using rule 25 (cte_b -> TRUE .)
    LESS_THAN       reduce using rule 25 (cte_b -> TRUE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 25 (cte_b -> TRUE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 25 (cte_b -> TRUE .)
    AND             reduce using rule 25 (cte_b -> TRUE .)
    OR              reduce using rule 25 (cte_b -> TRUE .)
    SEMICOLON       reduce using rule 25 (cte_b -> TRUE .)
    RIGHT_PAR       reduce using rule 25 (cte_b -> TRUE .)
    COMMA           reduce using rule 25 (cte_b -> TRUE .)


state 101

    (26) cte_b -> FALSE .

    MULTIPLY        reduce using rule 26 (cte_b -> FALSE .)
    DIVIDE          reduce using rule 26 (cte_b -> FALSE .)
    PLUS            reduce using rule 26 (cte_b -> FALSE .)
    MINUS           reduce using rule 26 (cte_b -> FALSE .)
    IS_EQUAL_TO     reduce using rule 26 (cte_b -> FALSE .)
    NOT_EQUAL_TO    reduce using rule 26 (cte_b -> FALSE .)
    GREATER_THAN    reduce using rule 26 (cte_b -> FALSE .)
    LESS_THAN       reduce using rule 26 (cte_b -> FALSE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 26 (cte_b -> FALSE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 26 (cte_b -> FALSE .)
    AND             reduce using rule 26 (cte_b -> FALSE .)
    OR              reduce using rule 26 (cte_b -> FALSE .)
    SEMICOLON       reduce using rule 26 (cte_b -> FALSE .)
    RIGHT_PAR       reduce using rule 26 (cte_b -> FALSE .)
    COMMA           reduce using rule 26 (cte_b -> FALSE .)


state 102

    (72) while_cycle -> WHILE sem_start_while . LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while

    LEFT_PAR        shift and go to state 146


state 103

    (98) sem_start_while -> empty .

    LEFT_PAR        reduce using rule 98 (sem_start_while -> empty .)


state 104

    (73) read -> READ sem_push_operator . LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    LEFT_PAR        shift and go to state 147


state 105

    (81) sem_push_operator -> empty .

    LEFT_PAR        reduce using rule 81 (sem_push_operator -> empty .)
    CTE_I           reduce using rule 81 (sem_push_operator -> empty .)
    CTE_D           reduce using rule 81 (sem_push_operator -> empty .)
    ID              reduce using rule 81 (sem_push_operator -> empty .)
    TRUE            reduce using rule 81 (sem_push_operator -> empty .)
    FALSE           reduce using rule 81 (sem_push_operator -> empty .)
    PLUS            reduce using rule 81 (sem_push_operator -> empty .)
    MINUS           reduce using rule 81 (sem_push_operator -> empty .)


state 106

    (74) write -> WRITE sem_push_operator . LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    LEFT_PAR        shift and go to state 148


state 107

    (7) matrix_declaration -> LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim1 . LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim2

    LEFT_BRACKET    shift and go to state 149


state 108

    (111) sem_add_dim1 -> empty .

    LEFT_BRACKET    reduce using rule 111 (sem_add_dim1 -> empty .)


state 109

    (13) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration . RIGHT_PAR block

    RIGHT_PAR       shift and go to state 150


state 110

    (14) param_declaration -> var_type . matrix ID sem_add_param
    (15) param_declaration -> var_type . matrix ID sem_add_param COMMA param_declaration
    (8) matrix -> . LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (9) matrix -> . empty
    (76) empty -> .

    LEFT_BRACKET    shift and go to state 34
    ID              reduce using rule 76 (empty -> .)

    matrix                         shift and go to state 151
    empty                          shift and go to state 35

state 111

    (16) param_declaration -> empty .

    RIGHT_PAR       reduce using rule 16 (param_declaration -> empty .)


state 112

    (8) matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 152


state 113

    (41) assignment -> ID sem_push_operand ASSIGN . sem_push_operator mega_exp sem_assign_value SEMICOLON
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 153
    empty                          shift and go to state 105

state 114

    (68) function_call -> ID sem_check_function LEFT_PAR . sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (102) sem_create_era -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)

    sem_create_era                 shift and go to state 154
    empty                          shift and go to state 155

state 115

    (65) condition -> IF LEFT_PAR mega_exp . RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof

    RIGHT_PAR       shift and go to state 156


state 116

    (42) return -> RETURN mega_exp sem_return_function . SEMICOLON

    SEMICOLON       shift and go to state 157


state 117

    (92) sem_return_function -> empty .

    SEMICOLON       reduce using rule 92 (sem_return_function -> empty .)


state 118

    (43) mega_exp -> hyper_exp mega_exp_1 .

    SEMICOLON       reduce using rule 43 (mega_exp -> hyper_exp mega_exp_1 .)
    RIGHT_PAR       reduce using rule 43 (mega_exp -> hyper_exp mega_exp_1 .)
    COMMA           reduce using rule 43 (mega_exp -> hyper_exp mega_exp_1 .)


state 119

    (44) mega_exp_1 -> AND . sem_push_operator mega_exp sem_top_logical
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 158
    empty                          shift and go to state 105

state 120

    (45) mega_exp_1 -> OR . sem_push_operator mega_exp sem_top_logical
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 159
    empty                          shift and go to state 105

state 121

    (46) mega_exp_1 -> empty .

    SEMICOLON       reduce using rule 46 (mega_exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 46 (mega_exp_1 -> empty .)
    COMMA           reduce using rule 46 (mega_exp_1 -> empty .)


state 122

    (47) hyper_exp -> exp hyper_exp_1 .

    AND             reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)
    OR              reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)
    SEMICOLON       reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)
    RIGHT_PAR       reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)
    COMMA           reduce using rule 47 (hyper_exp -> exp hyper_exp_1 .)


state 123

    (48) hyper_exp_1 -> IS_EQUAL_TO . sem_push_operator exp sem_top_relational
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 160
    empty                          shift and go to state 105

state 124

    (49) hyper_exp_1 -> NOT_EQUAL_TO . sem_push_operator exp sem_top_relational
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 161
    empty                          shift and go to state 105

state 125

    (50) hyper_exp_1 -> GREATER_THAN . sem_push_operator exp sem_top_relational
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 162
    empty                          shift and go to state 105

state 126

    (51) hyper_exp_1 -> LESS_THAN . sem_push_operator exp sem_top_relational
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 163
    empty                          shift and go to state 105

state 127

    (52) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO . sem_push_operator exp sem_top_relational
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 164
    empty                          shift and go to state 105

state 128

    (53) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO . sem_push_operator exp sem_top_relational
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 165
    empty                          shift and go to state 105

state 129

    (54) hyper_exp_1 -> empty .

    AND             reduce using rule 54 (hyper_exp_1 -> empty .)
    OR              reduce using rule 54 (hyper_exp_1 -> empty .)
    SEMICOLON       reduce using rule 54 (hyper_exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 54 (hyper_exp_1 -> empty .)
    COMMA           reduce using rule 54 (hyper_exp_1 -> empty .)


state 130

    (55) exp -> term sem_top_term .
    (56) exp -> term sem_top_term . PLUS sem_push_operator exp
    (57) exp -> term sem_top_term . MINUS sem_push_operator exp

    IS_EQUAL_TO     reduce using rule 55 (exp -> term sem_top_term .)
    NOT_EQUAL_TO    reduce using rule 55 (exp -> term sem_top_term .)
    GREATER_THAN    reduce using rule 55 (exp -> term sem_top_term .)
    LESS_THAN       reduce using rule 55 (exp -> term sem_top_term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 55 (exp -> term sem_top_term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 55 (exp -> term sem_top_term .)
    AND             reduce using rule 55 (exp -> term sem_top_term .)
    OR              reduce using rule 55 (exp -> term sem_top_term .)
    SEMICOLON       reduce using rule 55 (exp -> term sem_top_term .)
    RIGHT_PAR       reduce using rule 55 (exp -> term sem_top_term .)
    COMMA           reduce using rule 55 (exp -> term sem_top_term .)
    PLUS            shift and go to state 166
    MINUS           shift and go to state 167


state 131

    (87) sem_top_term -> empty .

    PLUS            reduce using rule 87 (sem_top_term -> empty .)
    MINUS           reduce using rule 87 (sem_top_term -> empty .)
    IS_EQUAL_TO     reduce using rule 87 (sem_top_term -> empty .)
    NOT_EQUAL_TO    reduce using rule 87 (sem_top_term -> empty .)
    GREATER_THAN    reduce using rule 87 (sem_top_term -> empty .)
    LESS_THAN       reduce using rule 87 (sem_top_term -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 87 (sem_top_term -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 87 (sem_top_term -> empty .)
    AND             reduce using rule 87 (sem_top_term -> empty .)
    OR              reduce using rule 87 (sem_top_term -> empty .)
    SEMICOLON       reduce using rule 87 (sem_top_term -> empty .)
    RIGHT_PAR       reduce using rule 87 (sem_top_term -> empty .)
    COMMA           reduce using rule 87 (sem_top_term -> empty .)


state 132

    (63) factor -> PLUS sem_push_operator . var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    var_cte                        shift and go to state 168
    cte_b                          shift and go to state 98

state 133

    (64) factor -> MINUS sem_push_operator . var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    var_cte                        shift and go to state 169
    cte_b                          shift and go to state 98

state 134

    (58) term -> factor sem_top_factor .
    (59) term -> factor sem_top_factor . MULTIPLY sem_push_operator term
    (60) term -> factor sem_top_factor . DIVIDE sem_push_operator term

    PLUS            reduce using rule 58 (term -> factor sem_top_factor .)
    MINUS           reduce using rule 58 (term -> factor sem_top_factor .)
    IS_EQUAL_TO     reduce using rule 58 (term -> factor sem_top_factor .)
    NOT_EQUAL_TO    reduce using rule 58 (term -> factor sem_top_factor .)
    GREATER_THAN    reduce using rule 58 (term -> factor sem_top_factor .)
    LESS_THAN       reduce using rule 58 (term -> factor sem_top_factor .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 58 (term -> factor sem_top_factor .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 58 (term -> factor sem_top_factor .)
    AND             reduce using rule 58 (term -> factor sem_top_factor .)
    OR              reduce using rule 58 (term -> factor sem_top_factor .)
    SEMICOLON       reduce using rule 58 (term -> factor sem_top_factor .)
    RIGHT_PAR       reduce using rule 58 (term -> factor sem_top_factor .)
    COMMA           reduce using rule 58 (term -> factor sem_top_factor .)
    MULTIPLY        shift and go to state 170
    DIVIDE          shift and go to state 171


state 135

    (86) sem_top_factor -> empty .

    MULTIPLY        reduce using rule 86 (sem_top_factor -> empty .)
    DIVIDE          reduce using rule 86 (sem_top_factor -> empty .)
    PLUS            reduce using rule 86 (sem_top_factor -> empty .)
    MINUS           reduce using rule 86 (sem_top_factor -> empty .)
    IS_EQUAL_TO     reduce using rule 86 (sem_top_factor -> empty .)
    NOT_EQUAL_TO    reduce using rule 86 (sem_top_factor -> empty .)
    GREATER_THAN    reduce using rule 86 (sem_top_factor -> empty .)
    LESS_THAN       reduce using rule 86 (sem_top_factor -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 86 (sem_top_factor -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 86 (sem_top_factor -> empty .)
    AND             reduce using rule 86 (sem_top_factor -> empty .)
    OR              reduce using rule 86 (sem_top_factor -> empty .)
    SEMICOLON       reduce using rule 86 (sem_top_factor -> empty .)
    RIGHT_PAR       reduce using rule 86 (sem_top_factor -> empty .)
    COMMA           reduce using rule 86 (sem_top_factor -> empty .)


state 136

    (61) factor -> LEFT_PAR sem_false_bottom_begin . mega_exp RIGHT_PAR sem_false_bottom_end
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    mega_exp                       shift and go to state 172
    hyper_exp                      shift and go to state 88
    exp                            shift and go to state 89
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 137

    (88) sem_false_bottom_begin -> empty .

    LEFT_PAR        reduce using rule 88 (sem_false_bottom_begin -> empty .)
    PLUS            reduce using rule 88 (sem_false_bottom_begin -> empty .)
    MINUS           reduce using rule 88 (sem_false_bottom_begin -> empty .)
    CTE_I           reduce using rule 88 (sem_false_bottom_begin -> empty .)
    CTE_D           reduce using rule 88 (sem_false_bottom_begin -> empty .)
    ID              reduce using rule 88 (sem_false_bottom_begin -> empty .)
    TRUE            reduce using rule 88 (sem_false_bottom_begin -> empty .)
    FALSE           reduce using rule 88 (sem_false_bottom_begin -> empty .)
    RIGHT_PAR       reduce using rule 88 (sem_false_bottom_begin -> empty .)


state 138

    (20) var_cte -> CTE_I sem_push_constant_int .

    MULTIPLY        reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    DIVIDE          reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    PLUS            reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    MINUS           reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    IS_EQUAL_TO     reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    NOT_EQUAL_TO    reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    GREATER_THAN    reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    LESS_THAN       reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    AND             reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    OR              reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    SEMICOLON       reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    RIGHT_PAR       reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)
    COMMA           reduce using rule 20 (var_cte -> CTE_I sem_push_constant_int .)


state 139

    (83) sem_push_constant_int -> empty .

    MULTIPLY        reduce using rule 83 (sem_push_constant_int -> empty .)
    DIVIDE          reduce using rule 83 (sem_push_constant_int -> empty .)
    PLUS            reduce using rule 83 (sem_push_constant_int -> empty .)
    MINUS           reduce using rule 83 (sem_push_constant_int -> empty .)
    IS_EQUAL_TO     reduce using rule 83 (sem_push_constant_int -> empty .)
    NOT_EQUAL_TO    reduce using rule 83 (sem_push_constant_int -> empty .)
    GREATER_THAN    reduce using rule 83 (sem_push_constant_int -> empty .)
    LESS_THAN       reduce using rule 83 (sem_push_constant_int -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 83 (sem_push_constant_int -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 83 (sem_push_constant_int -> empty .)
    AND             reduce using rule 83 (sem_push_constant_int -> empty .)
    OR              reduce using rule 83 (sem_push_constant_int -> empty .)
    SEMICOLON       reduce using rule 83 (sem_push_constant_int -> empty .)
    RIGHT_PAR       reduce using rule 83 (sem_push_constant_int -> empty .)
    COMMA           reduce using rule 83 (sem_push_constant_int -> empty .)


state 140

    (21) var_cte -> CTE_D sem_push_constant_double .

    MULTIPLY        reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    DIVIDE          reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    PLUS            reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    MINUS           reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    IS_EQUAL_TO     reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    NOT_EQUAL_TO    reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    GREATER_THAN    reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    LESS_THAN       reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    AND             reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    OR              reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    SEMICOLON       reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    RIGHT_PAR       reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)
    COMMA           reduce using rule 21 (var_cte -> CTE_D sem_push_constant_double .)


state 141

    (84) sem_push_constant_double -> empty .

    MULTIPLY        reduce using rule 84 (sem_push_constant_double -> empty .)
    DIVIDE          reduce using rule 84 (sem_push_constant_double -> empty .)
    PLUS            reduce using rule 84 (sem_push_constant_double -> empty .)
    MINUS           reduce using rule 84 (sem_push_constant_double -> empty .)
    IS_EQUAL_TO     reduce using rule 84 (sem_push_constant_double -> empty .)
    NOT_EQUAL_TO    reduce using rule 84 (sem_push_constant_double -> empty .)
    GREATER_THAN    reduce using rule 84 (sem_push_constant_double -> empty .)
    LESS_THAN       reduce using rule 84 (sem_push_constant_double -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 84 (sem_push_constant_double -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 84 (sem_push_constant_double -> empty .)
    AND             reduce using rule 84 (sem_push_constant_double -> empty .)
    OR              reduce using rule 84 (sem_push_constant_double -> empty .)
    SEMICOLON       reduce using rule 84 (sem_push_constant_double -> empty .)
    RIGHT_PAR       reduce using rule 84 (sem_push_constant_double -> empty .)
    COMMA           reduce using rule 84 (sem_push_constant_double -> empty .)


state 142

    (22) var_cte -> cte_b sem_push_constant_bool .

    MULTIPLY        reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    DIVIDE          reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    PLUS            reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    MINUS           reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    IS_EQUAL_TO     reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    NOT_EQUAL_TO    reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    GREATER_THAN    reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    LESS_THAN       reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    AND             reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    OR              reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    SEMICOLON       reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    RIGHT_PAR       reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)
    COMMA           reduce using rule 22 (var_cte -> cte_b sem_push_constant_bool .)


state 143

    (85) sem_push_constant_bool -> empty .

    MULTIPLY        reduce using rule 85 (sem_push_constant_bool -> empty .)
    DIVIDE          reduce using rule 85 (sem_push_constant_bool -> empty .)
    PLUS            reduce using rule 85 (sem_push_constant_bool -> empty .)
    MINUS           reduce using rule 85 (sem_push_constant_bool -> empty .)
    IS_EQUAL_TO     reduce using rule 85 (sem_push_constant_bool -> empty .)
    NOT_EQUAL_TO    reduce using rule 85 (sem_push_constant_bool -> empty .)
    GREATER_THAN    reduce using rule 85 (sem_push_constant_bool -> empty .)
    LESS_THAN       reduce using rule 85 (sem_push_constant_bool -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 85 (sem_push_constant_bool -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 85 (sem_push_constant_bool -> empty .)
    AND             reduce using rule 85 (sem_push_constant_bool -> empty .)
    OR              reduce using rule 85 (sem_push_constant_bool -> empty .)
    SEMICOLON       reduce using rule 85 (sem_push_constant_bool -> empty .)
    RIGHT_PAR       reduce using rule 85 (sem_push_constant_bool -> empty .)
    COMMA           reduce using rule 85 (sem_push_constant_bool -> empty .)


state 144

    (23) var_cte -> ID sem_push_operand . matrix
    (8) matrix -> . LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (9) matrix -> . empty
    (76) empty -> .

    LEFT_BRACKET    shift and go to state 34
    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    matrix                         shift and go to state 173
    empty                          shift and go to state 35

state 145

    (24) var_cte -> ID sem_check_function . LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub

    LEFT_PAR        shift and go to state 174


state 146

    (72) while_cycle -> WHILE sem_start_while LEFT_PAR . mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    mega_exp                       shift and go to state 175
    hyper_exp                      shift and go to state 88
    exp                            shift and go to state 89
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 147

    (73) read -> READ sem_push_operator LEFT_PAR . mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    mega_exp                       shift and go to state 176
    hyper_exp                      shift and go to state 88
    exp                            shift and go to state 89
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 148

    (74) write -> WRITE sem_push_operator LEFT_PAR . mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    mega_exp                       shift and go to state 177
    hyper_exp                      shift and go to state 88
    exp                            shift and go to state 89
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 149

    (7) matrix_declaration -> LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim1 LEFT_BRACKET . CTE_I RIGHT_BRACKET sem_add_dim2

    CTE_I           shift and go to state 178


state 150

    (13) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR . block
    (31) block -> . LEFT_BRACE var_declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 41

    block                          shift and go to state 179

state 151

    (14) param_declaration -> var_type matrix . ID sem_add_param
    (15) param_declaration -> var_type matrix . ID sem_add_param COMMA param_declaration

    ID              shift and go to state 180


state 152

    (8) matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .

    ID              reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    MULTIPLY        reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    DIVIDE          reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    PLUS            reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    MINUS           reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    IS_EQUAL_TO     reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    NOT_EQUAL_TO    reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    GREATER_THAN    reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    LESS_THAN       reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    AND             reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    OR              reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    RIGHT_PAR       reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    COMMA           reduce using rule 8 (matrix -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)


state 153

    (41) assignment -> ID sem_push_operand ASSIGN sem_push_operator . mega_exp sem_assign_value SEMICOLON
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    mega_exp                       shift and go to state 181
    hyper_exp                      shift and go to state 88
    exp                            shift and go to state 89
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 154

    (68) function_call -> ID sem_check_function LEFT_PAR sem_create_era . param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (69) param_call -> . mega_exp sem_check_param
    (70) param_call -> . mega_exp sem_check_param COMMA param_call
    (71) param_call -> . empty
    (43) mega_exp -> . hyper_exp mega_exp_1
    (76) empty -> .
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 76 (empty -> .)
    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    param_call                     shift and go to state 182
    mega_exp                       shift and go to state 183
    empty                          shift and go to state 184
    hyper_exp                      shift and go to state 88
    exp                            shift and go to state 89
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 155

    (102) sem_create_era -> empty .

    LEFT_PAR        reduce using rule 102 (sem_create_era -> empty .)
    PLUS            reduce using rule 102 (sem_create_era -> empty .)
    MINUS           reduce using rule 102 (sem_create_era -> empty .)
    CTE_I           reduce using rule 102 (sem_create_era -> empty .)
    CTE_D           reduce using rule 102 (sem_create_era -> empty .)
    ID              reduce using rule 102 (sem_create_era -> empty .)
    TRUE            reduce using rule 102 (sem_create_era -> empty .)
    FALSE           reduce using rule 102 (sem_create_era -> empty .)
    RIGHT_PAR       reduce using rule 102 (sem_create_era -> empty .)


state 156

    (65) condition -> IF LEFT_PAR mega_exp RIGHT_PAR . sem_end_condition block condition_1 sem_fill_gotof
    (95) sem_end_condition -> . empty
    (76) empty -> .

    LEFT_BRACE      reduce using rule 76 (empty -> .)

    sem_end_condition              shift and go to state 185
    empty                          shift and go to state 186

state 157

    (42) return -> RETURN mega_exp sem_return_function SEMICOLON .

    ID              reduce using rule 42 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    IF              reduce using rule 42 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    RETURN          reduce using rule 42 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    WHILE           reduce using rule 42 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    READ            reduce using rule 42 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    WRITE           reduce using rule 42 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    RIGHT_BRACE     reduce using rule 42 (return -> RETURN mega_exp sem_return_function SEMICOLON .)


state 158

    (44) mega_exp_1 -> AND sem_push_operator . mega_exp sem_top_logical
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    mega_exp                       shift and go to state 187
    hyper_exp                      shift and go to state 88
    exp                            shift and go to state 89
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 159

    (45) mega_exp_1 -> OR sem_push_operator . mega_exp sem_top_logical
    (43) mega_exp -> . hyper_exp mega_exp_1
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    mega_exp                       shift and go to state 188
    hyper_exp                      shift and go to state 88
    exp                            shift and go to state 89
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 160

    (48) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    exp                            shift and go to state 189
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 161

    (49) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    exp                            shift and go to state 190
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 162

    (50) hyper_exp_1 -> GREATER_THAN sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    exp                            shift and go to state 191
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 163

    (51) hyper_exp_1 -> LESS_THAN sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    exp                            shift and go to state 192
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 164

    (52) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    exp                            shift and go to state 193
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 165

    (53) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator . exp sem_top_relational
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    exp                            shift and go to state 194
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 166

    (56) exp -> term sem_top_term PLUS . sem_push_operator exp
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 195
    empty                          shift and go to state 105

state 167

    (57) exp -> term sem_top_term MINUS . sem_push_operator exp
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 196
    empty                          shift and go to state 105

state 168

    (63) factor -> PLUS sem_push_operator var_cte .

    MULTIPLY        reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    DIVIDE          reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    PLUS            reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    MINUS           reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    IS_EQUAL_TO     reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    NOT_EQUAL_TO    reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    GREATER_THAN    reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    LESS_THAN       reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    AND             reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    OR              reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    SEMICOLON       reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    RIGHT_PAR       reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)
    COMMA           reduce using rule 63 (factor -> PLUS sem_push_operator var_cte .)


state 169

    (64) factor -> MINUS sem_push_operator var_cte .

    MULTIPLY        reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    DIVIDE          reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    PLUS            reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    MINUS           reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    IS_EQUAL_TO     reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    NOT_EQUAL_TO    reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    GREATER_THAN    reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    LESS_THAN       reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    AND             reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    OR              reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    SEMICOLON       reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    RIGHT_PAR       reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)
    COMMA           reduce using rule 64 (factor -> MINUS sem_push_operator var_cte .)


state 170

    (59) term -> factor sem_top_factor MULTIPLY . sem_push_operator term
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 197
    empty                          shift and go to state 105

state 171

    (60) term -> factor sem_top_factor DIVIDE . sem_push_operator term
    (81) sem_push_operator -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)

    sem_push_operator              shift and go to state 198
    empty                          shift and go to state 105

state 172

    (61) factor -> LEFT_PAR sem_false_bottom_begin mega_exp . RIGHT_PAR sem_false_bottom_end

    RIGHT_PAR       shift and go to state 199


state 173

    (23) var_cte -> ID sem_push_operand matrix .

    MULTIPLY        reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    DIVIDE          reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    PLUS            reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    MINUS           reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    IS_EQUAL_TO     reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    NOT_EQUAL_TO    reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    GREATER_THAN    reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    LESS_THAN       reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    AND             reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    OR              reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    SEMICOLON       reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    RIGHT_PAR       reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)
    COMMA           reduce using rule 23 (var_cte -> ID sem_push_operand matrix .)


state 174

    (24) var_cte -> ID sem_check_function LEFT_PAR . sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (88) sem_false_bottom_begin -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)

    sem_false_bottom_begin         shift and go to state 200
    empty                          shift and go to state 137

state 175

    (72) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp . RIGHT_PAR sem_end_condition block sem_end_while

    RIGHT_PAR       shift and go to state 201


state 176

    (73) read -> READ sem_push_operator LEFT_PAR mega_exp . RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_PAR       shift and go to state 202


state 177

    (74) write -> WRITE sem_push_operator LEFT_PAR mega_exp . RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_PAR       shift and go to state 203


state 178

    (7) matrix_declaration -> LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim1 LEFT_BRACKET CTE_I . RIGHT_BRACKET sem_add_dim2

    RIGHT_BRACKET   shift and go to state 204


state 179

    (13) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .

    FUNCTION        reduce using rule 13 (func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .)
    MAIN            reduce using rule 13 (func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .)


state 180

    (14) param_declaration -> var_type matrix ID . sem_add_param
    (15) param_declaration -> var_type matrix ID . sem_add_param COMMA param_declaration
    (100) sem_add_param -> . empty
    (76) empty -> .

    COMMA           reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)

    sem_add_param                  shift and go to state 205
    empty                          shift and go to state 206

state 181

    (41) assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp . sem_assign_value SEMICOLON
    (90) sem_assign_value -> . empty
    (76) empty -> .

    SEMICOLON       reduce using rule 76 (empty -> .)

    sem_assign_value               shift and go to state 207
    empty                          shift and go to state 208

state 182

    (68) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call . RIGHT_PAR sem_count_params SEMICOLON sem_gosub

    RIGHT_PAR       shift and go to state 209


state 183

    (69) param_call -> mega_exp . sem_check_param
    (70) param_call -> mega_exp . sem_check_param COMMA param_call
    (103) sem_check_param -> . empty
    (76) empty -> .

    COMMA           reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)

    sem_check_param                shift and go to state 210
    empty                          shift and go to state 211

state 184

    (71) param_call -> empty .

    RIGHT_PAR       reduce using rule 71 (param_call -> empty .)


state 185

    (65) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition . block condition_1 sem_fill_gotof
    (31) block -> . LEFT_BRACE var_declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 41

    block                          shift and go to state 212

state 186

    (95) sem_end_condition -> empty .

    LEFT_BRACE      reduce using rule 95 (sem_end_condition -> empty .)


state 187

    (44) mega_exp_1 -> AND sem_push_operator mega_exp . sem_top_logical
    (93) sem_top_logical -> .

    SEMICOLON       reduce using rule 93 (sem_top_logical -> .)
    RIGHT_PAR       reduce using rule 93 (sem_top_logical -> .)
    COMMA           reduce using rule 93 (sem_top_logical -> .)

    sem_top_logical                shift and go to state 213

state 188

    (45) mega_exp_1 -> OR sem_push_operator mega_exp . sem_top_logical
    (93) sem_top_logical -> .

    SEMICOLON       reduce using rule 93 (sem_top_logical -> .)
    RIGHT_PAR       reduce using rule 93 (sem_top_logical -> .)
    COMMA           reduce using rule 93 (sem_top_logical -> .)

    sem_top_logical                shift and go to state 214

state 189

    (48) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp . sem_top_relational
    (94) sem_top_relational -> .

    AND             reduce using rule 94 (sem_top_relational -> .)
    OR              reduce using rule 94 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 94 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 94 (sem_top_relational -> .)
    COMMA           reduce using rule 94 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 215

state 190

    (49) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp . sem_top_relational
    (94) sem_top_relational -> .

    AND             reduce using rule 94 (sem_top_relational -> .)
    OR              reduce using rule 94 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 94 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 94 (sem_top_relational -> .)
    COMMA           reduce using rule 94 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 216

state 191

    (50) hyper_exp_1 -> GREATER_THAN sem_push_operator exp . sem_top_relational
    (94) sem_top_relational -> .

    AND             reduce using rule 94 (sem_top_relational -> .)
    OR              reduce using rule 94 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 94 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 94 (sem_top_relational -> .)
    COMMA           reduce using rule 94 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 217

state 192

    (51) hyper_exp_1 -> LESS_THAN sem_push_operator exp . sem_top_relational
    (94) sem_top_relational -> .

    AND             reduce using rule 94 (sem_top_relational -> .)
    OR              reduce using rule 94 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 94 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 94 (sem_top_relational -> .)
    COMMA           reduce using rule 94 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 218

state 193

    (52) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp . sem_top_relational
    (94) sem_top_relational -> .

    AND             reduce using rule 94 (sem_top_relational -> .)
    OR              reduce using rule 94 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 94 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 94 (sem_top_relational -> .)
    COMMA           reduce using rule 94 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 219

state 194

    (53) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp . sem_top_relational
    (94) sem_top_relational -> .

    AND             reduce using rule 94 (sem_top_relational -> .)
    OR              reduce using rule 94 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 94 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 94 (sem_top_relational -> .)
    COMMA           reduce using rule 94 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 220

state 195

    (56) exp -> term sem_top_term PLUS sem_push_operator . exp
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    term                           shift and go to state 90
    exp                            shift and go to state 221
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 196

    (57) exp -> term sem_top_term MINUS sem_push_operator . exp
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    term                           shift and go to state 90
    exp                            shift and go to state 222
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 197

    (59) term -> factor sem_top_factor MULTIPLY sem_push_operator . term
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    factor                         shift and go to state 93
    term                           shift and go to state 223
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 198

    (60) term -> factor sem_top_factor DIVIDE sem_push_operator . term
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    factor                         shift and go to state 93
    term                           shift and go to state 224
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 199

    (61) factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR . sem_false_bottom_end
    (89) sem_false_bottom_end -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_false_bottom_end           shift and go to state 225
    empty                          shift and go to state 226

state 200

    (24) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin . sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (102) sem_create_era -> . empty
    (76) empty -> .

    LEFT_PAR        reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    CTE_I           reduce using rule 76 (empty -> .)
    CTE_D           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    TRUE            reduce using rule 76 (empty -> .)
    FALSE           reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)

    sem_create_era                 shift and go to state 227
    empty                          shift and go to state 155

state 201

    (72) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR . sem_end_condition block sem_end_while
    (95) sem_end_condition -> . empty
    (76) empty -> .

    LEFT_BRACE      reduce using rule 76 (empty -> .)

    sem_end_condition              shift and go to state 228
    empty                          shift and go to state 186

state 202

    (73) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR . sem_read_write SEMICOLON
    (91) sem_read_write -> . empty
    (76) empty -> .

    SEMICOLON       reduce using rule 76 (empty -> .)

    sem_read_write                 shift and go to state 229
    empty                          shift and go to state 230

state 203

    (74) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR . sem_read_write SEMICOLON
    (91) sem_read_write -> . empty
    (76) empty -> .

    SEMICOLON       reduce using rule 76 (empty -> .)

    sem_read_write                 shift and go to state 231
    empty                          shift and go to state 230

state 204

    (7) matrix_declaration -> LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim1 LEFT_BRACKET CTE_I RIGHT_BRACKET . sem_add_dim2
    (112) sem_add_dim2 -> . empty
    (76) empty -> .

    SEMICOLON       reduce using rule 76 (empty -> .)

    sem_add_dim2                   shift and go to state 232
    empty                          shift and go to state 233

state 205

    (14) param_declaration -> var_type matrix ID sem_add_param .
    (15) param_declaration -> var_type matrix ID sem_add_param . COMMA param_declaration

    RIGHT_PAR       reduce using rule 14 (param_declaration -> var_type matrix ID sem_add_param .)
    COMMA           shift and go to state 234


state 206

    (100) sem_add_param -> empty .

    COMMA           reduce using rule 100 (sem_add_param -> empty .)
    RIGHT_PAR       reduce using rule 100 (sem_add_param -> empty .)


state 207

    (41) assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value . SEMICOLON

    SEMICOLON       shift and go to state 235


state 208

    (90) sem_assign_value -> empty .

    SEMICOLON       reduce using rule 90 (sem_assign_value -> empty .)


state 209

    (68) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR . sem_count_params SEMICOLON sem_gosub
    (104) sem_count_params -> . empty
    (76) empty -> .

    SEMICOLON       reduce using rule 76 (empty -> .)

    sem_count_params               shift and go to state 236
    empty                          shift and go to state 237

state 210

    (69) param_call -> mega_exp sem_check_param .
    (70) param_call -> mega_exp sem_check_param . COMMA param_call

    RIGHT_PAR       reduce using rule 69 (param_call -> mega_exp sem_check_param .)
    COMMA           shift and go to state 238


state 211

    (103) sem_check_param -> empty .

    COMMA           reduce using rule 103 (sem_check_param -> empty .)
    RIGHT_PAR       reduce using rule 103 (sem_check_param -> empty .)


state 212

    (65) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block . condition_1 sem_fill_gotof
    (66) condition_1 -> . ELSE sem_else_condition block
    (67) condition_1 -> . empty
    (76) empty -> .

    ELSE            shift and go to state 240
    ID              reduce using rule 76 (empty -> .)
    IF              reduce using rule 76 (empty -> .)
    RETURN          reduce using rule 76 (empty -> .)
    WHILE           reduce using rule 76 (empty -> .)
    READ            reduce using rule 76 (empty -> .)
    WRITE           reduce using rule 76 (empty -> .)
    RIGHT_BRACE     reduce using rule 76 (empty -> .)

    condition_1                    shift and go to state 239
    empty                          shift and go to state 241

state 213

    (44) mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .

    SEMICOLON       reduce using rule 44 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)
    RIGHT_PAR       reduce using rule 44 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)
    COMMA           reduce using rule 44 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)


state 214

    (45) mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .

    SEMICOLON       reduce using rule 45 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)
    RIGHT_PAR       reduce using rule 45 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)
    COMMA           reduce using rule 45 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)


state 215

    (48) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 48 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 216

    (49) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 49 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 217

    (50) hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .

    AND             reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 50 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)


state 218

    (51) hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .

    AND             reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 51 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)


state 219

    (52) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 52 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 220

    (53) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 53 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 221

    (56) exp -> term sem_top_term PLUS sem_push_operator exp .

    IS_EQUAL_TO     reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    NOT_EQUAL_TO    reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    GREATER_THAN    reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    LESS_THAN       reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    AND             reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    OR              reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    SEMICOLON       reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    RIGHT_PAR       reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    COMMA           reduce using rule 56 (exp -> term sem_top_term PLUS sem_push_operator exp .)


state 222

    (57) exp -> term sem_top_term MINUS sem_push_operator exp .

    IS_EQUAL_TO     reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    NOT_EQUAL_TO    reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    GREATER_THAN    reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    LESS_THAN       reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    AND             reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    OR              reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    SEMICOLON       reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    RIGHT_PAR       reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    COMMA           reduce using rule 57 (exp -> term sem_top_term MINUS sem_push_operator exp .)


state 223

    (59) term -> factor sem_top_factor MULTIPLY sem_push_operator term .

    PLUS            reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    MINUS           reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    IS_EQUAL_TO     reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    NOT_EQUAL_TO    reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    GREATER_THAN    reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    LESS_THAN       reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    AND             reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    OR              reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    SEMICOLON       reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    RIGHT_PAR       reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    COMMA           reduce using rule 59 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)


state 224

    (60) term -> factor sem_top_factor DIVIDE sem_push_operator term .

    PLUS            reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    MINUS           reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    IS_EQUAL_TO     reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    NOT_EQUAL_TO    reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    GREATER_THAN    reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    LESS_THAN       reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    AND             reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    OR              reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    SEMICOLON       reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    RIGHT_PAR       reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    COMMA           reduce using rule 60 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)


state 225

    (61) factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .

    MULTIPLY        reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    DIVIDE          reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    PLUS            reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    MINUS           reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    IS_EQUAL_TO     reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    NOT_EQUAL_TO    reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    GREATER_THAN    reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    LESS_THAN       reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    AND             reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    OR              reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    SEMICOLON       reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    RIGHT_PAR       reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    COMMA           reduce using rule 61 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)


state 226

    (89) sem_false_bottom_end -> empty .

    MULTIPLY        reduce using rule 89 (sem_false_bottom_end -> empty .)
    DIVIDE          reduce using rule 89 (sem_false_bottom_end -> empty .)
    PLUS            reduce using rule 89 (sem_false_bottom_end -> empty .)
    MINUS           reduce using rule 89 (sem_false_bottom_end -> empty .)
    IS_EQUAL_TO     reduce using rule 89 (sem_false_bottom_end -> empty .)
    NOT_EQUAL_TO    reduce using rule 89 (sem_false_bottom_end -> empty .)
    GREATER_THAN    reduce using rule 89 (sem_false_bottom_end -> empty .)
    LESS_THAN       reduce using rule 89 (sem_false_bottom_end -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 89 (sem_false_bottom_end -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 89 (sem_false_bottom_end -> empty .)
    AND             reduce using rule 89 (sem_false_bottom_end -> empty .)
    OR              reduce using rule 89 (sem_false_bottom_end -> empty .)
    SEMICOLON       reduce using rule 89 (sem_false_bottom_end -> empty .)
    RIGHT_PAR       reduce using rule 89 (sem_false_bottom_end -> empty .)
    COMMA           reduce using rule 89 (sem_false_bottom_end -> empty .)


state 227

    (24) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era . param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (69) param_call -> . mega_exp sem_check_param
    (70) param_call -> . mega_exp sem_check_param COMMA param_call
    (71) param_call -> . empty
    (43) mega_exp -> . hyper_exp mega_exp_1
    (76) empty -> .
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 76 (empty -> .)
    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    param_call                     shift and go to state 242
    mega_exp                       shift and go to state 183
    empty                          shift and go to state 184
    hyper_exp                      shift and go to state 88
    exp                            shift and go to state 89
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 228

    (72) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition . block sem_end_while
    (31) block -> . LEFT_BRACE var_declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 41

    block                          shift and go to state 243

state 229

    (73) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write . SEMICOLON

    SEMICOLON       shift and go to state 244


state 230

    (91) sem_read_write -> empty .

    SEMICOLON       reduce using rule 91 (sem_read_write -> empty .)


state 231

    (74) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write . SEMICOLON

    SEMICOLON       shift and go to state 245


state 232

    (7) matrix_declaration -> LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim1 LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim2 .

    SEMICOLON       reduce using rule 7 (matrix_declaration -> LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim1 LEFT_BRACKET CTE_I RIGHT_BRACKET sem_add_dim2 .)


state 233

    (112) sem_add_dim2 -> empty .

    SEMICOLON       reduce using rule 112 (sem_add_dim2 -> empty .)


state 234

    (15) param_declaration -> var_type matrix ID sem_add_param COMMA . param_declaration
    (14) param_declaration -> . var_type matrix ID sem_add_param
    (15) param_declaration -> . var_type matrix ID sem_add_param COMMA param_declaration
    (16) param_declaration -> . empty
    (17) var_type -> . INT sem_get_type
    (18) var_type -> . DOUBLE sem_get_type
    (19) var_type -> . BOOL sem_get_type
    (76) empty -> .

    INT             shift and go to state 11
    DOUBLE          shift and go to state 12
    BOOL            shift and go to state 13
    RIGHT_PAR       reduce using rule 76 (empty -> .)

    var_type                       shift and go to state 110
    param_declaration              shift and go to state 246
    empty                          shift and go to state 111

state 235

    (41) assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .

    ID              reduce using rule 41 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    IF              reduce using rule 41 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    RETURN          reduce using rule 41 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    WHILE           reduce using rule 41 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    READ            reduce using rule 41 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    WRITE           reduce using rule 41 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    RIGHT_BRACE     reduce using rule 41 (assignment -> ID sem_push_operand ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)


state 236

    (68) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params . SEMICOLON sem_gosub

    SEMICOLON       shift and go to state 247


state 237

    (104) sem_count_params -> empty .

    SEMICOLON       reduce using rule 104 (sem_count_params -> empty .)
    MULTIPLY        reduce using rule 104 (sem_count_params -> empty .)
    DIVIDE          reduce using rule 104 (sem_count_params -> empty .)
    PLUS            reduce using rule 104 (sem_count_params -> empty .)
    MINUS           reduce using rule 104 (sem_count_params -> empty .)
    IS_EQUAL_TO     reduce using rule 104 (sem_count_params -> empty .)
    NOT_EQUAL_TO    reduce using rule 104 (sem_count_params -> empty .)
    GREATER_THAN    reduce using rule 104 (sem_count_params -> empty .)
    LESS_THAN       reduce using rule 104 (sem_count_params -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 104 (sem_count_params -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 104 (sem_count_params -> empty .)
    AND             reduce using rule 104 (sem_count_params -> empty .)
    OR              reduce using rule 104 (sem_count_params -> empty .)
    RIGHT_PAR       reduce using rule 104 (sem_count_params -> empty .)
    COMMA           reduce using rule 104 (sem_count_params -> empty .)


state 238

    (70) param_call -> mega_exp sem_check_param COMMA . param_call
    (69) param_call -> . mega_exp sem_check_param
    (70) param_call -> . mega_exp sem_check_param COMMA param_call
    (71) param_call -> . empty
    (43) mega_exp -> . hyper_exp mega_exp_1
    (76) empty -> .
    (47) hyper_exp -> . exp hyper_exp_1
    (55) exp -> . term sem_top_term
    (56) exp -> . term sem_top_term PLUS sem_push_operator exp
    (57) exp -> . term sem_top_term MINUS sem_push_operator exp
    (58) term -> . factor sem_top_factor
    (59) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (60) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (61) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (62) factor -> . var_cte
    (63) factor -> . PLUS sem_push_operator var_cte
    (64) factor -> . MINUS sem_push_operator var_cte
    (20) var_cte -> . CTE_I sem_push_constant_int
    (21) var_cte -> . CTE_D sem_push_constant_double
    (22) var_cte -> . cte_b sem_push_constant_bool
    (23) var_cte -> . ID sem_push_operand matrix
    (24) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (25) cte_b -> . TRUE
    (26) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 76 (empty -> .)
    LEFT_PAR        shift and go to state 94
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    CTE_I           shift and go to state 96
    CTE_D           shift and go to state 97
    ID              shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    mega_exp                       shift and go to state 183
    param_call                     shift and go to state 248
    empty                          shift and go to state 184
    hyper_exp                      shift and go to state 88
    exp                            shift and go to state 89
    term                           shift and go to state 90
    factor                         shift and go to state 93
    var_cte                        shift and go to state 95
    cte_b                          shift and go to state 98

state 239

    (65) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 . sem_fill_gotof
    (96) sem_fill_gotof -> . empty
    (76) empty -> .

    ID              reduce using rule 76 (empty -> .)
    IF              reduce using rule 76 (empty -> .)
    RETURN          reduce using rule 76 (empty -> .)
    WHILE           reduce using rule 76 (empty -> .)
    READ            reduce using rule 76 (empty -> .)
    WRITE           reduce using rule 76 (empty -> .)
    RIGHT_BRACE     reduce using rule 76 (empty -> .)

    sem_fill_gotof                 shift and go to state 249
    empty                          shift and go to state 250

state 240

    (66) condition_1 -> ELSE . sem_else_condition block
    (97) sem_else_condition -> . empty
    (76) empty -> .

    LEFT_BRACE      reduce using rule 76 (empty -> .)

    sem_else_condition             shift and go to state 251
    empty                          shift and go to state 252

state 241

    (67) condition_1 -> empty .

    ID              reduce using rule 67 (condition_1 -> empty .)
    IF              reduce using rule 67 (condition_1 -> empty .)
    RETURN          reduce using rule 67 (condition_1 -> empty .)
    WHILE           reduce using rule 67 (condition_1 -> empty .)
    READ            reduce using rule 67 (condition_1 -> empty .)
    WRITE           reduce using rule 67 (condition_1 -> empty .)
    RIGHT_BRACE     reduce using rule 67 (condition_1 -> empty .)


state 242

    (24) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call . RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub

    RIGHT_PAR       shift and go to state 253


state 243

    (72) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block . sem_end_while
    (99) sem_end_while -> . empty
    (76) empty -> .

    ID              reduce using rule 76 (empty -> .)
    IF              reduce using rule 76 (empty -> .)
    RETURN          reduce using rule 76 (empty -> .)
    WHILE           reduce using rule 76 (empty -> .)
    READ            reduce using rule 76 (empty -> .)
    WRITE           reduce using rule 76 (empty -> .)
    RIGHT_BRACE     reduce using rule 76 (empty -> .)

    sem_end_while                  shift and go to state 254
    empty                          shift and go to state 255

state 244

    (73) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .

    ID              reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    IF              reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RETURN          reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WHILE           reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    READ            reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WRITE           reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RIGHT_BRACE     reduce using rule 73 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)


state 245

    (74) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .

    ID              reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    IF              reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RETURN          reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WHILE           reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    READ            reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WRITE           reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RIGHT_BRACE     reduce using rule 74 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)


state 246

    (15) param_declaration -> var_type matrix ID sem_add_param COMMA param_declaration .

    RIGHT_PAR       reduce using rule 15 (param_declaration -> var_type matrix ID sem_add_param COMMA param_declaration .)


state 247

    (68) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON . sem_gosub
    (105) sem_gosub -> . empty
    (76) empty -> .

    ID              reduce using rule 76 (empty -> .)
    IF              reduce using rule 76 (empty -> .)
    RETURN          reduce using rule 76 (empty -> .)
    WHILE           reduce using rule 76 (empty -> .)
    READ            reduce using rule 76 (empty -> .)
    WRITE           reduce using rule 76 (empty -> .)
    RIGHT_BRACE     reduce using rule 76 (empty -> .)

    sem_gosub                      shift and go to state 256
    empty                          shift and go to state 257

state 248

    (70) param_call -> mega_exp sem_check_param COMMA param_call .

    RIGHT_PAR       reduce using rule 70 (param_call -> mega_exp sem_check_param COMMA param_call .)


state 249

    (65) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .

    ID              reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    IF              reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    RETURN          reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    WHILE           reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    READ            reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    WRITE           reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    RIGHT_BRACE     reduce using rule 65 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)


state 250

    (96) sem_fill_gotof -> empty .

    ID              reduce using rule 96 (sem_fill_gotof -> empty .)
    IF              reduce using rule 96 (sem_fill_gotof -> empty .)
    RETURN          reduce using rule 96 (sem_fill_gotof -> empty .)
    WHILE           reduce using rule 96 (sem_fill_gotof -> empty .)
    READ            reduce using rule 96 (sem_fill_gotof -> empty .)
    WRITE           reduce using rule 96 (sem_fill_gotof -> empty .)
    RIGHT_BRACE     reduce using rule 96 (sem_fill_gotof -> empty .)


state 251

    (66) condition_1 -> ELSE sem_else_condition . block
    (31) block -> . LEFT_BRACE var_declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 41

    block                          shift and go to state 258

state 252

    (97) sem_else_condition -> empty .

    LEFT_BRACE      reduce using rule 97 (sem_else_condition -> empty .)


state 253

    (24) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR . sem_false_bottom_end sem_count_params sem_gosub
    (89) sem_false_bottom_end -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_false_bottom_end           shift and go to state 259
    empty                          shift and go to state 226

state 254

    (72) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .

    ID              reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    IF              reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    RETURN          reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    WHILE           reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    READ            reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    WRITE           reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    RIGHT_BRACE     reduce using rule 72 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)


state 255

    (99) sem_end_while -> empty .

    ID              reduce using rule 99 (sem_end_while -> empty .)
    IF              reduce using rule 99 (sem_end_while -> empty .)
    RETURN          reduce using rule 99 (sem_end_while -> empty .)
    WHILE           reduce using rule 99 (sem_end_while -> empty .)
    READ            reduce using rule 99 (sem_end_while -> empty .)
    WRITE           reduce using rule 99 (sem_end_while -> empty .)
    RIGHT_BRACE     reduce using rule 99 (sem_end_while -> empty .)


state 256

    (68) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .

    ID              reduce using rule 68 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    IF              reduce using rule 68 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    RETURN          reduce using rule 68 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    WHILE           reduce using rule 68 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    READ            reduce using rule 68 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    WRITE           reduce using rule 68 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    RIGHT_BRACE     reduce using rule 68 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)


state 257

    (105) sem_gosub -> empty .

    ID              reduce using rule 105 (sem_gosub -> empty .)
    IF              reduce using rule 105 (sem_gosub -> empty .)
    RETURN          reduce using rule 105 (sem_gosub -> empty .)
    WHILE           reduce using rule 105 (sem_gosub -> empty .)
    READ            reduce using rule 105 (sem_gosub -> empty .)
    WRITE           reduce using rule 105 (sem_gosub -> empty .)
    RIGHT_BRACE     reduce using rule 105 (sem_gosub -> empty .)
    MULTIPLY        reduce using rule 105 (sem_gosub -> empty .)
    DIVIDE          reduce using rule 105 (sem_gosub -> empty .)
    PLUS            reduce using rule 105 (sem_gosub -> empty .)
    MINUS           reduce using rule 105 (sem_gosub -> empty .)
    IS_EQUAL_TO     reduce using rule 105 (sem_gosub -> empty .)
    NOT_EQUAL_TO    reduce using rule 105 (sem_gosub -> empty .)
    GREATER_THAN    reduce using rule 105 (sem_gosub -> empty .)
    LESS_THAN       reduce using rule 105 (sem_gosub -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 105 (sem_gosub -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 105 (sem_gosub -> empty .)
    AND             reduce using rule 105 (sem_gosub -> empty .)
    OR              reduce using rule 105 (sem_gosub -> empty .)
    SEMICOLON       reduce using rule 105 (sem_gosub -> empty .)
    RIGHT_PAR       reduce using rule 105 (sem_gosub -> empty .)
    COMMA           reduce using rule 105 (sem_gosub -> empty .)


state 258

    (66) condition_1 -> ELSE sem_else_condition block .

    ID              reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    IF              reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    RETURN          reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    WHILE           reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    READ            reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    WRITE           reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)
    RIGHT_BRACE     reduce using rule 66 (condition_1 -> ELSE sem_else_condition block .)


state 259

    (24) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end . sem_count_params sem_gosub
    (104) sem_count_params -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_count_params               shift and go to state 260
    empty                          shift and go to state 237

state 260

    (24) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params . sem_gosub
    (105) sem_gosub -> . empty
    (76) empty -> .

    MULTIPLY        reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    IS_EQUAL_TO     reduce using rule 76 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 76 (empty -> .)
    GREATER_THAN    reduce using rule 76 (empty -> .)
    LESS_THAN       reduce using rule 76 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (empty -> .)
    AND             reduce using rule 76 (empty -> .)
    OR              reduce using rule 76 (empty -> .)
    SEMICOLON       reduce using rule 76 (empty -> .)
    RIGHT_PAR       reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    sem_gosub                      shift and go to state 261
    empty                          shift and go to state 257

state 261

    (24) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .

    MULTIPLY        reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    DIVIDE          reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    PLUS            reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    MINUS           reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    IS_EQUAL_TO     reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    NOT_EQUAL_TO    reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    GREATER_THAN    reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    LESS_THAN       reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    AND             reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    OR              reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    SEMICOLON       reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    RIGHT_PAR       reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    COMMA           reduce using rule 24 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 2 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift

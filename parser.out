Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM MATHRIX COLON program1 main
Rule 2     program1 -> program1 function_block
Rule 3     program1 -> program1 vars
Rule 4     program1 -> empty
Rule 5     vars -> var_type vars2 SEMICOLON vars3
Rule 6     vars2 -> ID vars3
Rule 7     vars2 -> ID vars4
Rule 8     vars3 -> ASSIGN var_cte vars5
Rule 9     vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2
Rule 10    vars4 -> SEMICOLON
Rule 11    vars5 -> SEMICOLON
Rule 12    vars5 -> COMMA vars2
Rule 13    var_type -> INT
Rule 14    var_type -> DOUBLE
Rule 15    var_type -> BOOL
Rule 16    var_type -> STRING
Rule 17    var_cte -> CTE_I
Rule 18    var_cte -> CTE_D
Rule 19    var_cte -> cte_b
Rule 20    var_cte -> CTE_S
Rule 21    var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
Rule 22    cte_b -> TRUE
Rule 23    cte_b -> FALSE
Rule 24    function_block -> FUNCTION func_type ID LEFT_PAR function_block2 RIGHT_PAR block function_block SEMICOLON
Rule 25    function_block -> empty
Rule 26    function_block2 -> var_type ID
Rule 27    function_block2 -> var_type ID COMMA
Rule 28    function_block2 -> empty
Rule 29    func_type -> INT
Rule 30    func_type -> DOUBLE
Rule 31    func_type -> BOOL
Rule 32    func_type -> STRING
Rule 33    func_type -> VOID
Rule 34    block -> LEFT_BRACE block2 RIGHT_BRACE
Rule 35    block2 -> block2 vars statement
Rule 36    block2 -> block2 statement
Rule 37    block2 -> empty
Rule 38    statement -> assignment
Rule 39    statement -> condition
Rule 40    statement -> call_function
Rule 41    statement -> return_function
Rule 42    statement -> while_cycle
Rule 43    statement -> read
Rule 44    statement -> write
Rule 45    assignment -> ID assignment2 expression SEMICOLON
Rule 46    assignment2 -> ASSIGN
Rule 47    assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN
Rule 48    expression -> exp expression1
Rule 49    expression1 -> EQUAL_TO exp
Rule 50    expression1 -> NOT_EQUAL_TO exp
Rule 51    expression1 -> GREATER_THAN exp
Rule 52    expression1 -> LESS_THAN exp
Rule 53    expression1 -> GREATER_THAN_OR_EQUAL_TO exp
Rule 54    expression1 -> LESS_THAN_OR_EQUAL_TO exp
Rule 55    expression1 -> AND exp
Rule 56    expression1 -> OR exp
Rule 57    expression1 -> empty
Rule 58    exp -> term exp1
Rule 59    exp1 -> PLUS exp
Rule 60    exp1 -> MINUS exp
Rule 61    exp1 -> empty
Rule 62    term -> factor term1
Rule 63    term1 -> MULTIPLY term
Rule 64    term1 -> DIVIDE term
Rule 65    term1 -> empty
Rule 66    factor -> LEFT_PAR expression RIGHT_PAR
Rule 67    factor -> var_cte
Rule 68    factor -> factor1 var_cte
Rule 69    factor1 -> PLUS
Rule 70    factor1 -> MINUS
Rule 71    factor1 -> empty
Rule 72    condition -> IF LEFT_PAR expression RIGHT_PAR block condition2
Rule 73    condition2 -> ELSE block
Rule 74    call_function -> ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON
Rule 75    call_function2 -> ID call_function3
Rule 76    call_function2 -> exp call_function3
Rule 77    call_function3 -> COMMA call_function2
Rule 78    call_function3 -> empty
Rule 79    return_function -> RETURN exp SEMICOLON
Rule 80    while_cycle -> WHILE LEFT_BRACE exp RIGHT_BRACE block
Rule 81    read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON
Rule 82    write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON
Rule 83    main -> MAIN block SEMICOLON
Rule 84    empty -> <empty>

Terminals, with rules where they appear

AND                  : 55
ASSIGN               : 8 46 47
BOOL                 : 15 31
COLON                : 1
COMMA                : 12 27 77
CTE_D                : 18
CTE_I                : 9 9 17 21 21 47 47
CTE_S                : 20
DIVIDE               : 64
DOUBLE               : 14 30
ELSE                 : 73
EQUAL_TO             : 49
FALSE                : 23
FUNCTION             : 24
GREATER_THAN         : 51
GREATER_THAN_OR_EQUAL_TO : 53
ID                   : 6 7 21 24 26 27 45 74 75
IF                   : 72
INT                  : 13 29
LEFT_BRACE           : 34 80
LEFT_BRACKET         : 9 9 21 21 47 47
LEFT_PAR             : 24 66 72 74 81 82
LESS_THAN            : 52
LESS_THAN_OR_EQUAL_TO : 54
MAIN                 : 83
MATHRIX              : 1
MINUS                : 60 70
MULTIPLY             : 63
NOT_EQUAL_TO         : 50
OR                   : 56
PLUS                 : 59 69
PROGRAM              : 1
READ                 : 81
RETURN               : 79
RIGHT_BRACE          : 34 80
RIGHT_BRACKET        : 9 9 21 21 47 47
RIGHT_PAR            : 24 66 72 74 81 82
SEMICOLON            : 5 10 11 24 45 74 79 81 82 83
STRING               : 16 32
TRUE                 : 22
VOID                 : 33
WHILE                : 80
WRITE                : 82
error                : 

Nonterminals, with rules where they appear

assignment           : 38
assignment2          : 45
block                : 24 72 73 80 83
block2               : 34 35 36
call_function        : 40
call_function2       : 74 77
call_function3       : 75 76
condition            : 39
condition2           : 72
cte_b                : 19
empty                : 4 25 28 37 57 61 65 71 78
exp                  : 48 49 50 51 52 53 54 55 56 59 60 76 79 80 81 82
exp1                 : 58
expression           : 45 66 72
expression1          : 48
factor               : 62
factor1              : 68
func_type            : 24
function_block       : 2 24
function_block2      : 24
main                 : 1
program              : 0
program1             : 1 2 3
read                 : 43
return_function      : 41
statement            : 35 36
term                 : 58 63 64
term1                : 62
var_cte              : 8 67 68
var_type             : 5 26 27
vars                 : 3 35
vars2                : 5 9 12
vars3                : 5 6
vars4                : 7
vars5                : 8
while_cycle          : 42
write                : 44

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM MATHRIX COLON program1 main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . MATHRIX COLON program1 main

    MATHRIX         shift and go to state 3


state 3

    (1) program -> PROGRAM MATHRIX . COLON program1 main

    COLON           shift and go to state 4


state 4

    (1) program -> PROGRAM MATHRIX COLON . program1 main
    (2) program1 -> . program1 function_block
    (3) program1 -> . program1 vars
    (4) program1 -> . empty
    (84) empty -> .

    MAIN            reduce using rule 84 (empty -> .)
    FUNCTION        reduce using rule 84 (empty -> .)
    INT             reduce using rule 84 (empty -> .)
    DOUBLE          reduce using rule 84 (empty -> .)
    BOOL            reduce using rule 84 (empty -> .)
    STRING          reduce using rule 84 (empty -> .)

    program1                       shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM MATHRIX COLON program1 . main
    (2) program1 -> program1 . function_block
    (3) program1 -> program1 . vars
    (83) main -> . MAIN block SEMICOLON
    (24) function_block -> . FUNCTION func_type ID LEFT_PAR function_block2 RIGHT_PAR block function_block SEMICOLON
    (25) function_block -> . empty
    (5) vars -> . var_type vars2 SEMICOLON vars3
    (84) empty -> .
    (13) var_type -> . INT
    (14) var_type -> . DOUBLE
    (15) var_type -> . BOOL
    (16) var_type -> . STRING

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    MAIN            shift and go to state 10
    FUNCTION        shift and go to state 11
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    BOOL            shift and go to state 16
    STRING          shift and go to state 17

  ! MAIN            [ reduce using rule 84 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 84 (empty -> .) ]
  ! INT             [ reduce using rule 84 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 84 (empty -> .) ]
  ! BOOL            [ reduce using rule 84 (empty -> .) ]
  ! STRING          [ reduce using rule 84 (empty -> .) ]

    main                           shift and go to state 7
    function_block                 shift and go to state 8
    vars                           shift and go to state 9
    empty                          shift and go to state 12
    var_type                       shift and go to state 13

state 6

    (4) program1 -> empty .

    MAIN            reduce using rule 4 (program1 -> empty .)
    FUNCTION        reduce using rule 4 (program1 -> empty .)
    INT             reduce using rule 4 (program1 -> empty .)
    DOUBLE          reduce using rule 4 (program1 -> empty .)
    BOOL            reduce using rule 4 (program1 -> empty .)
    STRING          reduce using rule 4 (program1 -> empty .)


state 7

    (1) program -> PROGRAM MATHRIX COLON program1 main .

    $end            reduce using rule 1 (program -> PROGRAM MATHRIX COLON program1 main .)


state 8

    (2) program1 -> program1 function_block .

    MAIN            reduce using rule 2 (program1 -> program1 function_block .)
    FUNCTION        reduce using rule 2 (program1 -> program1 function_block .)
    INT             reduce using rule 2 (program1 -> program1 function_block .)
    DOUBLE          reduce using rule 2 (program1 -> program1 function_block .)
    BOOL            reduce using rule 2 (program1 -> program1 function_block .)
    STRING          reduce using rule 2 (program1 -> program1 function_block .)


state 9

    (3) program1 -> program1 vars .

    MAIN            reduce using rule 3 (program1 -> program1 vars .)
    FUNCTION        reduce using rule 3 (program1 -> program1 vars .)
    INT             reduce using rule 3 (program1 -> program1 vars .)
    DOUBLE          reduce using rule 3 (program1 -> program1 vars .)
    BOOL            reduce using rule 3 (program1 -> program1 vars .)
    STRING          reduce using rule 3 (program1 -> program1 vars .)


state 10

    (83) main -> MAIN . block SEMICOLON
    (34) block -> . LEFT_BRACE block2 RIGHT_BRACE

    LEFT_BRACE      shift and go to state 19

    block                          shift and go to state 18

state 11

    (24) function_block -> FUNCTION . func_type ID LEFT_PAR function_block2 RIGHT_PAR block function_block SEMICOLON
    (29) func_type -> . INT
    (30) func_type -> . DOUBLE
    (31) func_type -> . BOOL
    (32) func_type -> . STRING
    (33) func_type -> . VOID

    INT             shift and go to state 21
    DOUBLE          shift and go to state 22
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    VOID            shift and go to state 25

    func_type                      shift and go to state 20

state 12

    (25) function_block -> empty .

    MAIN            reduce using rule 25 (function_block -> empty .)
    FUNCTION        reduce using rule 25 (function_block -> empty .)
    INT             reduce using rule 25 (function_block -> empty .)
    DOUBLE          reduce using rule 25 (function_block -> empty .)
    BOOL            reduce using rule 25 (function_block -> empty .)
    STRING          reduce using rule 25 (function_block -> empty .)
    SEMICOLON       reduce using rule 25 (function_block -> empty .)


state 13

    (5) vars -> var_type . vars2 SEMICOLON vars3
    (6) vars2 -> . ID vars3
    (7) vars2 -> . ID vars4

    ID              shift and go to state 27

    vars2                          shift and go to state 26

state 14

    (13) var_type -> INT .

    ID              reduce using rule 13 (var_type -> INT .)


state 15

    (14) var_type -> DOUBLE .

    ID              reduce using rule 14 (var_type -> DOUBLE .)


state 16

    (15) var_type -> BOOL .

    ID              reduce using rule 15 (var_type -> BOOL .)


state 17

    (16) var_type -> STRING .

    ID              reduce using rule 16 (var_type -> STRING .)


state 18

    (83) main -> MAIN block . SEMICOLON

    SEMICOLON       shift and go to state 28


state 19

    (34) block -> LEFT_BRACE . block2 RIGHT_BRACE
    (35) block2 -> . block2 vars statement
    (36) block2 -> . block2 statement
    (37) block2 -> . empty
    (84) empty -> .

    RIGHT_BRACE     reduce using rule 84 (empty -> .)
    INT             reduce using rule 84 (empty -> .)
    DOUBLE          reduce using rule 84 (empty -> .)
    BOOL            reduce using rule 84 (empty -> .)
    STRING          reduce using rule 84 (empty -> .)
    ID              reduce using rule 84 (empty -> .)
    IF              reduce using rule 84 (empty -> .)
    RETURN          reduce using rule 84 (empty -> .)
    WHILE           reduce using rule 84 (empty -> .)
    READ            reduce using rule 84 (empty -> .)
    WRITE           reduce using rule 84 (empty -> .)

    block2                         shift and go to state 29
    empty                          shift and go to state 30

state 20

    (24) function_block -> FUNCTION func_type . ID LEFT_PAR function_block2 RIGHT_PAR block function_block SEMICOLON

    ID              shift and go to state 31


state 21

    (29) func_type -> INT .

    ID              reduce using rule 29 (func_type -> INT .)


state 22

    (30) func_type -> DOUBLE .

    ID              reduce using rule 30 (func_type -> DOUBLE .)


state 23

    (31) func_type -> BOOL .

    ID              reduce using rule 31 (func_type -> BOOL .)


state 24

    (32) func_type -> STRING .

    ID              reduce using rule 32 (func_type -> STRING .)


state 25

    (33) func_type -> VOID .

    ID              reduce using rule 33 (func_type -> VOID .)


state 26

    (5) vars -> var_type vars2 . SEMICOLON vars3

    SEMICOLON       shift and go to state 32


state 27

    (6) vars2 -> ID . vars3
    (7) vars2 -> ID . vars4
    (8) vars3 -> . ASSIGN var_cte vars5
    (9) vars4 -> . LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2
    (10) vars4 -> . SEMICOLON

    ASSIGN          shift and go to state 35
    LEFT_BRACKET    shift and go to state 36
    SEMICOLON       shift and go to state 37

    vars3                          shift and go to state 33
    vars4                          shift and go to state 34

state 28

    (83) main -> MAIN block SEMICOLON .

    $end            reduce using rule 83 (main -> MAIN block SEMICOLON .)


state 29

    (34) block -> LEFT_BRACE block2 . RIGHT_BRACE
    (35) block2 -> block2 . vars statement
    (36) block2 -> block2 . statement
    (5) vars -> . var_type vars2 SEMICOLON vars3
    (38) statement -> . assignment
    (39) statement -> . condition
    (40) statement -> . call_function
    (41) statement -> . return_function
    (42) statement -> . while_cycle
    (43) statement -> . read
    (44) statement -> . write
    (13) var_type -> . INT
    (14) var_type -> . DOUBLE
    (15) var_type -> . BOOL
    (16) var_type -> . STRING
    (45) assignment -> . ID assignment2 expression SEMICOLON
    (72) condition -> . IF LEFT_PAR expression RIGHT_PAR block condition2
    (74) call_function -> . ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON
    (79) return_function -> . RETURN exp SEMICOLON
    (80) while_cycle -> . WHILE LEFT_BRACE exp RIGHT_BRACE block
    (81) read -> . READ LEFT_PAR exp RIGHT_PAR SEMICOLON
    (82) write -> . WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON

    RIGHT_BRACE     shift and go to state 38
    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    BOOL            shift and go to state 16
    STRING          shift and go to state 17
    ID              shift and go to state 48
    IF              shift and go to state 49
    RETURN          shift and go to state 50
    WHILE           shift and go to state 51
    READ            shift and go to state 52
    WRITE           shift and go to state 53

    vars                           shift and go to state 39
    statement                      shift and go to state 40
    var_type                       shift and go to state 13
    assignment                     shift and go to state 41
    condition                      shift and go to state 42
    call_function                  shift and go to state 43
    return_function                shift and go to state 44
    while_cycle                    shift and go to state 45
    read                           shift and go to state 46
    write                          shift and go to state 47

state 30

    (37) block2 -> empty .

    RIGHT_BRACE     reduce using rule 37 (block2 -> empty .)
    INT             reduce using rule 37 (block2 -> empty .)
    DOUBLE          reduce using rule 37 (block2 -> empty .)
    BOOL            reduce using rule 37 (block2 -> empty .)
    STRING          reduce using rule 37 (block2 -> empty .)
    ID              reduce using rule 37 (block2 -> empty .)
    IF              reduce using rule 37 (block2 -> empty .)
    RETURN          reduce using rule 37 (block2 -> empty .)
    WHILE           reduce using rule 37 (block2 -> empty .)
    READ            reduce using rule 37 (block2 -> empty .)
    WRITE           reduce using rule 37 (block2 -> empty .)


state 31

    (24) function_block -> FUNCTION func_type ID . LEFT_PAR function_block2 RIGHT_PAR block function_block SEMICOLON

    LEFT_PAR        shift and go to state 54


state 32

    (5) vars -> var_type vars2 SEMICOLON . vars3
    (8) vars3 -> . ASSIGN var_cte vars5

    ASSIGN          shift and go to state 35

    vars3                          shift and go to state 55

state 33

    (6) vars2 -> ID vars3 .

    SEMICOLON       reduce using rule 6 (vars2 -> ID vars3 .)
    MAIN            reduce using rule 6 (vars2 -> ID vars3 .)
    FUNCTION        reduce using rule 6 (vars2 -> ID vars3 .)
    INT             reduce using rule 6 (vars2 -> ID vars3 .)
    DOUBLE          reduce using rule 6 (vars2 -> ID vars3 .)
    BOOL            reduce using rule 6 (vars2 -> ID vars3 .)
    STRING          reduce using rule 6 (vars2 -> ID vars3 .)
    ID              reduce using rule 6 (vars2 -> ID vars3 .)
    IF              reduce using rule 6 (vars2 -> ID vars3 .)
    RETURN          reduce using rule 6 (vars2 -> ID vars3 .)
    WHILE           reduce using rule 6 (vars2 -> ID vars3 .)
    READ            reduce using rule 6 (vars2 -> ID vars3 .)
    WRITE           reduce using rule 6 (vars2 -> ID vars3 .)


state 34

    (7) vars2 -> ID vars4 .

    SEMICOLON       reduce using rule 7 (vars2 -> ID vars4 .)
    MAIN            reduce using rule 7 (vars2 -> ID vars4 .)
    FUNCTION        reduce using rule 7 (vars2 -> ID vars4 .)
    INT             reduce using rule 7 (vars2 -> ID vars4 .)
    DOUBLE          reduce using rule 7 (vars2 -> ID vars4 .)
    BOOL            reduce using rule 7 (vars2 -> ID vars4 .)
    STRING          reduce using rule 7 (vars2 -> ID vars4 .)
    ID              reduce using rule 7 (vars2 -> ID vars4 .)
    IF              reduce using rule 7 (vars2 -> ID vars4 .)
    RETURN          reduce using rule 7 (vars2 -> ID vars4 .)
    WHILE           reduce using rule 7 (vars2 -> ID vars4 .)
    READ            reduce using rule 7 (vars2 -> ID vars4 .)
    WRITE           reduce using rule 7 (vars2 -> ID vars4 .)


state 35

    (8) vars3 -> ASSIGN . var_cte vars5
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE

    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    var_cte                        shift and go to state 56
    cte_b                          shift and go to state 59

state 36

    (9) vars4 -> LEFT_BRACKET . CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2

    CTE_I           shift and go to state 64


state 37

    (10) vars4 -> SEMICOLON .

    SEMICOLON       reduce using rule 10 (vars4 -> SEMICOLON .)
    MAIN            reduce using rule 10 (vars4 -> SEMICOLON .)
    FUNCTION        reduce using rule 10 (vars4 -> SEMICOLON .)
    INT             reduce using rule 10 (vars4 -> SEMICOLON .)
    DOUBLE          reduce using rule 10 (vars4 -> SEMICOLON .)
    BOOL            reduce using rule 10 (vars4 -> SEMICOLON .)
    STRING          reduce using rule 10 (vars4 -> SEMICOLON .)
    ID              reduce using rule 10 (vars4 -> SEMICOLON .)
    IF              reduce using rule 10 (vars4 -> SEMICOLON .)
    RETURN          reduce using rule 10 (vars4 -> SEMICOLON .)
    WHILE           reduce using rule 10 (vars4 -> SEMICOLON .)
    READ            reduce using rule 10 (vars4 -> SEMICOLON .)
    WRITE           reduce using rule 10 (vars4 -> SEMICOLON .)


state 38

    (34) block -> LEFT_BRACE block2 RIGHT_BRACE .

    SEMICOLON       reduce using rule 34 (block -> LEFT_BRACE block2 RIGHT_BRACE .)
    FUNCTION        reduce using rule 34 (block -> LEFT_BRACE block2 RIGHT_BRACE .)
    ELSE            reduce using rule 34 (block -> LEFT_BRACE block2 RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 34 (block -> LEFT_BRACE block2 RIGHT_BRACE .)
    INT             reduce using rule 34 (block -> LEFT_BRACE block2 RIGHT_BRACE .)
    DOUBLE          reduce using rule 34 (block -> LEFT_BRACE block2 RIGHT_BRACE .)
    BOOL            reduce using rule 34 (block -> LEFT_BRACE block2 RIGHT_BRACE .)
    STRING          reduce using rule 34 (block -> LEFT_BRACE block2 RIGHT_BRACE .)
    ID              reduce using rule 34 (block -> LEFT_BRACE block2 RIGHT_BRACE .)
    IF              reduce using rule 34 (block -> LEFT_BRACE block2 RIGHT_BRACE .)
    RETURN          reduce using rule 34 (block -> LEFT_BRACE block2 RIGHT_BRACE .)
    WHILE           reduce using rule 34 (block -> LEFT_BRACE block2 RIGHT_BRACE .)
    READ            reduce using rule 34 (block -> LEFT_BRACE block2 RIGHT_BRACE .)
    WRITE           reduce using rule 34 (block -> LEFT_BRACE block2 RIGHT_BRACE .)


state 39

    (35) block2 -> block2 vars . statement
    (38) statement -> . assignment
    (39) statement -> . condition
    (40) statement -> . call_function
    (41) statement -> . return_function
    (42) statement -> . while_cycle
    (43) statement -> . read
    (44) statement -> . write
    (45) assignment -> . ID assignment2 expression SEMICOLON
    (72) condition -> . IF LEFT_PAR expression RIGHT_PAR block condition2
    (74) call_function -> . ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON
    (79) return_function -> . RETURN exp SEMICOLON
    (80) while_cycle -> . WHILE LEFT_BRACE exp RIGHT_BRACE block
    (81) read -> . READ LEFT_PAR exp RIGHT_PAR SEMICOLON
    (82) write -> . WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON

    ID              shift and go to state 48
    IF              shift and go to state 49
    RETURN          shift and go to state 50
    WHILE           shift and go to state 51
    READ            shift and go to state 52
    WRITE           shift and go to state 53

    statement                      shift and go to state 65
    assignment                     shift and go to state 41
    condition                      shift and go to state 42
    call_function                  shift and go to state 43
    return_function                shift and go to state 44
    while_cycle                    shift and go to state 45
    read                           shift and go to state 46
    write                          shift and go to state 47

state 40

    (36) block2 -> block2 statement .

    RIGHT_BRACE     reduce using rule 36 (block2 -> block2 statement .)
    INT             reduce using rule 36 (block2 -> block2 statement .)
    DOUBLE          reduce using rule 36 (block2 -> block2 statement .)
    BOOL            reduce using rule 36 (block2 -> block2 statement .)
    STRING          reduce using rule 36 (block2 -> block2 statement .)
    ID              reduce using rule 36 (block2 -> block2 statement .)
    IF              reduce using rule 36 (block2 -> block2 statement .)
    RETURN          reduce using rule 36 (block2 -> block2 statement .)
    WHILE           reduce using rule 36 (block2 -> block2 statement .)
    READ            reduce using rule 36 (block2 -> block2 statement .)
    WRITE           reduce using rule 36 (block2 -> block2 statement .)


state 41

    (38) statement -> assignment .

    RIGHT_BRACE     reduce using rule 38 (statement -> assignment .)
    INT             reduce using rule 38 (statement -> assignment .)
    DOUBLE          reduce using rule 38 (statement -> assignment .)
    BOOL            reduce using rule 38 (statement -> assignment .)
    STRING          reduce using rule 38 (statement -> assignment .)
    ID              reduce using rule 38 (statement -> assignment .)
    IF              reduce using rule 38 (statement -> assignment .)
    RETURN          reduce using rule 38 (statement -> assignment .)
    WHILE           reduce using rule 38 (statement -> assignment .)
    READ            reduce using rule 38 (statement -> assignment .)
    WRITE           reduce using rule 38 (statement -> assignment .)


state 42

    (39) statement -> condition .

    RIGHT_BRACE     reduce using rule 39 (statement -> condition .)
    INT             reduce using rule 39 (statement -> condition .)
    DOUBLE          reduce using rule 39 (statement -> condition .)
    BOOL            reduce using rule 39 (statement -> condition .)
    STRING          reduce using rule 39 (statement -> condition .)
    ID              reduce using rule 39 (statement -> condition .)
    IF              reduce using rule 39 (statement -> condition .)
    RETURN          reduce using rule 39 (statement -> condition .)
    WHILE           reduce using rule 39 (statement -> condition .)
    READ            reduce using rule 39 (statement -> condition .)
    WRITE           reduce using rule 39 (statement -> condition .)


state 43

    (40) statement -> call_function .

    RIGHT_BRACE     reduce using rule 40 (statement -> call_function .)
    INT             reduce using rule 40 (statement -> call_function .)
    DOUBLE          reduce using rule 40 (statement -> call_function .)
    BOOL            reduce using rule 40 (statement -> call_function .)
    STRING          reduce using rule 40 (statement -> call_function .)
    ID              reduce using rule 40 (statement -> call_function .)
    IF              reduce using rule 40 (statement -> call_function .)
    RETURN          reduce using rule 40 (statement -> call_function .)
    WHILE           reduce using rule 40 (statement -> call_function .)
    READ            reduce using rule 40 (statement -> call_function .)
    WRITE           reduce using rule 40 (statement -> call_function .)


state 44

    (41) statement -> return_function .

    RIGHT_BRACE     reduce using rule 41 (statement -> return_function .)
    INT             reduce using rule 41 (statement -> return_function .)
    DOUBLE          reduce using rule 41 (statement -> return_function .)
    BOOL            reduce using rule 41 (statement -> return_function .)
    STRING          reduce using rule 41 (statement -> return_function .)
    ID              reduce using rule 41 (statement -> return_function .)
    IF              reduce using rule 41 (statement -> return_function .)
    RETURN          reduce using rule 41 (statement -> return_function .)
    WHILE           reduce using rule 41 (statement -> return_function .)
    READ            reduce using rule 41 (statement -> return_function .)
    WRITE           reduce using rule 41 (statement -> return_function .)


state 45

    (42) statement -> while_cycle .

    RIGHT_BRACE     reduce using rule 42 (statement -> while_cycle .)
    INT             reduce using rule 42 (statement -> while_cycle .)
    DOUBLE          reduce using rule 42 (statement -> while_cycle .)
    BOOL            reduce using rule 42 (statement -> while_cycle .)
    STRING          reduce using rule 42 (statement -> while_cycle .)
    ID              reduce using rule 42 (statement -> while_cycle .)
    IF              reduce using rule 42 (statement -> while_cycle .)
    RETURN          reduce using rule 42 (statement -> while_cycle .)
    WHILE           reduce using rule 42 (statement -> while_cycle .)
    READ            reduce using rule 42 (statement -> while_cycle .)
    WRITE           reduce using rule 42 (statement -> while_cycle .)


state 46

    (43) statement -> read .

    RIGHT_BRACE     reduce using rule 43 (statement -> read .)
    INT             reduce using rule 43 (statement -> read .)
    DOUBLE          reduce using rule 43 (statement -> read .)
    BOOL            reduce using rule 43 (statement -> read .)
    STRING          reduce using rule 43 (statement -> read .)
    ID              reduce using rule 43 (statement -> read .)
    IF              reduce using rule 43 (statement -> read .)
    RETURN          reduce using rule 43 (statement -> read .)
    WHILE           reduce using rule 43 (statement -> read .)
    READ            reduce using rule 43 (statement -> read .)
    WRITE           reduce using rule 43 (statement -> read .)


state 47

    (44) statement -> write .

    RIGHT_BRACE     reduce using rule 44 (statement -> write .)
    INT             reduce using rule 44 (statement -> write .)
    DOUBLE          reduce using rule 44 (statement -> write .)
    BOOL            reduce using rule 44 (statement -> write .)
    STRING          reduce using rule 44 (statement -> write .)
    ID              reduce using rule 44 (statement -> write .)
    IF              reduce using rule 44 (statement -> write .)
    RETURN          reduce using rule 44 (statement -> write .)
    WHILE           reduce using rule 44 (statement -> write .)
    READ            reduce using rule 44 (statement -> write .)
    WRITE           reduce using rule 44 (statement -> write .)


state 48

    (45) assignment -> ID . assignment2 expression SEMICOLON
    (74) call_function -> ID . LEFT_PAR call_function2 RIGHT_PAR SEMICOLON
    (46) assignment2 -> . ASSIGN
    (47) assignment2 -> . LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN

    LEFT_PAR        shift and go to state 67
    ASSIGN          shift and go to state 68
    LEFT_BRACKET    shift and go to state 69

    assignment2                    shift and go to state 66

state 49

    (72) condition -> IF . LEFT_PAR expression RIGHT_PAR block condition2

    LEFT_PAR        shift and go to state 70


state 50

    (79) return_function -> RETURN . exp SEMICOLON
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    exp                            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 51

    (80) while_cycle -> WHILE . LEFT_BRACE exp RIGHT_BRACE block

    LEFT_BRACE      shift and go to state 80


state 52

    (81) read -> READ . LEFT_PAR exp RIGHT_PAR SEMICOLON

    LEFT_PAR        shift and go to state 81


state 53

    (82) write -> WRITE . LEFT_PAR exp RIGHT_PAR SEMICOLON

    LEFT_PAR        shift and go to state 82


state 54

    (24) function_block -> FUNCTION func_type ID LEFT_PAR . function_block2 RIGHT_PAR block function_block SEMICOLON
    (26) function_block2 -> . var_type ID
    (27) function_block2 -> . var_type ID COMMA
    (28) function_block2 -> . empty
    (13) var_type -> . INT
    (14) var_type -> . DOUBLE
    (15) var_type -> . BOOL
    (16) var_type -> . STRING
    (84) empty -> .

    INT             shift and go to state 14
    DOUBLE          shift and go to state 15
    BOOL            shift and go to state 16
    STRING          shift and go to state 17
    RIGHT_PAR       reduce using rule 84 (empty -> .)

    function_block2                shift and go to state 83
    var_type                       shift and go to state 84
    empty                          shift and go to state 85

state 55

    (5) vars -> var_type vars2 SEMICOLON vars3 .

    MAIN            reduce using rule 5 (vars -> var_type vars2 SEMICOLON vars3 .)
    FUNCTION        reduce using rule 5 (vars -> var_type vars2 SEMICOLON vars3 .)
    INT             reduce using rule 5 (vars -> var_type vars2 SEMICOLON vars3 .)
    DOUBLE          reduce using rule 5 (vars -> var_type vars2 SEMICOLON vars3 .)
    BOOL            reduce using rule 5 (vars -> var_type vars2 SEMICOLON vars3 .)
    STRING          reduce using rule 5 (vars -> var_type vars2 SEMICOLON vars3 .)
    ID              reduce using rule 5 (vars -> var_type vars2 SEMICOLON vars3 .)
    IF              reduce using rule 5 (vars -> var_type vars2 SEMICOLON vars3 .)
    RETURN          reduce using rule 5 (vars -> var_type vars2 SEMICOLON vars3 .)
    WHILE           reduce using rule 5 (vars -> var_type vars2 SEMICOLON vars3 .)
    READ            reduce using rule 5 (vars -> var_type vars2 SEMICOLON vars3 .)
    WRITE           reduce using rule 5 (vars -> var_type vars2 SEMICOLON vars3 .)


state 56

    (8) vars3 -> ASSIGN var_cte . vars5
    (11) vars5 -> . SEMICOLON
    (12) vars5 -> . COMMA vars2

    SEMICOLON       shift and go to state 87
    COMMA           shift and go to state 88

    vars5                          shift and go to state 86

state 57

    (17) var_cte -> CTE_I .

    SEMICOLON       reduce using rule 17 (var_cte -> CTE_I .)
    COMMA           reduce using rule 17 (var_cte -> CTE_I .)
    MULTIPLY        reduce using rule 17 (var_cte -> CTE_I .)
    DIVIDE          reduce using rule 17 (var_cte -> CTE_I .)
    PLUS            reduce using rule 17 (var_cte -> CTE_I .)
    MINUS           reduce using rule 17 (var_cte -> CTE_I .)
    EQUAL_TO        reduce using rule 17 (var_cte -> CTE_I .)
    NOT_EQUAL_TO    reduce using rule 17 (var_cte -> CTE_I .)
    GREATER_THAN    reduce using rule 17 (var_cte -> CTE_I .)
    LESS_THAN       reduce using rule 17 (var_cte -> CTE_I .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 17 (var_cte -> CTE_I .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 17 (var_cte -> CTE_I .)
    AND             reduce using rule 17 (var_cte -> CTE_I .)
    OR              reduce using rule 17 (var_cte -> CTE_I .)
    RIGHT_PAR       reduce using rule 17 (var_cte -> CTE_I .)
    RIGHT_BRACE     reduce using rule 17 (var_cte -> CTE_I .)


state 58

    (18) var_cte -> CTE_D .

    SEMICOLON       reduce using rule 18 (var_cte -> CTE_D .)
    COMMA           reduce using rule 18 (var_cte -> CTE_D .)
    MULTIPLY        reduce using rule 18 (var_cte -> CTE_D .)
    DIVIDE          reduce using rule 18 (var_cte -> CTE_D .)
    PLUS            reduce using rule 18 (var_cte -> CTE_D .)
    MINUS           reduce using rule 18 (var_cte -> CTE_D .)
    EQUAL_TO        reduce using rule 18 (var_cte -> CTE_D .)
    NOT_EQUAL_TO    reduce using rule 18 (var_cte -> CTE_D .)
    GREATER_THAN    reduce using rule 18 (var_cte -> CTE_D .)
    LESS_THAN       reduce using rule 18 (var_cte -> CTE_D .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 18 (var_cte -> CTE_D .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 18 (var_cte -> CTE_D .)
    AND             reduce using rule 18 (var_cte -> CTE_D .)
    OR              reduce using rule 18 (var_cte -> CTE_D .)
    RIGHT_PAR       reduce using rule 18 (var_cte -> CTE_D .)
    RIGHT_BRACE     reduce using rule 18 (var_cte -> CTE_D .)


state 59

    (19) var_cte -> cte_b .

    SEMICOLON       reduce using rule 19 (var_cte -> cte_b .)
    COMMA           reduce using rule 19 (var_cte -> cte_b .)
    MULTIPLY        reduce using rule 19 (var_cte -> cte_b .)
    DIVIDE          reduce using rule 19 (var_cte -> cte_b .)
    PLUS            reduce using rule 19 (var_cte -> cte_b .)
    MINUS           reduce using rule 19 (var_cte -> cte_b .)
    EQUAL_TO        reduce using rule 19 (var_cte -> cte_b .)
    NOT_EQUAL_TO    reduce using rule 19 (var_cte -> cte_b .)
    GREATER_THAN    reduce using rule 19 (var_cte -> cte_b .)
    LESS_THAN       reduce using rule 19 (var_cte -> cte_b .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 19 (var_cte -> cte_b .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 19 (var_cte -> cte_b .)
    AND             reduce using rule 19 (var_cte -> cte_b .)
    OR              reduce using rule 19 (var_cte -> cte_b .)
    RIGHT_PAR       reduce using rule 19 (var_cte -> cte_b .)
    RIGHT_BRACE     reduce using rule 19 (var_cte -> cte_b .)


state 60

    (20) var_cte -> CTE_S .

    SEMICOLON       reduce using rule 20 (var_cte -> CTE_S .)
    COMMA           reduce using rule 20 (var_cte -> CTE_S .)
    MULTIPLY        reduce using rule 20 (var_cte -> CTE_S .)
    DIVIDE          reduce using rule 20 (var_cte -> CTE_S .)
    PLUS            reduce using rule 20 (var_cte -> CTE_S .)
    MINUS           reduce using rule 20 (var_cte -> CTE_S .)
    EQUAL_TO        reduce using rule 20 (var_cte -> CTE_S .)
    NOT_EQUAL_TO    reduce using rule 20 (var_cte -> CTE_S .)
    GREATER_THAN    reduce using rule 20 (var_cte -> CTE_S .)
    LESS_THAN       reduce using rule 20 (var_cte -> CTE_S .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> CTE_S .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> CTE_S .)
    AND             reduce using rule 20 (var_cte -> CTE_S .)
    OR              reduce using rule 20 (var_cte -> CTE_S .)
    RIGHT_PAR       reduce using rule 20 (var_cte -> CTE_S .)
    RIGHT_BRACE     reduce using rule 20 (var_cte -> CTE_S .)


state 61

    (21) var_cte -> ID . LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 89


state 62

    (22) cte_b -> TRUE .

    SEMICOLON       reduce using rule 22 (cte_b -> TRUE .)
    COMMA           reduce using rule 22 (cte_b -> TRUE .)
    MULTIPLY        reduce using rule 22 (cte_b -> TRUE .)
    DIVIDE          reduce using rule 22 (cte_b -> TRUE .)
    PLUS            reduce using rule 22 (cte_b -> TRUE .)
    MINUS           reduce using rule 22 (cte_b -> TRUE .)
    EQUAL_TO        reduce using rule 22 (cte_b -> TRUE .)
    NOT_EQUAL_TO    reduce using rule 22 (cte_b -> TRUE .)
    GREATER_THAN    reduce using rule 22 (cte_b -> TRUE .)
    LESS_THAN       reduce using rule 22 (cte_b -> TRUE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 22 (cte_b -> TRUE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 22 (cte_b -> TRUE .)
    AND             reduce using rule 22 (cte_b -> TRUE .)
    OR              reduce using rule 22 (cte_b -> TRUE .)
    RIGHT_PAR       reduce using rule 22 (cte_b -> TRUE .)
    RIGHT_BRACE     reduce using rule 22 (cte_b -> TRUE .)


state 63

    (23) cte_b -> FALSE .

    SEMICOLON       reduce using rule 23 (cte_b -> FALSE .)
    COMMA           reduce using rule 23 (cte_b -> FALSE .)
    MULTIPLY        reduce using rule 23 (cte_b -> FALSE .)
    DIVIDE          reduce using rule 23 (cte_b -> FALSE .)
    PLUS            reduce using rule 23 (cte_b -> FALSE .)
    MINUS           reduce using rule 23 (cte_b -> FALSE .)
    EQUAL_TO        reduce using rule 23 (cte_b -> FALSE .)
    NOT_EQUAL_TO    reduce using rule 23 (cte_b -> FALSE .)
    GREATER_THAN    reduce using rule 23 (cte_b -> FALSE .)
    LESS_THAN       reduce using rule 23 (cte_b -> FALSE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 23 (cte_b -> FALSE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 23 (cte_b -> FALSE .)
    AND             reduce using rule 23 (cte_b -> FALSE .)
    OR              reduce using rule 23 (cte_b -> FALSE .)
    RIGHT_PAR       reduce using rule 23 (cte_b -> FALSE .)
    RIGHT_BRACE     reduce using rule 23 (cte_b -> FALSE .)


state 64

    (9) vars4 -> LEFT_BRACKET CTE_I . RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2

    RIGHT_BRACKET   shift and go to state 90


state 65

    (35) block2 -> block2 vars statement .

    RIGHT_BRACE     reduce using rule 35 (block2 -> block2 vars statement .)
    INT             reduce using rule 35 (block2 -> block2 vars statement .)
    DOUBLE          reduce using rule 35 (block2 -> block2 vars statement .)
    BOOL            reduce using rule 35 (block2 -> block2 vars statement .)
    STRING          reduce using rule 35 (block2 -> block2 vars statement .)
    ID              reduce using rule 35 (block2 -> block2 vars statement .)
    IF              reduce using rule 35 (block2 -> block2 vars statement .)
    RETURN          reduce using rule 35 (block2 -> block2 vars statement .)
    WHILE           reduce using rule 35 (block2 -> block2 vars statement .)
    READ            reduce using rule 35 (block2 -> block2 vars statement .)
    WRITE           reduce using rule 35 (block2 -> block2 vars statement .)


state 66

    (45) assignment -> ID assignment2 . expression SEMICOLON
    (48) expression -> . exp expression1
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    expression                     shift and go to state 91
    exp                            shift and go to state 92
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 67

    (74) call_function -> ID LEFT_PAR . call_function2 RIGHT_PAR SEMICOLON
    (75) call_function2 -> . ID call_function3
    (76) call_function2 -> . exp call_function3
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    ID              shift and go to state 93
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    call_function2                 shift and go to state 94
    exp                            shift and go to state 95
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 68

    (46) assignment2 -> ASSIGN .

    LEFT_PAR        reduce using rule 46 (assignment2 -> ASSIGN .)
    CTE_I           reduce using rule 46 (assignment2 -> ASSIGN .)
    CTE_D           reduce using rule 46 (assignment2 -> ASSIGN .)
    CTE_S           reduce using rule 46 (assignment2 -> ASSIGN .)
    ID              reduce using rule 46 (assignment2 -> ASSIGN .)
    PLUS            reduce using rule 46 (assignment2 -> ASSIGN .)
    MINUS           reduce using rule 46 (assignment2 -> ASSIGN .)
    TRUE            reduce using rule 46 (assignment2 -> ASSIGN .)
    FALSE           reduce using rule 46 (assignment2 -> ASSIGN .)


state 69

    (47) assignment2 -> LEFT_BRACKET . CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN

    CTE_I           shift and go to state 96


state 70

    (72) condition -> IF LEFT_PAR . expression RIGHT_PAR block condition2
    (48) expression -> . exp expression1
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    expression                     shift and go to state 97
    exp                            shift and go to state 92
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 71

    (79) return_function -> RETURN exp . SEMICOLON

    SEMICOLON       shift and go to state 98


state 72

    (58) exp -> term . exp1
    (59) exp1 -> . PLUS exp
    (60) exp1 -> . MINUS exp
    (61) exp1 -> . empty
    (84) empty -> .

    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    SEMICOLON       reduce using rule 84 (empty -> .)
    EQUAL_TO        reduce using rule 84 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 84 (empty -> .)
    GREATER_THAN    reduce using rule 84 (empty -> .)
    LESS_THAN       reduce using rule 84 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 84 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 84 (empty -> .)
    AND             reduce using rule 84 (empty -> .)
    OR              reduce using rule 84 (empty -> .)
    COMMA           reduce using rule 84 (empty -> .)
    RIGHT_PAR       reduce using rule 84 (empty -> .)
    RIGHT_BRACE     reduce using rule 84 (empty -> .)

    exp1                           shift and go to state 99
    empty                          shift and go to state 102

state 73

    (62) term -> factor . term1
    (63) term1 -> . MULTIPLY term
    (64) term1 -> . DIVIDE term
    (65) term1 -> . empty
    (84) empty -> .

    MULTIPLY        shift and go to state 104
    DIVIDE          shift and go to state 105
    PLUS            reduce using rule 84 (empty -> .)
    MINUS           reduce using rule 84 (empty -> .)
    SEMICOLON       reduce using rule 84 (empty -> .)
    EQUAL_TO        reduce using rule 84 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 84 (empty -> .)
    GREATER_THAN    reduce using rule 84 (empty -> .)
    LESS_THAN       reduce using rule 84 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 84 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 84 (empty -> .)
    AND             reduce using rule 84 (empty -> .)
    OR              reduce using rule 84 (empty -> .)
    COMMA           reduce using rule 84 (empty -> .)
    RIGHT_PAR       reduce using rule 84 (empty -> .)
    RIGHT_BRACE     reduce using rule 84 (empty -> .)

    term1                          shift and go to state 103
    empty                          shift and go to state 106

state 74

    (66) factor -> LEFT_PAR . expression RIGHT_PAR
    (48) expression -> . exp expression1
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    expression                     shift and go to state 107
    exp                            shift and go to state 92
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 75

    (67) factor -> var_cte .

    MULTIPLY        reduce using rule 67 (factor -> var_cte .)
    DIVIDE          reduce using rule 67 (factor -> var_cte .)
    PLUS            reduce using rule 67 (factor -> var_cte .)
    MINUS           reduce using rule 67 (factor -> var_cte .)
    SEMICOLON       reduce using rule 67 (factor -> var_cte .)
    EQUAL_TO        reduce using rule 67 (factor -> var_cte .)
    NOT_EQUAL_TO    reduce using rule 67 (factor -> var_cte .)
    GREATER_THAN    reduce using rule 67 (factor -> var_cte .)
    LESS_THAN       reduce using rule 67 (factor -> var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 67 (factor -> var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 67 (factor -> var_cte .)
    AND             reduce using rule 67 (factor -> var_cte .)
    OR              reduce using rule 67 (factor -> var_cte .)
    COMMA           reduce using rule 67 (factor -> var_cte .)
    RIGHT_PAR       reduce using rule 67 (factor -> var_cte .)
    RIGHT_BRACE     reduce using rule 67 (factor -> var_cte .)


state 76

    (68) factor -> factor1 . var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE

    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    var_cte                        shift and go to state 108
    cte_b                          shift and go to state 59

state 77

    (69) factor1 -> PLUS .

    CTE_I           reduce using rule 69 (factor1 -> PLUS .)
    CTE_D           reduce using rule 69 (factor1 -> PLUS .)
    CTE_S           reduce using rule 69 (factor1 -> PLUS .)
    ID              reduce using rule 69 (factor1 -> PLUS .)
    TRUE            reduce using rule 69 (factor1 -> PLUS .)
    FALSE           reduce using rule 69 (factor1 -> PLUS .)


state 78

    (70) factor1 -> MINUS .

    CTE_I           reduce using rule 70 (factor1 -> MINUS .)
    CTE_D           reduce using rule 70 (factor1 -> MINUS .)
    CTE_S           reduce using rule 70 (factor1 -> MINUS .)
    ID              reduce using rule 70 (factor1 -> MINUS .)
    TRUE            reduce using rule 70 (factor1 -> MINUS .)
    FALSE           reduce using rule 70 (factor1 -> MINUS .)


state 79

    (71) factor1 -> empty .

    CTE_I           reduce using rule 71 (factor1 -> empty .)
    CTE_D           reduce using rule 71 (factor1 -> empty .)
    CTE_S           reduce using rule 71 (factor1 -> empty .)
    ID              reduce using rule 71 (factor1 -> empty .)
    TRUE            reduce using rule 71 (factor1 -> empty .)
    FALSE           reduce using rule 71 (factor1 -> empty .)


state 80

    (80) while_cycle -> WHILE LEFT_BRACE . exp RIGHT_BRACE block
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    exp                            shift and go to state 109
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 81

    (81) read -> READ LEFT_PAR . exp RIGHT_PAR SEMICOLON
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    exp                            shift and go to state 110
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 82

    (82) write -> WRITE LEFT_PAR . exp RIGHT_PAR SEMICOLON
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    exp                            shift and go to state 111
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 83

    (24) function_block -> FUNCTION func_type ID LEFT_PAR function_block2 . RIGHT_PAR block function_block SEMICOLON

    RIGHT_PAR       shift and go to state 112


state 84

    (26) function_block2 -> var_type . ID
    (27) function_block2 -> var_type . ID COMMA

    ID              shift and go to state 113


state 85

    (28) function_block2 -> empty .

    RIGHT_PAR       reduce using rule 28 (function_block2 -> empty .)


state 86

    (8) vars3 -> ASSIGN var_cte vars5 .

    SEMICOLON       reduce using rule 8 (vars3 -> ASSIGN var_cte vars5 .)
    MAIN            reduce using rule 8 (vars3 -> ASSIGN var_cte vars5 .)
    FUNCTION        reduce using rule 8 (vars3 -> ASSIGN var_cte vars5 .)
    INT             reduce using rule 8 (vars3 -> ASSIGN var_cte vars5 .)
    DOUBLE          reduce using rule 8 (vars3 -> ASSIGN var_cte vars5 .)
    BOOL            reduce using rule 8 (vars3 -> ASSIGN var_cte vars5 .)
    STRING          reduce using rule 8 (vars3 -> ASSIGN var_cte vars5 .)
    ID              reduce using rule 8 (vars3 -> ASSIGN var_cte vars5 .)
    IF              reduce using rule 8 (vars3 -> ASSIGN var_cte vars5 .)
    RETURN          reduce using rule 8 (vars3 -> ASSIGN var_cte vars5 .)
    WHILE           reduce using rule 8 (vars3 -> ASSIGN var_cte vars5 .)
    READ            reduce using rule 8 (vars3 -> ASSIGN var_cte vars5 .)
    WRITE           reduce using rule 8 (vars3 -> ASSIGN var_cte vars5 .)


state 87

    (11) vars5 -> SEMICOLON .

    SEMICOLON       reduce using rule 11 (vars5 -> SEMICOLON .)
    MAIN            reduce using rule 11 (vars5 -> SEMICOLON .)
    FUNCTION        reduce using rule 11 (vars5 -> SEMICOLON .)
    INT             reduce using rule 11 (vars5 -> SEMICOLON .)
    DOUBLE          reduce using rule 11 (vars5 -> SEMICOLON .)
    BOOL            reduce using rule 11 (vars5 -> SEMICOLON .)
    STRING          reduce using rule 11 (vars5 -> SEMICOLON .)
    ID              reduce using rule 11 (vars5 -> SEMICOLON .)
    IF              reduce using rule 11 (vars5 -> SEMICOLON .)
    RETURN          reduce using rule 11 (vars5 -> SEMICOLON .)
    WHILE           reduce using rule 11 (vars5 -> SEMICOLON .)
    READ            reduce using rule 11 (vars5 -> SEMICOLON .)
    WRITE           reduce using rule 11 (vars5 -> SEMICOLON .)


state 88

    (12) vars5 -> COMMA . vars2
    (6) vars2 -> . ID vars3
    (7) vars2 -> . ID vars4

    ID              shift and go to state 27

    vars2                          shift and go to state 114

state 89

    (21) var_cte -> ID LEFT_BRACKET . CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET

    CTE_I           shift and go to state 115


state 90

    (9) vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET . LEFT_BRACKET CTE_I RIGHT_BRACKET vars2

    LEFT_BRACKET    shift and go to state 116


state 91

    (45) assignment -> ID assignment2 expression . SEMICOLON

    SEMICOLON       shift and go to state 117


state 92

    (48) expression -> exp . expression1
    (49) expression1 -> . EQUAL_TO exp
    (50) expression1 -> . NOT_EQUAL_TO exp
    (51) expression1 -> . GREATER_THAN exp
    (52) expression1 -> . LESS_THAN exp
    (53) expression1 -> . GREATER_THAN_OR_EQUAL_TO exp
    (54) expression1 -> . LESS_THAN_OR_EQUAL_TO exp
    (55) expression1 -> . AND exp
    (56) expression1 -> . OR exp
    (57) expression1 -> . empty
    (84) empty -> .

    EQUAL_TO        shift and go to state 119
    NOT_EQUAL_TO    shift and go to state 120
    GREATER_THAN    shift and go to state 121
    LESS_THAN       shift and go to state 122
    GREATER_THAN_OR_EQUAL_TO shift and go to state 123
    LESS_THAN_OR_EQUAL_TO shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    SEMICOLON       reduce using rule 84 (empty -> .)
    RIGHT_PAR       reduce using rule 84 (empty -> .)

    expression1                    shift and go to state 118
    empty                          shift and go to state 127

state 93

    (75) call_function2 -> ID . call_function3
    (21) var_cte -> ID . LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (77) call_function3 -> . COMMA call_function2
    (78) call_function3 -> . empty
    (84) empty -> .

    LEFT_BRACKET    shift and go to state 89
    COMMA           shift and go to state 129
    RIGHT_PAR       reduce using rule 84 (empty -> .)

    call_function3                 shift and go to state 128
    empty                          shift and go to state 130

state 94

    (74) call_function -> ID LEFT_PAR call_function2 . RIGHT_PAR SEMICOLON

    RIGHT_PAR       shift and go to state 131


state 95

    (76) call_function2 -> exp . call_function3
    (77) call_function3 -> . COMMA call_function2
    (78) call_function3 -> . empty
    (84) empty -> .

    COMMA           shift and go to state 129
    RIGHT_PAR       reduce using rule 84 (empty -> .)

    call_function3                 shift and go to state 132
    empty                          shift and go to state 130

state 96

    (47) assignment2 -> LEFT_BRACKET CTE_I . RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN

    RIGHT_BRACKET   shift and go to state 133


state 97

    (72) condition -> IF LEFT_PAR expression . RIGHT_PAR block condition2

    RIGHT_PAR       shift and go to state 134


state 98

    (79) return_function -> RETURN exp SEMICOLON .

    RIGHT_BRACE     reduce using rule 79 (return_function -> RETURN exp SEMICOLON .)
    INT             reduce using rule 79 (return_function -> RETURN exp SEMICOLON .)
    DOUBLE          reduce using rule 79 (return_function -> RETURN exp SEMICOLON .)
    BOOL            reduce using rule 79 (return_function -> RETURN exp SEMICOLON .)
    STRING          reduce using rule 79 (return_function -> RETURN exp SEMICOLON .)
    ID              reduce using rule 79 (return_function -> RETURN exp SEMICOLON .)
    IF              reduce using rule 79 (return_function -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 79 (return_function -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 79 (return_function -> RETURN exp SEMICOLON .)
    READ            reduce using rule 79 (return_function -> RETURN exp SEMICOLON .)
    WRITE           reduce using rule 79 (return_function -> RETURN exp SEMICOLON .)


state 99

    (58) exp -> term exp1 .

    SEMICOLON       reduce using rule 58 (exp -> term exp1 .)
    EQUAL_TO        reduce using rule 58 (exp -> term exp1 .)
    NOT_EQUAL_TO    reduce using rule 58 (exp -> term exp1 .)
    GREATER_THAN    reduce using rule 58 (exp -> term exp1 .)
    LESS_THAN       reduce using rule 58 (exp -> term exp1 .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 58 (exp -> term exp1 .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 58 (exp -> term exp1 .)
    AND             reduce using rule 58 (exp -> term exp1 .)
    OR              reduce using rule 58 (exp -> term exp1 .)
    COMMA           reduce using rule 58 (exp -> term exp1 .)
    RIGHT_PAR       reduce using rule 58 (exp -> term exp1 .)
    RIGHT_BRACE     reduce using rule 58 (exp -> term exp1 .)


state 100

    (59) exp1 -> PLUS . exp
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    exp                            shift and go to state 135
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 101

    (60) exp1 -> MINUS . exp
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    exp                            shift and go to state 136
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 102

    (61) exp1 -> empty .

    SEMICOLON       reduce using rule 61 (exp1 -> empty .)
    EQUAL_TO        reduce using rule 61 (exp1 -> empty .)
    NOT_EQUAL_TO    reduce using rule 61 (exp1 -> empty .)
    GREATER_THAN    reduce using rule 61 (exp1 -> empty .)
    LESS_THAN       reduce using rule 61 (exp1 -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 61 (exp1 -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 61 (exp1 -> empty .)
    AND             reduce using rule 61 (exp1 -> empty .)
    OR              reduce using rule 61 (exp1 -> empty .)
    COMMA           reduce using rule 61 (exp1 -> empty .)
    RIGHT_PAR       reduce using rule 61 (exp1 -> empty .)
    RIGHT_BRACE     reduce using rule 61 (exp1 -> empty .)


state 103

    (62) term -> factor term1 .

    PLUS            reduce using rule 62 (term -> factor term1 .)
    MINUS           reduce using rule 62 (term -> factor term1 .)
    SEMICOLON       reduce using rule 62 (term -> factor term1 .)
    EQUAL_TO        reduce using rule 62 (term -> factor term1 .)
    NOT_EQUAL_TO    reduce using rule 62 (term -> factor term1 .)
    GREATER_THAN    reduce using rule 62 (term -> factor term1 .)
    LESS_THAN       reduce using rule 62 (term -> factor term1 .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 62 (term -> factor term1 .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 62 (term -> factor term1 .)
    AND             reduce using rule 62 (term -> factor term1 .)
    OR              reduce using rule 62 (term -> factor term1 .)
    COMMA           reduce using rule 62 (term -> factor term1 .)
    RIGHT_PAR       reduce using rule 62 (term -> factor term1 .)
    RIGHT_BRACE     reduce using rule 62 (term -> factor term1 .)


state 104

    (63) term1 -> MULTIPLY . term
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    term                           shift and go to state 137
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 105

    (64) term1 -> DIVIDE . term
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    term                           shift and go to state 138
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 106

    (65) term1 -> empty .

    PLUS            reduce using rule 65 (term1 -> empty .)
    MINUS           reduce using rule 65 (term1 -> empty .)
    SEMICOLON       reduce using rule 65 (term1 -> empty .)
    EQUAL_TO        reduce using rule 65 (term1 -> empty .)
    NOT_EQUAL_TO    reduce using rule 65 (term1 -> empty .)
    GREATER_THAN    reduce using rule 65 (term1 -> empty .)
    LESS_THAN       reduce using rule 65 (term1 -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 65 (term1 -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 65 (term1 -> empty .)
    AND             reduce using rule 65 (term1 -> empty .)
    OR              reduce using rule 65 (term1 -> empty .)
    COMMA           reduce using rule 65 (term1 -> empty .)
    RIGHT_PAR       reduce using rule 65 (term1 -> empty .)
    RIGHT_BRACE     reduce using rule 65 (term1 -> empty .)


state 107

    (66) factor -> LEFT_PAR expression . RIGHT_PAR

    RIGHT_PAR       shift and go to state 139


state 108

    (68) factor -> factor1 var_cte .

    MULTIPLY        reduce using rule 68 (factor -> factor1 var_cte .)
    DIVIDE          reduce using rule 68 (factor -> factor1 var_cte .)
    PLUS            reduce using rule 68 (factor -> factor1 var_cte .)
    MINUS           reduce using rule 68 (factor -> factor1 var_cte .)
    SEMICOLON       reduce using rule 68 (factor -> factor1 var_cte .)
    EQUAL_TO        reduce using rule 68 (factor -> factor1 var_cte .)
    NOT_EQUAL_TO    reduce using rule 68 (factor -> factor1 var_cte .)
    GREATER_THAN    reduce using rule 68 (factor -> factor1 var_cte .)
    LESS_THAN       reduce using rule 68 (factor -> factor1 var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 68 (factor -> factor1 var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 68 (factor -> factor1 var_cte .)
    AND             reduce using rule 68 (factor -> factor1 var_cte .)
    OR              reduce using rule 68 (factor -> factor1 var_cte .)
    COMMA           reduce using rule 68 (factor -> factor1 var_cte .)
    RIGHT_PAR       reduce using rule 68 (factor -> factor1 var_cte .)
    RIGHT_BRACE     reduce using rule 68 (factor -> factor1 var_cte .)


state 109

    (80) while_cycle -> WHILE LEFT_BRACE exp . RIGHT_BRACE block

    RIGHT_BRACE     shift and go to state 140


state 110

    (81) read -> READ LEFT_PAR exp . RIGHT_PAR SEMICOLON

    RIGHT_PAR       shift and go to state 141


state 111

    (82) write -> WRITE LEFT_PAR exp . RIGHT_PAR SEMICOLON

    RIGHT_PAR       shift and go to state 142


state 112

    (24) function_block -> FUNCTION func_type ID LEFT_PAR function_block2 RIGHT_PAR . block function_block SEMICOLON
    (34) block -> . LEFT_BRACE block2 RIGHT_BRACE

    LEFT_BRACE      shift and go to state 19

    block                          shift and go to state 143

state 113

    (26) function_block2 -> var_type ID .
    (27) function_block2 -> var_type ID . COMMA

    RIGHT_PAR       reduce using rule 26 (function_block2 -> var_type ID .)
    COMMA           shift and go to state 144


state 114

    (12) vars5 -> COMMA vars2 .

    SEMICOLON       reduce using rule 12 (vars5 -> COMMA vars2 .)
    MAIN            reduce using rule 12 (vars5 -> COMMA vars2 .)
    FUNCTION        reduce using rule 12 (vars5 -> COMMA vars2 .)
    INT             reduce using rule 12 (vars5 -> COMMA vars2 .)
    DOUBLE          reduce using rule 12 (vars5 -> COMMA vars2 .)
    BOOL            reduce using rule 12 (vars5 -> COMMA vars2 .)
    STRING          reduce using rule 12 (vars5 -> COMMA vars2 .)
    ID              reduce using rule 12 (vars5 -> COMMA vars2 .)
    IF              reduce using rule 12 (vars5 -> COMMA vars2 .)
    RETURN          reduce using rule 12 (vars5 -> COMMA vars2 .)
    WHILE           reduce using rule 12 (vars5 -> COMMA vars2 .)
    READ            reduce using rule 12 (vars5 -> COMMA vars2 .)
    WRITE           reduce using rule 12 (vars5 -> COMMA vars2 .)


state 115

    (21) var_cte -> ID LEFT_BRACKET CTE_I . RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 145


state 116

    (9) vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET . CTE_I RIGHT_BRACKET vars2

    CTE_I           shift and go to state 146


state 117

    (45) assignment -> ID assignment2 expression SEMICOLON .

    RIGHT_BRACE     reduce using rule 45 (assignment -> ID assignment2 expression SEMICOLON .)
    INT             reduce using rule 45 (assignment -> ID assignment2 expression SEMICOLON .)
    DOUBLE          reduce using rule 45 (assignment -> ID assignment2 expression SEMICOLON .)
    BOOL            reduce using rule 45 (assignment -> ID assignment2 expression SEMICOLON .)
    STRING          reduce using rule 45 (assignment -> ID assignment2 expression SEMICOLON .)
    ID              reduce using rule 45 (assignment -> ID assignment2 expression SEMICOLON .)
    IF              reduce using rule 45 (assignment -> ID assignment2 expression SEMICOLON .)
    RETURN          reduce using rule 45 (assignment -> ID assignment2 expression SEMICOLON .)
    WHILE           reduce using rule 45 (assignment -> ID assignment2 expression SEMICOLON .)
    READ            reduce using rule 45 (assignment -> ID assignment2 expression SEMICOLON .)
    WRITE           reduce using rule 45 (assignment -> ID assignment2 expression SEMICOLON .)


state 118

    (48) expression -> exp expression1 .

    SEMICOLON       reduce using rule 48 (expression -> exp expression1 .)
    RIGHT_PAR       reduce using rule 48 (expression -> exp expression1 .)


state 119

    (49) expression1 -> EQUAL_TO . exp
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    exp                            shift and go to state 147
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 120

    (50) expression1 -> NOT_EQUAL_TO . exp
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    exp                            shift and go to state 148
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 121

    (51) expression1 -> GREATER_THAN . exp
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    exp                            shift and go to state 149
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 122

    (52) expression1 -> LESS_THAN . exp
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    exp                            shift and go to state 150
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 123

    (53) expression1 -> GREATER_THAN_OR_EQUAL_TO . exp
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    exp                            shift and go to state 151
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 124

    (54) expression1 -> LESS_THAN_OR_EQUAL_TO . exp
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    exp                            shift and go to state 152
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 125

    (55) expression1 -> AND . exp
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    exp                            shift and go to state 153
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 126

    (56) expression1 -> OR . exp
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    exp                            shift and go to state 154
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 127

    (57) expression1 -> empty .

    SEMICOLON       reduce using rule 57 (expression1 -> empty .)
    RIGHT_PAR       reduce using rule 57 (expression1 -> empty .)


state 128

    (75) call_function2 -> ID call_function3 .

    RIGHT_PAR       reduce using rule 75 (call_function2 -> ID call_function3 .)


state 129

    (77) call_function3 -> COMMA . call_function2
    (75) call_function2 -> . ID call_function3
    (76) call_function2 -> . exp call_function3
    (58) exp -> . term exp1
    (62) term -> . factor term1
    (66) factor -> . LEFT_PAR expression RIGHT_PAR
    (67) factor -> . var_cte
    (68) factor -> . factor1 var_cte
    (17) var_cte -> . CTE_I
    (18) var_cte -> . CTE_D
    (19) var_cte -> . cte_b
    (20) var_cte -> . CTE_S
    (21) var_cte -> . ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET
    (69) factor1 -> . PLUS
    (70) factor1 -> . MINUS
    (71) factor1 -> . empty
    (22) cte_b -> . TRUE
    (23) cte_b -> . FALSE
    (84) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    ID              shift and go to state 93
    LEFT_PAR        shift and go to state 74
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! CTE_I           [ reduce using rule 84 (empty -> .) ]
  ! CTE_D           [ reduce using rule 84 (empty -> .) ]
  ! CTE_S           [ reduce using rule 84 (empty -> .) ]
  ! ID              [ reduce using rule 84 (empty -> .) ]
  ! TRUE            [ reduce using rule 84 (empty -> .) ]
  ! FALSE           [ reduce using rule 84 (empty -> .) ]

    call_function2                 shift and go to state 155
    exp                            shift and go to state 95
    term                           shift and go to state 72
    factor                         shift and go to state 73
    var_cte                        shift and go to state 75
    factor1                        shift and go to state 76
    cte_b                          shift and go to state 59
    empty                          shift and go to state 79

state 130

    (78) call_function3 -> empty .

    RIGHT_PAR       reduce using rule 78 (call_function3 -> empty .)


state 131

    (74) call_function -> ID LEFT_PAR call_function2 RIGHT_PAR . SEMICOLON

    SEMICOLON       shift and go to state 156


state 132

    (76) call_function2 -> exp call_function3 .

    RIGHT_PAR       reduce using rule 76 (call_function2 -> exp call_function3 .)


state 133

    (47) assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET . LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN

    LEFT_BRACKET    shift and go to state 157


state 134

    (72) condition -> IF LEFT_PAR expression RIGHT_PAR . block condition2
    (34) block -> . LEFT_BRACE block2 RIGHT_BRACE

    LEFT_BRACE      shift and go to state 19

    block                          shift and go to state 158

state 135

    (59) exp1 -> PLUS exp .

    SEMICOLON       reduce using rule 59 (exp1 -> PLUS exp .)
    EQUAL_TO        reduce using rule 59 (exp1 -> PLUS exp .)
    NOT_EQUAL_TO    reduce using rule 59 (exp1 -> PLUS exp .)
    GREATER_THAN    reduce using rule 59 (exp1 -> PLUS exp .)
    LESS_THAN       reduce using rule 59 (exp1 -> PLUS exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 59 (exp1 -> PLUS exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 59 (exp1 -> PLUS exp .)
    AND             reduce using rule 59 (exp1 -> PLUS exp .)
    OR              reduce using rule 59 (exp1 -> PLUS exp .)
    COMMA           reduce using rule 59 (exp1 -> PLUS exp .)
    RIGHT_PAR       reduce using rule 59 (exp1 -> PLUS exp .)
    RIGHT_BRACE     reduce using rule 59 (exp1 -> PLUS exp .)


state 136

    (60) exp1 -> MINUS exp .

    SEMICOLON       reduce using rule 60 (exp1 -> MINUS exp .)
    EQUAL_TO        reduce using rule 60 (exp1 -> MINUS exp .)
    NOT_EQUAL_TO    reduce using rule 60 (exp1 -> MINUS exp .)
    GREATER_THAN    reduce using rule 60 (exp1 -> MINUS exp .)
    LESS_THAN       reduce using rule 60 (exp1 -> MINUS exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 60 (exp1 -> MINUS exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 60 (exp1 -> MINUS exp .)
    AND             reduce using rule 60 (exp1 -> MINUS exp .)
    OR              reduce using rule 60 (exp1 -> MINUS exp .)
    COMMA           reduce using rule 60 (exp1 -> MINUS exp .)
    RIGHT_PAR       reduce using rule 60 (exp1 -> MINUS exp .)
    RIGHT_BRACE     reduce using rule 60 (exp1 -> MINUS exp .)


state 137

    (63) term1 -> MULTIPLY term .

    PLUS            reduce using rule 63 (term1 -> MULTIPLY term .)
    MINUS           reduce using rule 63 (term1 -> MULTIPLY term .)
    SEMICOLON       reduce using rule 63 (term1 -> MULTIPLY term .)
    EQUAL_TO        reduce using rule 63 (term1 -> MULTIPLY term .)
    NOT_EQUAL_TO    reduce using rule 63 (term1 -> MULTIPLY term .)
    GREATER_THAN    reduce using rule 63 (term1 -> MULTIPLY term .)
    LESS_THAN       reduce using rule 63 (term1 -> MULTIPLY term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 63 (term1 -> MULTIPLY term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 63 (term1 -> MULTIPLY term .)
    AND             reduce using rule 63 (term1 -> MULTIPLY term .)
    OR              reduce using rule 63 (term1 -> MULTIPLY term .)
    COMMA           reduce using rule 63 (term1 -> MULTIPLY term .)
    RIGHT_PAR       reduce using rule 63 (term1 -> MULTIPLY term .)
    RIGHT_BRACE     reduce using rule 63 (term1 -> MULTIPLY term .)


state 138

    (64) term1 -> DIVIDE term .

    PLUS            reduce using rule 64 (term1 -> DIVIDE term .)
    MINUS           reduce using rule 64 (term1 -> DIVIDE term .)
    SEMICOLON       reduce using rule 64 (term1 -> DIVIDE term .)
    EQUAL_TO        reduce using rule 64 (term1 -> DIVIDE term .)
    NOT_EQUAL_TO    reduce using rule 64 (term1 -> DIVIDE term .)
    GREATER_THAN    reduce using rule 64 (term1 -> DIVIDE term .)
    LESS_THAN       reduce using rule 64 (term1 -> DIVIDE term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 64 (term1 -> DIVIDE term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 64 (term1 -> DIVIDE term .)
    AND             reduce using rule 64 (term1 -> DIVIDE term .)
    OR              reduce using rule 64 (term1 -> DIVIDE term .)
    COMMA           reduce using rule 64 (term1 -> DIVIDE term .)
    RIGHT_PAR       reduce using rule 64 (term1 -> DIVIDE term .)
    RIGHT_BRACE     reduce using rule 64 (term1 -> DIVIDE term .)


state 139

    (66) factor -> LEFT_PAR expression RIGHT_PAR .

    MULTIPLY        reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    DIVIDE          reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    PLUS            reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    MINUS           reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    SEMICOLON       reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    EQUAL_TO        reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    NOT_EQUAL_TO    reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    GREATER_THAN    reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    LESS_THAN       reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    AND             reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    OR              reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    COMMA           reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    RIGHT_PAR       reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)
    RIGHT_BRACE     reduce using rule 66 (factor -> LEFT_PAR expression RIGHT_PAR .)


state 140

    (80) while_cycle -> WHILE LEFT_BRACE exp RIGHT_BRACE . block
    (34) block -> . LEFT_BRACE block2 RIGHT_BRACE

    LEFT_BRACE      shift and go to state 19

    block                          shift and go to state 159

state 141

    (81) read -> READ LEFT_PAR exp RIGHT_PAR . SEMICOLON

    SEMICOLON       shift and go to state 160


state 142

    (82) write -> WRITE LEFT_PAR exp RIGHT_PAR . SEMICOLON

    SEMICOLON       shift and go to state 161


state 143

    (24) function_block -> FUNCTION func_type ID LEFT_PAR function_block2 RIGHT_PAR block . function_block SEMICOLON
    (24) function_block -> . FUNCTION func_type ID LEFT_PAR function_block2 RIGHT_PAR block function_block SEMICOLON
    (25) function_block -> . empty
    (84) empty -> .

    FUNCTION        shift and go to state 11
    SEMICOLON       reduce using rule 84 (empty -> .)

    function_block                 shift and go to state 162
    empty                          shift and go to state 12

state 144

    (27) function_block2 -> var_type ID COMMA .

    RIGHT_PAR       reduce using rule 27 (function_block2 -> var_type ID COMMA .)


state 145

    (21) var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET . LEFT_BRACKET CTE_I RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 163


state 146

    (9) vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I . RIGHT_BRACKET vars2

    RIGHT_BRACKET   shift and go to state 164


state 147

    (49) expression1 -> EQUAL_TO exp .

    SEMICOLON       reduce using rule 49 (expression1 -> EQUAL_TO exp .)
    RIGHT_PAR       reduce using rule 49 (expression1 -> EQUAL_TO exp .)


state 148

    (50) expression1 -> NOT_EQUAL_TO exp .

    SEMICOLON       reduce using rule 50 (expression1 -> NOT_EQUAL_TO exp .)
    RIGHT_PAR       reduce using rule 50 (expression1 -> NOT_EQUAL_TO exp .)


state 149

    (51) expression1 -> GREATER_THAN exp .

    SEMICOLON       reduce using rule 51 (expression1 -> GREATER_THAN exp .)
    RIGHT_PAR       reduce using rule 51 (expression1 -> GREATER_THAN exp .)


state 150

    (52) expression1 -> LESS_THAN exp .

    SEMICOLON       reduce using rule 52 (expression1 -> LESS_THAN exp .)
    RIGHT_PAR       reduce using rule 52 (expression1 -> LESS_THAN exp .)


state 151

    (53) expression1 -> GREATER_THAN_OR_EQUAL_TO exp .

    SEMICOLON       reduce using rule 53 (expression1 -> GREATER_THAN_OR_EQUAL_TO exp .)
    RIGHT_PAR       reduce using rule 53 (expression1 -> GREATER_THAN_OR_EQUAL_TO exp .)


state 152

    (54) expression1 -> LESS_THAN_OR_EQUAL_TO exp .

    SEMICOLON       reduce using rule 54 (expression1 -> LESS_THAN_OR_EQUAL_TO exp .)
    RIGHT_PAR       reduce using rule 54 (expression1 -> LESS_THAN_OR_EQUAL_TO exp .)


state 153

    (55) expression1 -> AND exp .

    SEMICOLON       reduce using rule 55 (expression1 -> AND exp .)
    RIGHT_PAR       reduce using rule 55 (expression1 -> AND exp .)


state 154

    (56) expression1 -> OR exp .

    SEMICOLON       reduce using rule 56 (expression1 -> OR exp .)
    RIGHT_PAR       reduce using rule 56 (expression1 -> OR exp .)


state 155

    (77) call_function3 -> COMMA call_function2 .

    RIGHT_PAR       reduce using rule 77 (call_function3 -> COMMA call_function2 .)


state 156

    (74) call_function -> ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON .

    RIGHT_BRACE     reduce using rule 74 (call_function -> ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON .)
    INT             reduce using rule 74 (call_function -> ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON .)
    DOUBLE          reduce using rule 74 (call_function -> ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON .)
    BOOL            reduce using rule 74 (call_function -> ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON .)
    STRING          reduce using rule 74 (call_function -> ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON .)
    ID              reduce using rule 74 (call_function -> ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON .)
    IF              reduce using rule 74 (call_function -> ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON .)
    RETURN          reduce using rule 74 (call_function -> ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON .)
    WHILE           reduce using rule 74 (call_function -> ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON .)
    READ            reduce using rule 74 (call_function -> ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON .)
    WRITE           reduce using rule 74 (call_function -> ID LEFT_PAR call_function2 RIGHT_PAR SEMICOLON .)


state 157

    (47) assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET . CTE_I RIGHT_BRACKET ASSIGN

    CTE_I           shift and go to state 165


state 158

    (72) condition -> IF LEFT_PAR expression RIGHT_PAR block . condition2
    (73) condition2 -> . ELSE block

    ELSE            shift and go to state 167

    condition2                     shift and go to state 166

state 159

    (80) while_cycle -> WHILE LEFT_BRACE exp RIGHT_BRACE block .

    RIGHT_BRACE     reduce using rule 80 (while_cycle -> WHILE LEFT_BRACE exp RIGHT_BRACE block .)
    INT             reduce using rule 80 (while_cycle -> WHILE LEFT_BRACE exp RIGHT_BRACE block .)
    DOUBLE          reduce using rule 80 (while_cycle -> WHILE LEFT_BRACE exp RIGHT_BRACE block .)
    BOOL            reduce using rule 80 (while_cycle -> WHILE LEFT_BRACE exp RIGHT_BRACE block .)
    STRING          reduce using rule 80 (while_cycle -> WHILE LEFT_BRACE exp RIGHT_BRACE block .)
    ID              reduce using rule 80 (while_cycle -> WHILE LEFT_BRACE exp RIGHT_BRACE block .)
    IF              reduce using rule 80 (while_cycle -> WHILE LEFT_BRACE exp RIGHT_BRACE block .)
    RETURN          reduce using rule 80 (while_cycle -> WHILE LEFT_BRACE exp RIGHT_BRACE block .)
    WHILE           reduce using rule 80 (while_cycle -> WHILE LEFT_BRACE exp RIGHT_BRACE block .)
    READ            reduce using rule 80 (while_cycle -> WHILE LEFT_BRACE exp RIGHT_BRACE block .)
    WRITE           reduce using rule 80 (while_cycle -> WHILE LEFT_BRACE exp RIGHT_BRACE block .)


state 160

    (81) read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .

    RIGHT_BRACE     reduce using rule 81 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    INT             reduce using rule 81 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    DOUBLE          reduce using rule 81 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    BOOL            reduce using rule 81 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    STRING          reduce using rule 81 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    ID              reduce using rule 81 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    IF              reduce using rule 81 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    RETURN          reduce using rule 81 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    WHILE           reduce using rule 81 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    READ            reduce using rule 81 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    WRITE           reduce using rule 81 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)


state 161

    (82) write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .

    RIGHT_BRACE     reduce using rule 82 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    INT             reduce using rule 82 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    DOUBLE          reduce using rule 82 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    BOOL            reduce using rule 82 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    STRING          reduce using rule 82 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    ID              reduce using rule 82 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    IF              reduce using rule 82 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    RETURN          reduce using rule 82 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    WHILE           reduce using rule 82 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    READ            reduce using rule 82 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    WRITE           reduce using rule 82 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)


state 162

    (24) function_block -> FUNCTION func_type ID LEFT_PAR function_block2 RIGHT_PAR block function_block . SEMICOLON

    SEMICOLON       shift and go to state 168


state 163

    (21) var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET . CTE_I RIGHT_BRACKET

    CTE_I           shift and go to state 169


state 164

    (9) vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET . vars2
    (6) vars2 -> . ID vars3
    (7) vars2 -> . ID vars4

    ID              shift and go to state 27

    vars2                          shift and go to state 170

state 165

    (47) assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I . RIGHT_BRACKET ASSIGN

    RIGHT_BRACKET   shift and go to state 171


state 166

    (72) condition -> IF LEFT_PAR expression RIGHT_PAR block condition2 .

    RIGHT_BRACE     reduce using rule 72 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition2 .)
    INT             reduce using rule 72 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition2 .)
    DOUBLE          reduce using rule 72 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition2 .)
    BOOL            reduce using rule 72 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition2 .)
    STRING          reduce using rule 72 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition2 .)
    ID              reduce using rule 72 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition2 .)
    IF              reduce using rule 72 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition2 .)
    RETURN          reduce using rule 72 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition2 .)
    WHILE           reduce using rule 72 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition2 .)
    READ            reduce using rule 72 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition2 .)
    WRITE           reduce using rule 72 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition2 .)


state 167

    (73) condition2 -> ELSE . block
    (34) block -> . LEFT_BRACE block2 RIGHT_BRACE

    LEFT_BRACE      shift and go to state 19

    block                          shift and go to state 172

state 168

    (24) function_block -> FUNCTION func_type ID LEFT_PAR function_block2 RIGHT_PAR block function_block SEMICOLON .

    MAIN            reduce using rule 24 (function_block -> FUNCTION func_type ID LEFT_PAR function_block2 RIGHT_PAR block function_block SEMICOLON .)
    FUNCTION        reduce using rule 24 (function_block -> FUNCTION func_type ID LEFT_PAR function_block2 RIGHT_PAR block function_block SEMICOLON .)
    INT             reduce using rule 24 (function_block -> FUNCTION func_type ID LEFT_PAR function_block2 RIGHT_PAR block function_block SEMICOLON .)
    DOUBLE          reduce using rule 24 (function_block -> FUNCTION func_type ID LEFT_PAR function_block2 RIGHT_PAR block function_block SEMICOLON .)
    BOOL            reduce using rule 24 (function_block -> FUNCTION func_type ID LEFT_PAR function_block2 RIGHT_PAR block function_block SEMICOLON .)
    STRING          reduce using rule 24 (function_block -> FUNCTION func_type ID LEFT_PAR function_block2 RIGHT_PAR block function_block SEMICOLON .)
    SEMICOLON       reduce using rule 24 (function_block -> FUNCTION func_type ID LEFT_PAR function_block2 RIGHT_PAR block function_block SEMICOLON .)


state 169

    (21) var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 173


state 170

    (9) vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2 .

    SEMICOLON       reduce using rule 9 (vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2 .)
    MAIN            reduce using rule 9 (vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2 .)
    FUNCTION        reduce using rule 9 (vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2 .)
    INT             reduce using rule 9 (vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2 .)
    DOUBLE          reduce using rule 9 (vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2 .)
    BOOL            reduce using rule 9 (vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2 .)
    STRING          reduce using rule 9 (vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2 .)
    ID              reduce using rule 9 (vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2 .)
    IF              reduce using rule 9 (vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2 .)
    RETURN          reduce using rule 9 (vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2 .)
    WHILE           reduce using rule 9 (vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2 .)
    READ            reduce using rule 9 (vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2 .)
    WRITE           reduce using rule 9 (vars4 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET vars2 .)


state 171

    (47) assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET . ASSIGN

    ASSIGN          shift and go to state 174


state 172

    (73) condition2 -> ELSE block .

    RIGHT_BRACE     reduce using rule 73 (condition2 -> ELSE block .)
    INT             reduce using rule 73 (condition2 -> ELSE block .)
    DOUBLE          reduce using rule 73 (condition2 -> ELSE block .)
    BOOL            reduce using rule 73 (condition2 -> ELSE block .)
    STRING          reduce using rule 73 (condition2 -> ELSE block .)
    ID              reduce using rule 73 (condition2 -> ELSE block .)
    IF              reduce using rule 73 (condition2 -> ELSE block .)
    RETURN          reduce using rule 73 (condition2 -> ELSE block .)
    WHILE           reduce using rule 73 (condition2 -> ELSE block .)
    READ            reduce using rule 73 (condition2 -> ELSE block .)
    WRITE           reduce using rule 73 (condition2 -> ELSE block .)


state 173

    (21) var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .

    SEMICOLON       reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    COMMA           reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    MULTIPLY        reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    DIVIDE          reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    PLUS            reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    MINUS           reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    EQUAL_TO        reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    NOT_EQUAL_TO    reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    GREATER_THAN    reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    LESS_THAN       reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    AND             reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    OR              reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    RIGHT_PAR       reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 21 (var_cte -> ID LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET .)


state 174

    (47) assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN .

    LEFT_PAR        reduce using rule 47 (assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN .)
    CTE_I           reduce using rule 47 (assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN .)
    CTE_D           reduce using rule 47 (assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN .)
    CTE_S           reduce using rule 47 (assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN .)
    ID              reduce using rule 47 (assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN .)
    PLUS            reduce using rule 47 (assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN .)
    MINUS           reduce using rule 47 (assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN .)
    TRUE            reduce using rule 47 (assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN .)
    FALSE           reduce using rule 47 (assignment2 -> LEFT_BRACKET CTE_I RIGHT_BRACKET LEFT_BRACKET CTE_I RIGHT_BRACKET ASSIGN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 50 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 50 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 50 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 50 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 50 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 66 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 66 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 66 resolved as shift
WARNING: shift/reduce conflict for ID in state 66 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 66 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 66 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 67 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 67 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 67 resolved as shift
WARNING: shift/reduce conflict for ID in state 67 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 67 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 67 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 70 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 70 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 70 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 70 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 70 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 74 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 74 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 74 resolved as shift
WARNING: shift/reduce conflict for ID in state 74 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 74 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 74 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 80 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 80 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 80 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 80 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 81 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 81 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 81 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 81 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 82 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 82 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 82 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 82 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 100 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 100 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 100 resolved as shift
WARNING: shift/reduce conflict for ID in state 100 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 100 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 100 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 101 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 101 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 101 resolved as shift
WARNING: shift/reduce conflict for ID in state 101 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 101 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 101 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 104 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 104 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 104 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 104 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 105 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 105 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 105 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 105 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 119 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 119 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 119 resolved as shift
WARNING: shift/reduce conflict for ID in state 119 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 119 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 119 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 120 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 120 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 120 resolved as shift
WARNING: shift/reduce conflict for ID in state 120 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 120 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 120 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 121 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 121 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 121 resolved as shift
WARNING: shift/reduce conflict for ID in state 121 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 121 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 121 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 122 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 122 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 122 resolved as shift
WARNING: shift/reduce conflict for ID in state 122 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 122 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 122 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 123 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 123 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 123 resolved as shift
WARNING: shift/reduce conflict for ID in state 123 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 123 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 123 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 124 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 124 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 124 resolved as shift
WARNING: shift/reduce conflict for ID in state 124 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 124 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 124 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 125 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 125 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 125 resolved as shift
WARNING: shift/reduce conflict for ID in state 125 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 125 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 125 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 126 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 126 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 126 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 126 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 126 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 129 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 129 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 129 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 129 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 129 resolved as shift

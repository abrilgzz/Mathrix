Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> global_declaration
Rule 2     global_declaration -> var_declaration global_declaration
Rule 3     global_declaration -> func_declaration
Rule 4     var_declaration -> var_type ID array SEMICOLON
Rule 5     var_declaration -> empty
Rule 6     array -> LEFT_BRACKET expression RIGHT_BRACKET array
Rule 7     array -> empty
Rule 8     func_declaration -> func_signature func_declaration
Rule 9     func_declaration -> main
Rule 10    func_signature -> FUNCTION func_type array func_signature_1
Rule 11    func_signature_1 -> ID LEFT_PAR param_declaration RIGHT_PAR block
Rule 12    param_declaration -> var_type array ID param_declaration_1
Rule 13    param_declaration -> empty
Rule 14    param_declaration_1 -> COMMA var_type array ID param_declaration_1
Rule 15    param_declaration_1 -> empty
Rule 16    var_type -> INT
Rule 17    var_type -> DOUBLE
Rule 18    var_type -> BOOL
Rule 19    var_type -> STRING
Rule 20    var_cte -> CTE_I
Rule 21    var_cte -> CTE_D
Rule 22    var_cte -> cte_b
Rule 23    var_cte -> CTE_S
Rule 24    var_cte -> ID array
Rule 25    var_cte -> function_call
Rule 26    cte_b -> TRUE
Rule 27    cte_b -> FALSE
Rule 28    func_type -> INT
Rule 29    func_type -> DOUBLE
Rule 30    func_type -> BOOL
Rule 31    func_type -> STRING
Rule 32    func_type -> VOID
Rule 33    block -> LEFT_BRACE block_1
Rule 34    block_1 -> statement block_1
Rule 35    block_1 -> block_2
Rule 36    block_2 -> RETURN expression SEMICOLON block_3
Rule 37    block_2 -> block_3
Rule 38    block_3 -> RIGHT_BRACE
Rule 39    statement -> var_declaration
Rule 40    statement -> assignment
Rule 41    statement -> condition
Rule 42    statement -> function_call SEMICOLON
Rule 43    statement -> while_cycle
Rule 44    statement -> read
Rule 45    statement -> write
Rule 46    assignment -> var_type ID ASSIGN expression SEMICOLON
Rule 47    expression -> exp expression_1
Rule 48    expression_1 -> IS_EQUAL_TO exp
Rule 49    expression_1 -> NOT_EQUAL_TO exp
Rule 50    expression_1 -> GREATER_THAN exp
Rule 51    expression_1 -> LESS_THAN exp
Rule 52    expression_1 -> GREATER_THAN_OR_EQUAL_TO exp
Rule 53    expression_1 -> LESS_THAN_OR_EQUAL_TO exp
Rule 54    expression_1 -> AND exp
Rule 55    expression_1 -> OR exp
Rule 56    expression_1 -> empty
Rule 57    exp -> term exp_1
Rule 58    exp_1 -> PLUS exp
Rule 59    exp_1 -> MINUS exp
Rule 60    exp_1 -> empty
Rule 61    term -> factor term_1
Rule 62    term_1 -> MULTIPLY term
Rule 63    term_1 -> DIVIDE term
Rule 64    term_1 -> empty
Rule 65    factor -> LEFT_PAR expression RIGHT_PAR
Rule 66    factor -> var_cte
Rule 67    factor -> factor_1 var_cte
Rule 68    factor_1 -> PLUS
Rule 69    factor_1 -> MINUS
Rule 70    factor_1 -> empty
Rule 71    condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1
Rule 72    condition_1 -> ELSE block
Rule 73    condition_1 -> empty
Rule 74    function_call -> ID LEFT_PAR param_call RIGHT_PAR
Rule 75    param_call -> expression param_call_1
Rule 76    param_call_1 -> COMMA param_call_1
Rule 77    param_call_1 -> empty
Rule 78    while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block
Rule 79    read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON
Rule 80    write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON
Rule 81    main -> MAIN block
Rule 82    empty -> <empty>

Terminals, with rules where they appear

AND                  : 54
ASSIGN               : 46
BOOL                 : 18 30
COMMA                : 14 76
CTE_D                : 21
CTE_I                : 20
CTE_S                : 23
DIVIDE               : 63
DOUBLE               : 17 29
ELSE                 : 72
FALSE                : 27
FUNCTION             : 10
GREATER_THAN         : 50
GREATER_THAN_OR_EQUAL_TO : 52
ID                   : 4 11 12 14 24 46 74
IF                   : 71
INT                  : 16 28
IS_EQUAL_TO          : 48
LEFT_BRACE           : 33
LEFT_BRACKET         : 6
LEFT_PAR             : 11 65 71 74 78 79 80
LESS_THAN            : 51
LESS_THAN_OR_EQUAL_TO : 53
MAIN                 : 81
MINUS                : 59 69
MULTIPLY             : 62
NOT_EQUAL_TO         : 49
OR                   : 55
PLUS                 : 58 68
READ                 : 79
RETURN               : 36
RIGHT_BRACE          : 38
RIGHT_BRACKET        : 6
RIGHT_PAR            : 11 65 71 74 78 79 80
SEMICOLON            : 4 36 42 46 79 80
STRING               : 19 31
TRUE                 : 26
VOID                 : 32
WHILE                : 78
WRITE                : 80
error                : 

Nonterminals, with rules where they appear

array                : 4 6 10 12 14 24
assignment           : 40
block                : 11 71 72 78 81
block_1              : 33 34
block_2              : 35
block_3              : 36 37
condition            : 41
condition_1          : 71
cte_b                : 22
empty                : 5 7 13 15 56 60 64 70 73 77
exp                  : 47 48 49 50 51 52 53 54 55 58 59 79 80
exp_1                : 57
expression           : 6 36 46 65 71 75 78
expression_1         : 47
factor               : 61
factor_1             : 67
func_declaration     : 3 8
func_signature       : 8
func_signature_1     : 10
func_type            : 10
function_call        : 25 42
global_declaration   : 1 2
main                 : 9
param_call           : 74
param_call_1         : 75 76
param_declaration    : 11
param_declaration_1  : 12 14
read                 : 44
start                : 0
statement            : 34
term                 : 57 62 63
term_1               : 61
var_cte              : 66 67
var_declaration      : 2 39
var_type             : 4 12 14 46
while_cycle          : 43
write                : 45

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . global_declaration
    (2) global_declaration -> . var_declaration global_declaration
    (3) global_declaration -> . func_declaration
    (4) var_declaration -> . var_type ID array SEMICOLON
    (5) var_declaration -> . empty
    (8) func_declaration -> . func_signature func_declaration
    (9) func_declaration -> . main
    (16) var_type -> . INT
    (17) var_type -> . DOUBLE
    (18) var_type -> . BOOL
    (19) var_type -> . STRING
    (82) empty -> .
    (10) func_signature -> . FUNCTION func_type array func_signature_1
    (81) main -> . MAIN block

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12
    FUNCTION        shift and go to state 13
    MAIN            shift and go to state 14

  ! INT             [ reduce using rule 82 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 82 (empty -> .) ]
  ! BOOL            [ reduce using rule 82 (empty -> .) ]
  ! STRING          [ reduce using rule 82 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 82 (empty -> .) ]
  ! MAIN            [ reduce using rule 82 (empty -> .) ]

    start                          shift and go to state 1
    global_declaration             shift and go to state 2
    var_declaration                shift and go to state 3
    func_declaration               shift and go to state 4
    var_type                       shift and go to state 5
    empty                          shift and go to state 6
    func_signature                 shift and go to state 7
    main                           shift and go to state 8

state 1

    (0) S' -> start .



state 2

    (1) start -> global_declaration .

    $end            reduce using rule 1 (start -> global_declaration .)


state 3

    (2) global_declaration -> var_declaration . global_declaration
    (2) global_declaration -> . var_declaration global_declaration
    (3) global_declaration -> . func_declaration
    (4) var_declaration -> . var_type ID array SEMICOLON
    (5) var_declaration -> . empty
    (8) func_declaration -> . func_signature func_declaration
    (9) func_declaration -> . main
    (16) var_type -> . INT
    (17) var_type -> . DOUBLE
    (18) var_type -> . BOOL
    (19) var_type -> . STRING
    (82) empty -> .
    (10) func_signature -> . FUNCTION func_type array func_signature_1
    (81) main -> . MAIN block

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12
    FUNCTION        shift and go to state 13
    MAIN            shift and go to state 14

  ! INT             [ reduce using rule 82 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 82 (empty -> .) ]
  ! BOOL            [ reduce using rule 82 (empty -> .) ]
  ! STRING          [ reduce using rule 82 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 82 (empty -> .) ]
  ! MAIN            [ reduce using rule 82 (empty -> .) ]

    var_declaration                shift and go to state 3
    global_declaration             shift and go to state 15
    func_declaration               shift and go to state 4
    var_type                       shift and go to state 5
    empty                          shift and go to state 6
    func_signature                 shift and go to state 7
    main                           shift and go to state 8

state 4

    (3) global_declaration -> func_declaration .

    $end            reduce using rule 3 (global_declaration -> func_declaration .)


state 5

    (4) var_declaration -> var_type . ID array SEMICOLON

    ID              shift and go to state 16


state 6

    (5) var_declaration -> empty .

    INT             reduce using rule 5 (var_declaration -> empty .)
    DOUBLE          reduce using rule 5 (var_declaration -> empty .)
    BOOL            reduce using rule 5 (var_declaration -> empty .)
    STRING          reduce using rule 5 (var_declaration -> empty .)
    FUNCTION        reduce using rule 5 (var_declaration -> empty .)
    MAIN            reduce using rule 5 (var_declaration -> empty .)
    RETURN          reduce using rule 5 (var_declaration -> empty .)
    IF              reduce using rule 5 (var_declaration -> empty .)
    ID              reduce using rule 5 (var_declaration -> empty .)
    WHILE           reduce using rule 5 (var_declaration -> empty .)
    READ            reduce using rule 5 (var_declaration -> empty .)
    WRITE           reduce using rule 5 (var_declaration -> empty .)
    RIGHT_BRACE     reduce using rule 5 (var_declaration -> empty .)


state 7

    (8) func_declaration -> func_signature . func_declaration
    (8) func_declaration -> . func_signature func_declaration
    (9) func_declaration -> . main
    (10) func_signature -> . FUNCTION func_type array func_signature_1
    (81) main -> . MAIN block

    FUNCTION        shift and go to state 13
    MAIN            shift and go to state 14

    func_signature                 shift and go to state 7
    func_declaration               shift and go to state 17
    main                           shift and go to state 8

state 8

    (9) func_declaration -> main .

    $end            reduce using rule 9 (func_declaration -> main .)


state 9

    (16) var_type -> INT .

    ID              reduce using rule 16 (var_type -> INT .)
    LEFT_BRACKET    reduce using rule 16 (var_type -> INT .)


state 10

    (17) var_type -> DOUBLE .

    ID              reduce using rule 17 (var_type -> DOUBLE .)
    LEFT_BRACKET    reduce using rule 17 (var_type -> DOUBLE .)


state 11

    (18) var_type -> BOOL .

    ID              reduce using rule 18 (var_type -> BOOL .)
    LEFT_BRACKET    reduce using rule 18 (var_type -> BOOL .)


state 12

    (19) var_type -> STRING .

    ID              reduce using rule 19 (var_type -> STRING .)
    LEFT_BRACKET    reduce using rule 19 (var_type -> STRING .)


state 13

    (10) func_signature -> FUNCTION . func_type array func_signature_1
    (28) func_type -> . INT
    (29) func_type -> . DOUBLE
    (30) func_type -> . BOOL
    (31) func_type -> . STRING
    (32) func_type -> . VOID

    INT             shift and go to state 19
    DOUBLE          shift and go to state 20
    BOOL            shift and go to state 21
    STRING          shift and go to state 22
    VOID            shift and go to state 23

    func_type                      shift and go to state 18

state 14

    (81) main -> MAIN . block
    (33) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 25

    block                          shift and go to state 24

state 15

    (2) global_declaration -> var_declaration global_declaration .

    $end            reduce using rule 2 (global_declaration -> var_declaration global_declaration .)


state 16

    (4) var_declaration -> var_type ID . array SEMICOLON
    (6) array -> . LEFT_BRACKET expression RIGHT_BRACKET array
    (7) array -> . empty
    (82) empty -> .

    LEFT_BRACKET    shift and go to state 27
    SEMICOLON       reduce using rule 82 (empty -> .)

    array                          shift and go to state 26
    empty                          shift and go to state 28

state 17

    (8) func_declaration -> func_signature func_declaration .

    $end            reduce using rule 8 (func_declaration -> func_signature func_declaration .)


state 18

    (10) func_signature -> FUNCTION func_type . array func_signature_1
    (6) array -> . LEFT_BRACKET expression RIGHT_BRACKET array
    (7) array -> . empty
    (82) empty -> .

    LEFT_BRACKET    shift and go to state 27
    ID              reduce using rule 82 (empty -> .)

    array                          shift and go to state 29
    empty                          shift and go to state 28

state 19

    (28) func_type -> INT .

    LEFT_BRACKET    reduce using rule 28 (func_type -> INT .)
    ID              reduce using rule 28 (func_type -> INT .)


state 20

    (29) func_type -> DOUBLE .

    LEFT_BRACKET    reduce using rule 29 (func_type -> DOUBLE .)
    ID              reduce using rule 29 (func_type -> DOUBLE .)


state 21

    (30) func_type -> BOOL .

    LEFT_BRACKET    reduce using rule 30 (func_type -> BOOL .)
    ID              reduce using rule 30 (func_type -> BOOL .)


state 22

    (31) func_type -> STRING .

    LEFT_BRACKET    reduce using rule 31 (func_type -> STRING .)
    ID              reduce using rule 31 (func_type -> STRING .)


state 23

    (32) func_type -> VOID .

    LEFT_BRACKET    reduce using rule 32 (func_type -> VOID .)
    ID              reduce using rule 32 (func_type -> VOID .)


state 24

    (81) main -> MAIN block .

    $end            reduce using rule 81 (main -> MAIN block .)


state 25

    (33) block -> LEFT_BRACE . block_1
    (34) block_1 -> . statement block_1
    (35) block_1 -> . block_2
    (39) statement -> . var_declaration
    (40) statement -> . assignment
    (41) statement -> . condition
    (42) statement -> . function_call SEMICOLON
    (43) statement -> . while_cycle
    (44) statement -> . read
    (45) statement -> . write
    (36) block_2 -> . RETURN expression SEMICOLON block_3
    (37) block_2 -> . block_3
    (4) var_declaration -> . var_type ID array SEMICOLON
    (5) var_declaration -> . empty
    (46) assignment -> . var_type ID ASSIGN expression SEMICOLON
    (71) condition -> . IF LEFT_PAR expression RIGHT_PAR block condition_1
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (78) while_cycle -> . WHILE LEFT_PAR expression RIGHT_PAR block
    (79) read -> . READ LEFT_PAR exp RIGHT_PAR SEMICOLON
    (80) write -> . WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON
    (38) block_3 -> . RIGHT_BRACE
    (16) var_type -> . INT
    (17) var_type -> . DOUBLE
    (18) var_type -> . BOOL
    (19) var_type -> . STRING
    (82) empty -> .

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RIGHT_BRACE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RETURN          shift and go to state 40
    IF              shift and go to state 44
    ID              shift and go to state 43
    WHILE           shift and go to state 45
    READ            shift and go to state 46
    WRITE           shift and go to state 47
    RIGHT_BRACE     shift and go to state 48
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

  ! RETURN          [ reduce using rule 82 (empty -> .) ]
  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! READ            [ reduce using rule 82 (empty -> .) ]
  ! WRITE           [ reduce using rule 82 (empty -> .) ]
  ! RIGHT_BRACE     [ reduce using rule 82 (empty -> .) ]
  ! INT             [ reduce using rule 82 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 82 (empty -> .) ]
  ! BOOL            [ reduce using rule 82 (empty -> .) ]
  ! STRING          [ reduce using rule 82 (empty -> .) ]

    block_1                        shift and go to state 30
    statement                      shift and go to state 31
    block_2                        shift and go to state 32
    var_declaration                shift and go to state 33
    assignment                     shift and go to state 34
    condition                      shift and go to state 35
    function_call                  shift and go to state 36
    while_cycle                    shift and go to state 37
    read                           shift and go to state 38
    write                          shift and go to state 39
    block_3                        shift and go to state 41
    var_type                       shift and go to state 42
    empty                          shift and go to state 6

state 26

    (4) var_declaration -> var_type ID array . SEMICOLON

    SEMICOLON       shift and go to state 49


state 27

    (6) array -> LEFT_BRACKET . expression RIGHT_BRACKET array
    (47) expression -> . exp expression_1
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 50
    exp                            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 28

    (7) array -> empty .

    SEMICOLON       reduce using rule 7 (array -> empty .)
    ID              reduce using rule 7 (array -> empty .)
    MULTIPLY        reduce using rule 7 (array -> empty .)
    DIVIDE          reduce using rule 7 (array -> empty .)
    PLUS            reduce using rule 7 (array -> empty .)
    MINUS           reduce using rule 7 (array -> empty .)
    IS_EQUAL_TO     reduce using rule 7 (array -> empty .)
    NOT_EQUAL_TO    reduce using rule 7 (array -> empty .)
    GREATER_THAN    reduce using rule 7 (array -> empty .)
    LESS_THAN       reduce using rule 7 (array -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 7 (array -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 7 (array -> empty .)
    AND             reduce using rule 7 (array -> empty .)
    OR              reduce using rule 7 (array -> empty .)
    RIGHT_BRACKET   reduce using rule 7 (array -> empty .)
    RIGHT_PAR       reduce using rule 7 (array -> empty .)
    COMMA           reduce using rule 7 (array -> empty .)


state 29

    (10) func_signature -> FUNCTION func_type array . func_signature_1
    (11) func_signature_1 -> . ID LEFT_PAR param_declaration RIGHT_PAR block

    ID              shift and go to state 69

    func_signature_1               shift and go to state 68

state 30

    (33) block -> LEFT_BRACE block_1 .

    $end            reduce using rule 33 (block -> LEFT_BRACE block_1 .)
    ELSE            reduce using rule 33 (block -> LEFT_BRACE block_1 .)
    RETURN          reduce using rule 33 (block -> LEFT_BRACE block_1 .)
    IF              reduce using rule 33 (block -> LEFT_BRACE block_1 .)
    ID              reduce using rule 33 (block -> LEFT_BRACE block_1 .)
    WHILE           reduce using rule 33 (block -> LEFT_BRACE block_1 .)
    READ            reduce using rule 33 (block -> LEFT_BRACE block_1 .)
    WRITE           reduce using rule 33 (block -> LEFT_BRACE block_1 .)
    RIGHT_BRACE     reduce using rule 33 (block -> LEFT_BRACE block_1 .)
    INT             reduce using rule 33 (block -> LEFT_BRACE block_1 .)
    DOUBLE          reduce using rule 33 (block -> LEFT_BRACE block_1 .)
    BOOL            reduce using rule 33 (block -> LEFT_BRACE block_1 .)
    STRING          reduce using rule 33 (block -> LEFT_BRACE block_1 .)
    FUNCTION        reduce using rule 33 (block -> LEFT_BRACE block_1 .)
    MAIN            reduce using rule 33 (block -> LEFT_BRACE block_1 .)


state 31

    (34) block_1 -> statement . block_1
    (34) block_1 -> . statement block_1
    (35) block_1 -> . block_2
    (39) statement -> . var_declaration
    (40) statement -> . assignment
    (41) statement -> . condition
    (42) statement -> . function_call SEMICOLON
    (43) statement -> . while_cycle
    (44) statement -> . read
    (45) statement -> . write
    (36) block_2 -> . RETURN expression SEMICOLON block_3
    (37) block_2 -> . block_3
    (4) var_declaration -> . var_type ID array SEMICOLON
    (5) var_declaration -> . empty
    (46) assignment -> . var_type ID ASSIGN expression SEMICOLON
    (71) condition -> . IF LEFT_PAR expression RIGHT_PAR block condition_1
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (78) while_cycle -> . WHILE LEFT_PAR expression RIGHT_PAR block
    (79) read -> . READ LEFT_PAR exp RIGHT_PAR SEMICOLON
    (80) write -> . WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON
    (38) block_3 -> . RIGHT_BRACE
    (16) var_type -> . INT
    (17) var_type -> . DOUBLE
    (18) var_type -> . BOOL
    (19) var_type -> . STRING
    (82) empty -> .

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RIGHT_BRACE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RETURN          shift and go to state 40
    IF              shift and go to state 44
    ID              shift and go to state 43
    WHILE           shift and go to state 45
    READ            shift and go to state 46
    WRITE           shift and go to state 47
    RIGHT_BRACE     shift and go to state 48
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

  ! RETURN          [ reduce using rule 82 (empty -> .) ]
  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! READ            [ reduce using rule 82 (empty -> .) ]
  ! WRITE           [ reduce using rule 82 (empty -> .) ]
  ! RIGHT_BRACE     [ reduce using rule 82 (empty -> .) ]
  ! INT             [ reduce using rule 82 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 82 (empty -> .) ]
  ! BOOL            [ reduce using rule 82 (empty -> .) ]
  ! STRING          [ reduce using rule 82 (empty -> .) ]

    statement                      shift and go to state 31
    block_1                        shift and go to state 70
    block_2                        shift and go to state 32
    var_declaration                shift and go to state 33
    assignment                     shift and go to state 34
    condition                      shift and go to state 35
    function_call                  shift and go to state 36
    while_cycle                    shift and go to state 37
    read                           shift and go to state 38
    write                          shift and go to state 39
    block_3                        shift and go to state 41
    var_type                       shift and go to state 42
    empty                          shift and go to state 6

state 32

    (35) block_1 -> block_2 .

    $end            reduce using rule 35 (block_1 -> block_2 .)
    ELSE            reduce using rule 35 (block_1 -> block_2 .)
    RETURN          reduce using rule 35 (block_1 -> block_2 .)
    IF              reduce using rule 35 (block_1 -> block_2 .)
    ID              reduce using rule 35 (block_1 -> block_2 .)
    WHILE           reduce using rule 35 (block_1 -> block_2 .)
    READ            reduce using rule 35 (block_1 -> block_2 .)
    WRITE           reduce using rule 35 (block_1 -> block_2 .)
    RIGHT_BRACE     reduce using rule 35 (block_1 -> block_2 .)
    INT             reduce using rule 35 (block_1 -> block_2 .)
    DOUBLE          reduce using rule 35 (block_1 -> block_2 .)
    BOOL            reduce using rule 35 (block_1 -> block_2 .)
    STRING          reduce using rule 35 (block_1 -> block_2 .)
    FUNCTION        reduce using rule 35 (block_1 -> block_2 .)
    MAIN            reduce using rule 35 (block_1 -> block_2 .)


state 33

    (39) statement -> var_declaration .

    RETURN          reduce using rule 39 (statement -> var_declaration .)
    IF              reduce using rule 39 (statement -> var_declaration .)
    ID              reduce using rule 39 (statement -> var_declaration .)
    WHILE           reduce using rule 39 (statement -> var_declaration .)
    READ            reduce using rule 39 (statement -> var_declaration .)
    WRITE           reduce using rule 39 (statement -> var_declaration .)
    RIGHT_BRACE     reduce using rule 39 (statement -> var_declaration .)
    INT             reduce using rule 39 (statement -> var_declaration .)
    DOUBLE          reduce using rule 39 (statement -> var_declaration .)
    BOOL            reduce using rule 39 (statement -> var_declaration .)
    STRING          reduce using rule 39 (statement -> var_declaration .)


state 34

    (40) statement -> assignment .

    RETURN          reduce using rule 40 (statement -> assignment .)
    IF              reduce using rule 40 (statement -> assignment .)
    ID              reduce using rule 40 (statement -> assignment .)
    WHILE           reduce using rule 40 (statement -> assignment .)
    READ            reduce using rule 40 (statement -> assignment .)
    WRITE           reduce using rule 40 (statement -> assignment .)
    RIGHT_BRACE     reduce using rule 40 (statement -> assignment .)
    INT             reduce using rule 40 (statement -> assignment .)
    DOUBLE          reduce using rule 40 (statement -> assignment .)
    BOOL            reduce using rule 40 (statement -> assignment .)
    STRING          reduce using rule 40 (statement -> assignment .)


state 35

    (41) statement -> condition .

    RETURN          reduce using rule 41 (statement -> condition .)
    IF              reduce using rule 41 (statement -> condition .)
    ID              reduce using rule 41 (statement -> condition .)
    WHILE           reduce using rule 41 (statement -> condition .)
    READ            reduce using rule 41 (statement -> condition .)
    WRITE           reduce using rule 41 (statement -> condition .)
    RIGHT_BRACE     reduce using rule 41 (statement -> condition .)
    INT             reduce using rule 41 (statement -> condition .)
    DOUBLE          reduce using rule 41 (statement -> condition .)
    BOOL            reduce using rule 41 (statement -> condition .)
    STRING          reduce using rule 41 (statement -> condition .)


state 36

    (42) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 71


state 37

    (43) statement -> while_cycle .

    RETURN          reduce using rule 43 (statement -> while_cycle .)
    IF              reduce using rule 43 (statement -> while_cycle .)
    ID              reduce using rule 43 (statement -> while_cycle .)
    WHILE           reduce using rule 43 (statement -> while_cycle .)
    READ            reduce using rule 43 (statement -> while_cycle .)
    WRITE           reduce using rule 43 (statement -> while_cycle .)
    RIGHT_BRACE     reduce using rule 43 (statement -> while_cycle .)
    INT             reduce using rule 43 (statement -> while_cycle .)
    DOUBLE          reduce using rule 43 (statement -> while_cycle .)
    BOOL            reduce using rule 43 (statement -> while_cycle .)
    STRING          reduce using rule 43 (statement -> while_cycle .)


state 38

    (44) statement -> read .

    RETURN          reduce using rule 44 (statement -> read .)
    IF              reduce using rule 44 (statement -> read .)
    ID              reduce using rule 44 (statement -> read .)
    WHILE           reduce using rule 44 (statement -> read .)
    READ            reduce using rule 44 (statement -> read .)
    WRITE           reduce using rule 44 (statement -> read .)
    RIGHT_BRACE     reduce using rule 44 (statement -> read .)
    INT             reduce using rule 44 (statement -> read .)
    DOUBLE          reduce using rule 44 (statement -> read .)
    BOOL            reduce using rule 44 (statement -> read .)
    STRING          reduce using rule 44 (statement -> read .)


state 39

    (45) statement -> write .

    RETURN          reduce using rule 45 (statement -> write .)
    IF              reduce using rule 45 (statement -> write .)
    ID              reduce using rule 45 (statement -> write .)
    WHILE           reduce using rule 45 (statement -> write .)
    READ            reduce using rule 45 (statement -> write .)
    WRITE           reduce using rule 45 (statement -> write .)
    RIGHT_BRACE     reduce using rule 45 (statement -> write .)
    INT             reduce using rule 45 (statement -> write .)
    DOUBLE          reduce using rule 45 (statement -> write .)
    BOOL            reduce using rule 45 (statement -> write .)
    STRING          reduce using rule 45 (statement -> write .)


state 40

    (36) block_2 -> RETURN . expression SEMICOLON block_3
    (47) expression -> . exp expression_1
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 72
    exp                            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 41

    (37) block_2 -> block_3 .

    $end            reduce using rule 37 (block_2 -> block_3 .)
    ELSE            reduce using rule 37 (block_2 -> block_3 .)
    RETURN          reduce using rule 37 (block_2 -> block_3 .)
    IF              reduce using rule 37 (block_2 -> block_3 .)
    ID              reduce using rule 37 (block_2 -> block_3 .)
    WHILE           reduce using rule 37 (block_2 -> block_3 .)
    READ            reduce using rule 37 (block_2 -> block_3 .)
    WRITE           reduce using rule 37 (block_2 -> block_3 .)
    RIGHT_BRACE     reduce using rule 37 (block_2 -> block_3 .)
    INT             reduce using rule 37 (block_2 -> block_3 .)
    DOUBLE          reduce using rule 37 (block_2 -> block_3 .)
    BOOL            reduce using rule 37 (block_2 -> block_3 .)
    STRING          reduce using rule 37 (block_2 -> block_3 .)
    FUNCTION        reduce using rule 37 (block_2 -> block_3 .)
    MAIN            reduce using rule 37 (block_2 -> block_3 .)


state 42

    (4) var_declaration -> var_type . ID array SEMICOLON
    (46) assignment -> var_type . ID ASSIGN expression SEMICOLON

    ID              shift and go to state 73


state 43

    (74) function_call -> ID . LEFT_PAR param_call RIGHT_PAR

    LEFT_PAR        shift and go to state 74


state 44

    (71) condition -> IF . LEFT_PAR expression RIGHT_PAR block condition_1

    LEFT_PAR        shift and go to state 75


state 45

    (78) while_cycle -> WHILE . LEFT_PAR expression RIGHT_PAR block

    LEFT_PAR        shift and go to state 76


state 46

    (79) read -> READ . LEFT_PAR exp RIGHT_PAR SEMICOLON

    LEFT_PAR        shift and go to state 77


state 47

    (80) write -> WRITE . LEFT_PAR exp RIGHT_PAR SEMICOLON

    LEFT_PAR        shift and go to state 78


state 48

    (38) block_3 -> RIGHT_BRACE .

    $end            reduce using rule 38 (block_3 -> RIGHT_BRACE .)
    ELSE            reduce using rule 38 (block_3 -> RIGHT_BRACE .)
    RETURN          reduce using rule 38 (block_3 -> RIGHT_BRACE .)
    IF              reduce using rule 38 (block_3 -> RIGHT_BRACE .)
    ID              reduce using rule 38 (block_3 -> RIGHT_BRACE .)
    WHILE           reduce using rule 38 (block_3 -> RIGHT_BRACE .)
    READ            reduce using rule 38 (block_3 -> RIGHT_BRACE .)
    WRITE           reduce using rule 38 (block_3 -> RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 38 (block_3 -> RIGHT_BRACE .)
    INT             reduce using rule 38 (block_3 -> RIGHT_BRACE .)
    DOUBLE          reduce using rule 38 (block_3 -> RIGHT_BRACE .)
    BOOL            reduce using rule 38 (block_3 -> RIGHT_BRACE .)
    STRING          reduce using rule 38 (block_3 -> RIGHT_BRACE .)
    FUNCTION        reduce using rule 38 (block_3 -> RIGHT_BRACE .)
    MAIN            reduce using rule 38 (block_3 -> RIGHT_BRACE .)


state 49

    (4) var_declaration -> var_type ID array SEMICOLON .

    INT             reduce using rule 4 (var_declaration -> var_type ID array SEMICOLON .)
    DOUBLE          reduce using rule 4 (var_declaration -> var_type ID array SEMICOLON .)
    BOOL            reduce using rule 4 (var_declaration -> var_type ID array SEMICOLON .)
    STRING          reduce using rule 4 (var_declaration -> var_type ID array SEMICOLON .)
    FUNCTION        reduce using rule 4 (var_declaration -> var_type ID array SEMICOLON .)
    MAIN            reduce using rule 4 (var_declaration -> var_type ID array SEMICOLON .)
    RETURN          reduce using rule 4 (var_declaration -> var_type ID array SEMICOLON .)
    IF              reduce using rule 4 (var_declaration -> var_type ID array SEMICOLON .)
    ID              reduce using rule 4 (var_declaration -> var_type ID array SEMICOLON .)
    WHILE           reduce using rule 4 (var_declaration -> var_type ID array SEMICOLON .)
    READ            reduce using rule 4 (var_declaration -> var_type ID array SEMICOLON .)
    WRITE           reduce using rule 4 (var_declaration -> var_type ID array SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (var_declaration -> var_type ID array SEMICOLON .)


state 50

    (6) array -> LEFT_BRACKET expression . RIGHT_BRACKET array

    RIGHT_BRACKET   shift and go to state 79


state 51

    (47) expression -> exp . expression_1
    (48) expression_1 -> . IS_EQUAL_TO exp
    (49) expression_1 -> . NOT_EQUAL_TO exp
    (50) expression_1 -> . GREATER_THAN exp
    (51) expression_1 -> . LESS_THAN exp
    (52) expression_1 -> . GREATER_THAN_OR_EQUAL_TO exp
    (53) expression_1 -> . LESS_THAN_OR_EQUAL_TO exp
    (54) expression_1 -> . AND exp
    (55) expression_1 -> . OR exp
    (56) expression_1 -> . empty
    (82) empty -> .

    IS_EQUAL_TO     shift and go to state 81
    NOT_EQUAL_TO    shift and go to state 82
    GREATER_THAN    shift and go to state 83
    LESS_THAN       shift and go to state 84
    GREATER_THAN_OR_EQUAL_TO shift and go to state 85
    LESS_THAN_OR_EQUAL_TO shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    RIGHT_BRACKET   reduce using rule 82 (empty -> .)
    SEMICOLON       reduce using rule 82 (empty -> .)
    RIGHT_PAR       reduce using rule 82 (empty -> .)
    COMMA           reduce using rule 82 (empty -> .)

    expression_1                   shift and go to state 80
    empty                          shift and go to state 89

state 52

    (57) exp -> term . exp_1
    (58) exp_1 -> . PLUS exp
    (59) exp_1 -> . MINUS exp
    (60) exp_1 -> . empty
    (82) empty -> .

    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    IS_EQUAL_TO     reduce using rule 82 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 82 (empty -> .)
    GREATER_THAN    reduce using rule 82 (empty -> .)
    LESS_THAN       reduce using rule 82 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 82 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 82 (empty -> .)
    AND             reduce using rule 82 (empty -> .)
    OR              reduce using rule 82 (empty -> .)
    RIGHT_BRACKET   reduce using rule 82 (empty -> .)
    SEMICOLON       reduce using rule 82 (empty -> .)
    RIGHT_PAR       reduce using rule 82 (empty -> .)
    COMMA           reduce using rule 82 (empty -> .)

    exp_1                          shift and go to state 90
    empty                          shift and go to state 93

state 53

    (61) term -> factor . term_1
    (62) term_1 -> . MULTIPLY term
    (63) term_1 -> . DIVIDE term
    (64) term_1 -> . empty
    (82) empty -> .

    MULTIPLY        shift and go to state 95
    DIVIDE          shift and go to state 96
    PLUS            reduce using rule 82 (empty -> .)
    MINUS           reduce using rule 82 (empty -> .)
    IS_EQUAL_TO     reduce using rule 82 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 82 (empty -> .)
    GREATER_THAN    reduce using rule 82 (empty -> .)
    LESS_THAN       reduce using rule 82 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 82 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 82 (empty -> .)
    AND             reduce using rule 82 (empty -> .)
    OR              reduce using rule 82 (empty -> .)
    RIGHT_BRACKET   reduce using rule 82 (empty -> .)
    SEMICOLON       reduce using rule 82 (empty -> .)
    RIGHT_PAR       reduce using rule 82 (empty -> .)
    COMMA           reduce using rule 82 (empty -> .)

    term_1                         shift and go to state 94
    empty                          shift and go to state 97

state 54

    (65) factor -> LEFT_PAR . expression RIGHT_PAR
    (47) expression -> . exp expression_1
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 98
    exp                            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 55

    (66) factor -> var_cte .

    MULTIPLY        reduce using rule 66 (factor -> var_cte .)
    DIVIDE          reduce using rule 66 (factor -> var_cte .)
    PLUS            reduce using rule 66 (factor -> var_cte .)
    MINUS           reduce using rule 66 (factor -> var_cte .)
    IS_EQUAL_TO     reduce using rule 66 (factor -> var_cte .)
    NOT_EQUAL_TO    reduce using rule 66 (factor -> var_cte .)
    GREATER_THAN    reduce using rule 66 (factor -> var_cte .)
    LESS_THAN       reduce using rule 66 (factor -> var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 66 (factor -> var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 66 (factor -> var_cte .)
    AND             reduce using rule 66 (factor -> var_cte .)
    OR              reduce using rule 66 (factor -> var_cte .)
    RIGHT_BRACKET   reduce using rule 66 (factor -> var_cte .)
    SEMICOLON       reduce using rule 66 (factor -> var_cte .)
    RIGHT_PAR       reduce using rule 66 (factor -> var_cte .)
    COMMA           reduce using rule 66 (factor -> var_cte .)


state 56

    (67) factor -> factor_1 . var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR

    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    var_cte                        shift and go to state 99
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62

state 57

    (20) var_cte -> CTE_I .

    MULTIPLY        reduce using rule 20 (var_cte -> CTE_I .)
    DIVIDE          reduce using rule 20 (var_cte -> CTE_I .)
    PLUS            reduce using rule 20 (var_cte -> CTE_I .)
    MINUS           reduce using rule 20 (var_cte -> CTE_I .)
    IS_EQUAL_TO     reduce using rule 20 (var_cte -> CTE_I .)
    NOT_EQUAL_TO    reduce using rule 20 (var_cte -> CTE_I .)
    GREATER_THAN    reduce using rule 20 (var_cte -> CTE_I .)
    LESS_THAN       reduce using rule 20 (var_cte -> CTE_I .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> CTE_I .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> CTE_I .)
    AND             reduce using rule 20 (var_cte -> CTE_I .)
    OR              reduce using rule 20 (var_cte -> CTE_I .)
    RIGHT_BRACKET   reduce using rule 20 (var_cte -> CTE_I .)
    SEMICOLON       reduce using rule 20 (var_cte -> CTE_I .)
    RIGHT_PAR       reduce using rule 20 (var_cte -> CTE_I .)
    COMMA           reduce using rule 20 (var_cte -> CTE_I .)


state 58

    (21) var_cte -> CTE_D .

    MULTIPLY        reduce using rule 21 (var_cte -> CTE_D .)
    DIVIDE          reduce using rule 21 (var_cte -> CTE_D .)
    PLUS            reduce using rule 21 (var_cte -> CTE_D .)
    MINUS           reduce using rule 21 (var_cte -> CTE_D .)
    IS_EQUAL_TO     reduce using rule 21 (var_cte -> CTE_D .)
    NOT_EQUAL_TO    reduce using rule 21 (var_cte -> CTE_D .)
    GREATER_THAN    reduce using rule 21 (var_cte -> CTE_D .)
    LESS_THAN       reduce using rule 21 (var_cte -> CTE_D .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> CTE_D .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> CTE_D .)
    AND             reduce using rule 21 (var_cte -> CTE_D .)
    OR              reduce using rule 21 (var_cte -> CTE_D .)
    RIGHT_BRACKET   reduce using rule 21 (var_cte -> CTE_D .)
    SEMICOLON       reduce using rule 21 (var_cte -> CTE_D .)
    RIGHT_PAR       reduce using rule 21 (var_cte -> CTE_D .)
    COMMA           reduce using rule 21 (var_cte -> CTE_D .)


state 59

    (22) var_cte -> cte_b .

    MULTIPLY        reduce using rule 22 (var_cte -> cte_b .)
    DIVIDE          reduce using rule 22 (var_cte -> cte_b .)
    PLUS            reduce using rule 22 (var_cte -> cte_b .)
    MINUS           reduce using rule 22 (var_cte -> cte_b .)
    IS_EQUAL_TO     reduce using rule 22 (var_cte -> cte_b .)
    NOT_EQUAL_TO    reduce using rule 22 (var_cte -> cte_b .)
    GREATER_THAN    reduce using rule 22 (var_cte -> cte_b .)
    LESS_THAN       reduce using rule 22 (var_cte -> cte_b .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> cte_b .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> cte_b .)
    AND             reduce using rule 22 (var_cte -> cte_b .)
    OR              reduce using rule 22 (var_cte -> cte_b .)
    RIGHT_BRACKET   reduce using rule 22 (var_cte -> cte_b .)
    SEMICOLON       reduce using rule 22 (var_cte -> cte_b .)
    RIGHT_PAR       reduce using rule 22 (var_cte -> cte_b .)
    COMMA           reduce using rule 22 (var_cte -> cte_b .)


state 60

    (23) var_cte -> CTE_S .

    MULTIPLY        reduce using rule 23 (var_cte -> CTE_S .)
    DIVIDE          reduce using rule 23 (var_cte -> CTE_S .)
    PLUS            reduce using rule 23 (var_cte -> CTE_S .)
    MINUS           reduce using rule 23 (var_cte -> CTE_S .)
    IS_EQUAL_TO     reduce using rule 23 (var_cte -> CTE_S .)
    NOT_EQUAL_TO    reduce using rule 23 (var_cte -> CTE_S .)
    GREATER_THAN    reduce using rule 23 (var_cte -> CTE_S .)
    LESS_THAN       reduce using rule 23 (var_cte -> CTE_S .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 23 (var_cte -> CTE_S .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 23 (var_cte -> CTE_S .)
    AND             reduce using rule 23 (var_cte -> CTE_S .)
    OR              reduce using rule 23 (var_cte -> CTE_S .)
    RIGHT_BRACKET   reduce using rule 23 (var_cte -> CTE_S .)
    SEMICOLON       reduce using rule 23 (var_cte -> CTE_S .)
    RIGHT_PAR       reduce using rule 23 (var_cte -> CTE_S .)
    COMMA           reduce using rule 23 (var_cte -> CTE_S .)


state 61

    (24) var_cte -> ID . array
    (74) function_call -> ID . LEFT_PAR param_call RIGHT_PAR
    (6) array -> . LEFT_BRACKET expression RIGHT_BRACKET array
    (7) array -> . empty
    (82) empty -> .

    LEFT_PAR        shift and go to state 74
    LEFT_BRACKET    shift and go to state 27
    MULTIPLY        reduce using rule 82 (empty -> .)
    DIVIDE          reduce using rule 82 (empty -> .)
    PLUS            reduce using rule 82 (empty -> .)
    MINUS           reduce using rule 82 (empty -> .)
    IS_EQUAL_TO     reduce using rule 82 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 82 (empty -> .)
    GREATER_THAN    reduce using rule 82 (empty -> .)
    LESS_THAN       reduce using rule 82 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 82 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 82 (empty -> .)
    AND             reduce using rule 82 (empty -> .)
    OR              reduce using rule 82 (empty -> .)
    RIGHT_BRACKET   reduce using rule 82 (empty -> .)
    SEMICOLON       reduce using rule 82 (empty -> .)
    RIGHT_PAR       reduce using rule 82 (empty -> .)
    COMMA           reduce using rule 82 (empty -> .)

    array                          shift and go to state 100
    empty                          shift and go to state 28

state 62

    (25) var_cte -> function_call .

    MULTIPLY        reduce using rule 25 (var_cte -> function_call .)
    DIVIDE          reduce using rule 25 (var_cte -> function_call .)
    PLUS            reduce using rule 25 (var_cte -> function_call .)
    MINUS           reduce using rule 25 (var_cte -> function_call .)
    IS_EQUAL_TO     reduce using rule 25 (var_cte -> function_call .)
    NOT_EQUAL_TO    reduce using rule 25 (var_cte -> function_call .)
    GREATER_THAN    reduce using rule 25 (var_cte -> function_call .)
    LESS_THAN       reduce using rule 25 (var_cte -> function_call .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 25 (var_cte -> function_call .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 25 (var_cte -> function_call .)
    AND             reduce using rule 25 (var_cte -> function_call .)
    OR              reduce using rule 25 (var_cte -> function_call .)
    RIGHT_BRACKET   reduce using rule 25 (var_cte -> function_call .)
    SEMICOLON       reduce using rule 25 (var_cte -> function_call .)
    RIGHT_PAR       reduce using rule 25 (var_cte -> function_call .)
    COMMA           reduce using rule 25 (var_cte -> function_call .)


state 63

    (68) factor_1 -> PLUS .

    CTE_I           reduce using rule 68 (factor_1 -> PLUS .)
    CTE_D           reduce using rule 68 (factor_1 -> PLUS .)
    CTE_S           reduce using rule 68 (factor_1 -> PLUS .)
    ID              reduce using rule 68 (factor_1 -> PLUS .)
    TRUE            reduce using rule 68 (factor_1 -> PLUS .)
    FALSE           reduce using rule 68 (factor_1 -> PLUS .)


state 64

    (69) factor_1 -> MINUS .

    CTE_I           reduce using rule 69 (factor_1 -> MINUS .)
    CTE_D           reduce using rule 69 (factor_1 -> MINUS .)
    CTE_S           reduce using rule 69 (factor_1 -> MINUS .)
    ID              reduce using rule 69 (factor_1 -> MINUS .)
    TRUE            reduce using rule 69 (factor_1 -> MINUS .)
    FALSE           reduce using rule 69 (factor_1 -> MINUS .)


state 65

    (70) factor_1 -> empty .

    CTE_I           reduce using rule 70 (factor_1 -> empty .)
    CTE_D           reduce using rule 70 (factor_1 -> empty .)
    CTE_S           reduce using rule 70 (factor_1 -> empty .)
    ID              reduce using rule 70 (factor_1 -> empty .)
    TRUE            reduce using rule 70 (factor_1 -> empty .)
    FALSE           reduce using rule 70 (factor_1 -> empty .)


state 66

    (26) cte_b -> TRUE .

    MULTIPLY        reduce using rule 26 (cte_b -> TRUE .)
    DIVIDE          reduce using rule 26 (cte_b -> TRUE .)
    PLUS            reduce using rule 26 (cte_b -> TRUE .)
    MINUS           reduce using rule 26 (cte_b -> TRUE .)
    IS_EQUAL_TO     reduce using rule 26 (cte_b -> TRUE .)
    NOT_EQUAL_TO    reduce using rule 26 (cte_b -> TRUE .)
    GREATER_THAN    reduce using rule 26 (cte_b -> TRUE .)
    LESS_THAN       reduce using rule 26 (cte_b -> TRUE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 26 (cte_b -> TRUE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 26 (cte_b -> TRUE .)
    AND             reduce using rule 26 (cte_b -> TRUE .)
    OR              reduce using rule 26 (cte_b -> TRUE .)
    RIGHT_BRACKET   reduce using rule 26 (cte_b -> TRUE .)
    SEMICOLON       reduce using rule 26 (cte_b -> TRUE .)
    RIGHT_PAR       reduce using rule 26 (cte_b -> TRUE .)
    COMMA           reduce using rule 26 (cte_b -> TRUE .)


state 67

    (27) cte_b -> FALSE .

    MULTIPLY        reduce using rule 27 (cte_b -> FALSE .)
    DIVIDE          reduce using rule 27 (cte_b -> FALSE .)
    PLUS            reduce using rule 27 (cte_b -> FALSE .)
    MINUS           reduce using rule 27 (cte_b -> FALSE .)
    IS_EQUAL_TO     reduce using rule 27 (cte_b -> FALSE .)
    NOT_EQUAL_TO    reduce using rule 27 (cte_b -> FALSE .)
    GREATER_THAN    reduce using rule 27 (cte_b -> FALSE .)
    LESS_THAN       reduce using rule 27 (cte_b -> FALSE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 27 (cte_b -> FALSE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 27 (cte_b -> FALSE .)
    AND             reduce using rule 27 (cte_b -> FALSE .)
    OR              reduce using rule 27 (cte_b -> FALSE .)
    RIGHT_BRACKET   reduce using rule 27 (cte_b -> FALSE .)
    SEMICOLON       reduce using rule 27 (cte_b -> FALSE .)
    RIGHT_PAR       reduce using rule 27 (cte_b -> FALSE .)
    COMMA           reduce using rule 27 (cte_b -> FALSE .)


state 68

    (10) func_signature -> FUNCTION func_type array func_signature_1 .

    FUNCTION        reduce using rule 10 (func_signature -> FUNCTION func_type array func_signature_1 .)
    MAIN            reduce using rule 10 (func_signature -> FUNCTION func_type array func_signature_1 .)


state 69

    (11) func_signature_1 -> ID . LEFT_PAR param_declaration RIGHT_PAR block

    LEFT_PAR        shift and go to state 101


state 70

    (34) block_1 -> statement block_1 .

    $end            reduce using rule 34 (block_1 -> statement block_1 .)
    ELSE            reduce using rule 34 (block_1 -> statement block_1 .)
    RETURN          reduce using rule 34 (block_1 -> statement block_1 .)
    IF              reduce using rule 34 (block_1 -> statement block_1 .)
    ID              reduce using rule 34 (block_1 -> statement block_1 .)
    WHILE           reduce using rule 34 (block_1 -> statement block_1 .)
    READ            reduce using rule 34 (block_1 -> statement block_1 .)
    WRITE           reduce using rule 34 (block_1 -> statement block_1 .)
    RIGHT_BRACE     reduce using rule 34 (block_1 -> statement block_1 .)
    INT             reduce using rule 34 (block_1 -> statement block_1 .)
    DOUBLE          reduce using rule 34 (block_1 -> statement block_1 .)
    BOOL            reduce using rule 34 (block_1 -> statement block_1 .)
    STRING          reduce using rule 34 (block_1 -> statement block_1 .)
    FUNCTION        reduce using rule 34 (block_1 -> statement block_1 .)
    MAIN            reduce using rule 34 (block_1 -> statement block_1 .)


state 71

    (42) statement -> function_call SEMICOLON .

    RETURN          reduce using rule 42 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 42 (statement -> function_call SEMICOLON .)
    ID              reduce using rule 42 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 42 (statement -> function_call SEMICOLON .)
    READ            reduce using rule 42 (statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 42 (statement -> function_call SEMICOLON .)
    RIGHT_BRACE     reduce using rule 42 (statement -> function_call SEMICOLON .)
    INT             reduce using rule 42 (statement -> function_call SEMICOLON .)
    DOUBLE          reduce using rule 42 (statement -> function_call SEMICOLON .)
    BOOL            reduce using rule 42 (statement -> function_call SEMICOLON .)
    STRING          reduce using rule 42 (statement -> function_call SEMICOLON .)


state 72

    (36) block_2 -> RETURN expression . SEMICOLON block_3

    SEMICOLON       shift and go to state 102


state 73

    (4) var_declaration -> var_type ID . array SEMICOLON
    (46) assignment -> var_type ID . ASSIGN expression SEMICOLON
    (6) array -> . LEFT_BRACKET expression RIGHT_BRACKET array
    (7) array -> . empty
    (82) empty -> .

    ASSIGN          shift and go to state 103
    LEFT_BRACKET    shift and go to state 27
    SEMICOLON       reduce using rule 82 (empty -> .)

    array                          shift and go to state 26
    empty                          shift and go to state 28

state 74

    (74) function_call -> ID LEFT_PAR . param_call RIGHT_PAR
    (75) param_call -> . expression param_call_1
    (47) expression -> . exp expression_1
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    param_call                     shift and go to state 104
    expression                     shift and go to state 105
    exp                            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 75

    (71) condition -> IF LEFT_PAR . expression RIGHT_PAR block condition_1
    (47) expression -> . exp expression_1
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 106
    exp                            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 76

    (78) while_cycle -> WHILE LEFT_PAR . expression RIGHT_PAR block
    (47) expression -> . exp expression_1
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 107
    exp                            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 77

    (79) read -> READ LEFT_PAR . exp RIGHT_PAR SEMICOLON
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    exp                            shift and go to state 108
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 78

    (80) write -> WRITE LEFT_PAR . exp RIGHT_PAR SEMICOLON
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    exp                            shift and go to state 109
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 79

    (6) array -> LEFT_BRACKET expression RIGHT_BRACKET . array
    (6) array -> . LEFT_BRACKET expression RIGHT_BRACKET array
    (7) array -> . empty
    (82) empty -> .

    LEFT_BRACKET    shift and go to state 27
    SEMICOLON       reduce using rule 82 (empty -> .)
    ID              reduce using rule 82 (empty -> .)
    MULTIPLY        reduce using rule 82 (empty -> .)
    DIVIDE          reduce using rule 82 (empty -> .)
    PLUS            reduce using rule 82 (empty -> .)
    MINUS           reduce using rule 82 (empty -> .)
    IS_EQUAL_TO     reduce using rule 82 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 82 (empty -> .)
    GREATER_THAN    reduce using rule 82 (empty -> .)
    LESS_THAN       reduce using rule 82 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 82 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 82 (empty -> .)
    AND             reduce using rule 82 (empty -> .)
    OR              reduce using rule 82 (empty -> .)
    RIGHT_BRACKET   reduce using rule 82 (empty -> .)
    RIGHT_PAR       reduce using rule 82 (empty -> .)
    COMMA           reduce using rule 82 (empty -> .)

    array                          shift and go to state 110
    empty                          shift and go to state 28

state 80

    (47) expression -> exp expression_1 .

    RIGHT_BRACKET   reduce using rule 47 (expression -> exp expression_1 .)
    SEMICOLON       reduce using rule 47 (expression -> exp expression_1 .)
    RIGHT_PAR       reduce using rule 47 (expression -> exp expression_1 .)
    COMMA           reduce using rule 47 (expression -> exp expression_1 .)


state 81

    (48) expression_1 -> IS_EQUAL_TO . exp
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    exp                            shift and go to state 111
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 82

    (49) expression_1 -> NOT_EQUAL_TO . exp
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    exp                            shift and go to state 112
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 83

    (50) expression_1 -> GREATER_THAN . exp
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    exp                            shift and go to state 113
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 84

    (51) expression_1 -> LESS_THAN . exp
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    exp                            shift and go to state 114
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 85

    (52) expression_1 -> GREATER_THAN_OR_EQUAL_TO . exp
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    exp                            shift and go to state 115
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 86

    (53) expression_1 -> LESS_THAN_OR_EQUAL_TO . exp
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    exp                            shift and go to state 116
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 87

    (54) expression_1 -> AND . exp
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    exp                            shift and go to state 117
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 88

    (55) expression_1 -> OR . exp
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    exp                            shift and go to state 118
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 89

    (56) expression_1 -> empty .

    RIGHT_BRACKET   reduce using rule 56 (expression_1 -> empty .)
    SEMICOLON       reduce using rule 56 (expression_1 -> empty .)
    RIGHT_PAR       reduce using rule 56 (expression_1 -> empty .)
    COMMA           reduce using rule 56 (expression_1 -> empty .)


state 90

    (57) exp -> term exp_1 .

    IS_EQUAL_TO     reduce using rule 57 (exp -> term exp_1 .)
    NOT_EQUAL_TO    reduce using rule 57 (exp -> term exp_1 .)
    GREATER_THAN    reduce using rule 57 (exp -> term exp_1 .)
    LESS_THAN       reduce using rule 57 (exp -> term exp_1 .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 57 (exp -> term exp_1 .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 57 (exp -> term exp_1 .)
    AND             reduce using rule 57 (exp -> term exp_1 .)
    OR              reduce using rule 57 (exp -> term exp_1 .)
    RIGHT_BRACKET   reduce using rule 57 (exp -> term exp_1 .)
    SEMICOLON       reduce using rule 57 (exp -> term exp_1 .)
    RIGHT_PAR       reduce using rule 57 (exp -> term exp_1 .)
    COMMA           reduce using rule 57 (exp -> term exp_1 .)


state 91

    (58) exp_1 -> PLUS . exp
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    exp                            shift and go to state 119
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 92

    (59) exp_1 -> MINUS . exp
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    exp                            shift and go to state 120
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 93

    (60) exp_1 -> empty .

    IS_EQUAL_TO     reduce using rule 60 (exp_1 -> empty .)
    NOT_EQUAL_TO    reduce using rule 60 (exp_1 -> empty .)
    GREATER_THAN    reduce using rule 60 (exp_1 -> empty .)
    LESS_THAN       reduce using rule 60 (exp_1 -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 60 (exp_1 -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 60 (exp_1 -> empty .)
    AND             reduce using rule 60 (exp_1 -> empty .)
    OR              reduce using rule 60 (exp_1 -> empty .)
    RIGHT_BRACKET   reduce using rule 60 (exp_1 -> empty .)
    SEMICOLON       reduce using rule 60 (exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 60 (exp_1 -> empty .)
    COMMA           reduce using rule 60 (exp_1 -> empty .)


state 94

    (61) term -> factor term_1 .

    PLUS            reduce using rule 61 (term -> factor term_1 .)
    MINUS           reduce using rule 61 (term -> factor term_1 .)
    IS_EQUAL_TO     reduce using rule 61 (term -> factor term_1 .)
    NOT_EQUAL_TO    reduce using rule 61 (term -> factor term_1 .)
    GREATER_THAN    reduce using rule 61 (term -> factor term_1 .)
    LESS_THAN       reduce using rule 61 (term -> factor term_1 .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 61 (term -> factor term_1 .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 61 (term -> factor term_1 .)
    AND             reduce using rule 61 (term -> factor term_1 .)
    OR              reduce using rule 61 (term -> factor term_1 .)
    RIGHT_BRACKET   reduce using rule 61 (term -> factor term_1 .)
    SEMICOLON       reduce using rule 61 (term -> factor term_1 .)
    RIGHT_PAR       reduce using rule 61 (term -> factor term_1 .)
    COMMA           reduce using rule 61 (term -> factor term_1 .)


state 95

    (62) term_1 -> MULTIPLY . term
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    term                           shift and go to state 121
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 96

    (63) term_1 -> DIVIDE . term
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    term                           shift and go to state 122
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 97

    (64) term_1 -> empty .

    PLUS            reduce using rule 64 (term_1 -> empty .)
    MINUS           reduce using rule 64 (term_1 -> empty .)
    IS_EQUAL_TO     reduce using rule 64 (term_1 -> empty .)
    NOT_EQUAL_TO    reduce using rule 64 (term_1 -> empty .)
    GREATER_THAN    reduce using rule 64 (term_1 -> empty .)
    LESS_THAN       reduce using rule 64 (term_1 -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 64 (term_1 -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 64 (term_1 -> empty .)
    AND             reduce using rule 64 (term_1 -> empty .)
    OR              reduce using rule 64 (term_1 -> empty .)
    RIGHT_BRACKET   reduce using rule 64 (term_1 -> empty .)
    SEMICOLON       reduce using rule 64 (term_1 -> empty .)
    RIGHT_PAR       reduce using rule 64 (term_1 -> empty .)
    COMMA           reduce using rule 64 (term_1 -> empty .)


state 98

    (65) factor -> LEFT_PAR expression . RIGHT_PAR

    RIGHT_PAR       shift and go to state 123


state 99

    (67) factor -> factor_1 var_cte .

    MULTIPLY        reduce using rule 67 (factor -> factor_1 var_cte .)
    DIVIDE          reduce using rule 67 (factor -> factor_1 var_cte .)
    PLUS            reduce using rule 67 (factor -> factor_1 var_cte .)
    MINUS           reduce using rule 67 (factor -> factor_1 var_cte .)
    IS_EQUAL_TO     reduce using rule 67 (factor -> factor_1 var_cte .)
    NOT_EQUAL_TO    reduce using rule 67 (factor -> factor_1 var_cte .)
    GREATER_THAN    reduce using rule 67 (factor -> factor_1 var_cte .)
    LESS_THAN       reduce using rule 67 (factor -> factor_1 var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 67 (factor -> factor_1 var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 67 (factor -> factor_1 var_cte .)
    AND             reduce using rule 67 (factor -> factor_1 var_cte .)
    OR              reduce using rule 67 (factor -> factor_1 var_cte .)
    RIGHT_BRACKET   reduce using rule 67 (factor -> factor_1 var_cte .)
    SEMICOLON       reduce using rule 67 (factor -> factor_1 var_cte .)
    RIGHT_PAR       reduce using rule 67 (factor -> factor_1 var_cte .)
    COMMA           reduce using rule 67 (factor -> factor_1 var_cte .)


state 100

    (24) var_cte -> ID array .

    MULTIPLY        reduce using rule 24 (var_cte -> ID array .)
    DIVIDE          reduce using rule 24 (var_cte -> ID array .)
    PLUS            reduce using rule 24 (var_cte -> ID array .)
    MINUS           reduce using rule 24 (var_cte -> ID array .)
    IS_EQUAL_TO     reduce using rule 24 (var_cte -> ID array .)
    NOT_EQUAL_TO    reduce using rule 24 (var_cte -> ID array .)
    GREATER_THAN    reduce using rule 24 (var_cte -> ID array .)
    LESS_THAN       reduce using rule 24 (var_cte -> ID array .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 24 (var_cte -> ID array .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 24 (var_cte -> ID array .)
    AND             reduce using rule 24 (var_cte -> ID array .)
    OR              reduce using rule 24 (var_cte -> ID array .)
    RIGHT_BRACKET   reduce using rule 24 (var_cte -> ID array .)
    SEMICOLON       reduce using rule 24 (var_cte -> ID array .)
    RIGHT_PAR       reduce using rule 24 (var_cte -> ID array .)
    COMMA           reduce using rule 24 (var_cte -> ID array .)


state 101

    (11) func_signature_1 -> ID LEFT_PAR . param_declaration RIGHT_PAR block
    (12) param_declaration -> . var_type array ID param_declaration_1
    (13) param_declaration -> . empty
    (16) var_type -> . INT
    (17) var_type -> . DOUBLE
    (18) var_type -> . BOOL
    (19) var_type -> . STRING
    (82) empty -> .

    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12
    RIGHT_PAR       reduce using rule 82 (empty -> .)

    param_declaration              shift and go to state 124
    var_type                       shift and go to state 125
    empty                          shift and go to state 126

state 102

    (36) block_2 -> RETURN expression SEMICOLON . block_3
    (38) block_3 -> . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 48

    block_3                        shift and go to state 127

state 103

    (46) assignment -> var_type ID ASSIGN . expression SEMICOLON
    (47) expression -> . exp expression_1
    (57) exp -> . term exp_1
    (61) term -> . factor term_1
    (65) factor -> . LEFT_PAR expression RIGHT_PAR
    (66) factor -> . var_cte
    (67) factor -> . factor_1 var_cte
    (20) var_cte -> . CTE_I
    (21) var_cte -> . CTE_D
    (22) var_cte -> . cte_b
    (23) var_cte -> . CTE_S
    (24) var_cte -> . ID array
    (25) var_cte -> . function_call
    (68) factor_1 -> . PLUS
    (69) factor_1 -> . MINUS
    (70) factor_1 -> . empty
    (26) cte_b -> . TRUE
    (27) cte_b -> . FALSE
    (74) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (82) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for CTE_S resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 54
    CTE_I           shift and go to state 57
    CTE_D           shift and go to state 58
    CTE_S           shift and go to state 60
    ID              shift and go to state 61
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

  ! CTE_I           [ reduce using rule 82 (empty -> .) ]
  ! CTE_D           [ reduce using rule 82 (empty -> .) ]
  ! CTE_S           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! TRUE            [ reduce using rule 82 (empty -> .) ]
  ! FALSE           [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 128
    exp                            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    var_cte                        shift and go to state 55
    factor_1                       shift and go to state 56
    cte_b                          shift and go to state 59
    function_call                  shift and go to state 62
    empty                          shift and go to state 65

state 104

    (74) function_call -> ID LEFT_PAR param_call . RIGHT_PAR

    RIGHT_PAR       shift and go to state 129


state 105

    (75) param_call -> expression . param_call_1
    (76) param_call_1 -> . COMMA param_call_1
    (77) param_call_1 -> . empty
    (82) empty -> .

    COMMA           shift and go to state 131
    RIGHT_PAR       reduce using rule 82 (empty -> .)

    param_call_1                   shift and go to state 130
    empty                          shift and go to state 132

state 106

    (71) condition -> IF LEFT_PAR expression . RIGHT_PAR block condition_1

    RIGHT_PAR       shift and go to state 133


state 107

    (78) while_cycle -> WHILE LEFT_PAR expression . RIGHT_PAR block

    RIGHT_PAR       shift and go to state 134


state 108

    (79) read -> READ LEFT_PAR exp . RIGHT_PAR SEMICOLON

    RIGHT_PAR       shift and go to state 135


state 109

    (80) write -> WRITE LEFT_PAR exp . RIGHT_PAR SEMICOLON

    RIGHT_PAR       shift and go to state 136


state 110

    (6) array -> LEFT_BRACKET expression RIGHT_BRACKET array .

    SEMICOLON       reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    ID              reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    MULTIPLY        reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    DIVIDE          reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    PLUS            reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    MINUS           reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    IS_EQUAL_TO     reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    NOT_EQUAL_TO    reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    GREATER_THAN    reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    LESS_THAN       reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    AND             reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    OR              reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    RIGHT_BRACKET   reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    RIGHT_PAR       reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    COMMA           reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)


state 111

    (48) expression_1 -> IS_EQUAL_TO exp .

    RIGHT_BRACKET   reduce using rule 48 (expression_1 -> IS_EQUAL_TO exp .)
    SEMICOLON       reduce using rule 48 (expression_1 -> IS_EQUAL_TO exp .)
    RIGHT_PAR       reduce using rule 48 (expression_1 -> IS_EQUAL_TO exp .)
    COMMA           reduce using rule 48 (expression_1 -> IS_EQUAL_TO exp .)


state 112

    (49) expression_1 -> NOT_EQUAL_TO exp .

    RIGHT_BRACKET   reduce using rule 49 (expression_1 -> NOT_EQUAL_TO exp .)
    SEMICOLON       reduce using rule 49 (expression_1 -> NOT_EQUAL_TO exp .)
    RIGHT_PAR       reduce using rule 49 (expression_1 -> NOT_EQUAL_TO exp .)
    COMMA           reduce using rule 49 (expression_1 -> NOT_EQUAL_TO exp .)


state 113

    (50) expression_1 -> GREATER_THAN exp .

    RIGHT_BRACKET   reduce using rule 50 (expression_1 -> GREATER_THAN exp .)
    SEMICOLON       reduce using rule 50 (expression_1 -> GREATER_THAN exp .)
    RIGHT_PAR       reduce using rule 50 (expression_1 -> GREATER_THAN exp .)
    COMMA           reduce using rule 50 (expression_1 -> GREATER_THAN exp .)


state 114

    (51) expression_1 -> LESS_THAN exp .

    RIGHT_BRACKET   reduce using rule 51 (expression_1 -> LESS_THAN exp .)
    SEMICOLON       reduce using rule 51 (expression_1 -> LESS_THAN exp .)
    RIGHT_PAR       reduce using rule 51 (expression_1 -> LESS_THAN exp .)
    COMMA           reduce using rule 51 (expression_1 -> LESS_THAN exp .)


state 115

    (52) expression_1 -> GREATER_THAN_OR_EQUAL_TO exp .

    RIGHT_BRACKET   reduce using rule 52 (expression_1 -> GREATER_THAN_OR_EQUAL_TO exp .)
    SEMICOLON       reduce using rule 52 (expression_1 -> GREATER_THAN_OR_EQUAL_TO exp .)
    RIGHT_PAR       reduce using rule 52 (expression_1 -> GREATER_THAN_OR_EQUAL_TO exp .)
    COMMA           reduce using rule 52 (expression_1 -> GREATER_THAN_OR_EQUAL_TO exp .)


state 116

    (53) expression_1 -> LESS_THAN_OR_EQUAL_TO exp .

    RIGHT_BRACKET   reduce using rule 53 (expression_1 -> LESS_THAN_OR_EQUAL_TO exp .)
    SEMICOLON       reduce using rule 53 (expression_1 -> LESS_THAN_OR_EQUAL_TO exp .)
    RIGHT_PAR       reduce using rule 53 (expression_1 -> LESS_THAN_OR_EQUAL_TO exp .)
    COMMA           reduce using rule 53 (expression_1 -> LESS_THAN_OR_EQUAL_TO exp .)


state 117

    (54) expression_1 -> AND exp .

    RIGHT_BRACKET   reduce using rule 54 (expression_1 -> AND exp .)
    SEMICOLON       reduce using rule 54 (expression_1 -> AND exp .)
    RIGHT_PAR       reduce using rule 54 (expression_1 -> AND exp .)
    COMMA           reduce using rule 54 (expression_1 -> AND exp .)


state 118

    (55) expression_1 -> OR exp .

    RIGHT_BRACKET   reduce using rule 55 (expression_1 -> OR exp .)
    SEMICOLON       reduce using rule 55 (expression_1 -> OR exp .)
    RIGHT_PAR       reduce using rule 55 (expression_1 -> OR exp .)
    COMMA           reduce using rule 55 (expression_1 -> OR exp .)


state 119

    (58) exp_1 -> PLUS exp .

    IS_EQUAL_TO     reduce using rule 58 (exp_1 -> PLUS exp .)
    NOT_EQUAL_TO    reduce using rule 58 (exp_1 -> PLUS exp .)
    GREATER_THAN    reduce using rule 58 (exp_1 -> PLUS exp .)
    LESS_THAN       reduce using rule 58 (exp_1 -> PLUS exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 58 (exp_1 -> PLUS exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 58 (exp_1 -> PLUS exp .)
    AND             reduce using rule 58 (exp_1 -> PLUS exp .)
    OR              reduce using rule 58 (exp_1 -> PLUS exp .)
    RIGHT_BRACKET   reduce using rule 58 (exp_1 -> PLUS exp .)
    SEMICOLON       reduce using rule 58 (exp_1 -> PLUS exp .)
    RIGHT_PAR       reduce using rule 58 (exp_1 -> PLUS exp .)
    COMMA           reduce using rule 58 (exp_1 -> PLUS exp .)


state 120

    (59) exp_1 -> MINUS exp .

    IS_EQUAL_TO     reduce using rule 59 (exp_1 -> MINUS exp .)
    NOT_EQUAL_TO    reduce using rule 59 (exp_1 -> MINUS exp .)
    GREATER_THAN    reduce using rule 59 (exp_1 -> MINUS exp .)
    LESS_THAN       reduce using rule 59 (exp_1 -> MINUS exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 59 (exp_1 -> MINUS exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 59 (exp_1 -> MINUS exp .)
    AND             reduce using rule 59 (exp_1 -> MINUS exp .)
    OR              reduce using rule 59 (exp_1 -> MINUS exp .)
    RIGHT_BRACKET   reduce using rule 59 (exp_1 -> MINUS exp .)
    SEMICOLON       reduce using rule 59 (exp_1 -> MINUS exp .)
    RIGHT_PAR       reduce using rule 59 (exp_1 -> MINUS exp .)
    COMMA           reduce using rule 59 (exp_1 -> MINUS exp .)


state 121

    (62) term_1 -> MULTIPLY term .

    PLUS            reduce using rule 62 (term_1 -> MULTIPLY term .)
    MINUS           reduce using rule 62 (term_1 -> MULTIPLY term .)
    IS_EQUAL_TO     reduce using rule 62 (term_1 -> MULTIPLY term .)
    NOT_EQUAL_TO    reduce using rule 62 (term_1 -> MULTIPLY term .)
    GREATER_THAN    reduce using rule 62 (term_1 -> MULTIPLY term .)
    LESS_THAN       reduce using rule 62 (term_1 -> MULTIPLY term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 62 (term_1 -> MULTIPLY term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 62 (term_1 -> MULTIPLY term .)
    AND             reduce using rule 62 (term_1 -> MULTIPLY term .)
    OR              reduce using rule 62 (term_1 -> MULTIPLY term .)
    RIGHT_BRACKET   reduce using rule 62 (term_1 -> MULTIPLY term .)
    SEMICOLON       reduce using rule 62 (term_1 -> MULTIPLY term .)
    RIGHT_PAR       reduce using rule 62 (term_1 -> MULTIPLY term .)
    COMMA           reduce using rule 62 (term_1 -> MULTIPLY term .)


state 122

    (63) term_1 -> DIVIDE term .

    PLUS            reduce using rule 63 (term_1 -> DIVIDE term .)
    MINUS           reduce using rule 63 (term_1 -> DIVIDE term .)
    IS_EQUAL_TO     reduce using rule 63 (term_1 -> DIVIDE term .)
    NOT_EQUAL_TO    reduce using rule 63 (term_1 -> DIVIDE term .)
    GREATER_THAN    reduce using rule 63 (term_1 -> DIVIDE term .)
    LESS_THAN       reduce using rule 63 (term_1 -> DIVIDE term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 63 (term_1 -> DIVIDE term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 63 (term_1 -> DIVIDE term .)
    AND             reduce using rule 63 (term_1 -> DIVIDE term .)
    OR              reduce using rule 63 (term_1 -> DIVIDE term .)
    RIGHT_BRACKET   reduce using rule 63 (term_1 -> DIVIDE term .)
    SEMICOLON       reduce using rule 63 (term_1 -> DIVIDE term .)
    RIGHT_PAR       reduce using rule 63 (term_1 -> DIVIDE term .)
    COMMA           reduce using rule 63 (term_1 -> DIVIDE term .)


state 123

    (65) factor -> LEFT_PAR expression RIGHT_PAR .

    MULTIPLY        reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    DIVIDE          reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    PLUS            reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    MINUS           reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    IS_EQUAL_TO     reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    NOT_EQUAL_TO    reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    GREATER_THAN    reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    LESS_THAN       reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    AND             reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    OR              reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    RIGHT_BRACKET   reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    SEMICOLON       reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    RIGHT_PAR       reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)
    COMMA           reduce using rule 65 (factor -> LEFT_PAR expression RIGHT_PAR .)


state 124

    (11) func_signature_1 -> ID LEFT_PAR param_declaration . RIGHT_PAR block

    RIGHT_PAR       shift and go to state 137


state 125

    (12) param_declaration -> var_type . array ID param_declaration_1
    (6) array -> . LEFT_BRACKET expression RIGHT_BRACKET array
    (7) array -> . empty
    (82) empty -> .

    LEFT_BRACKET    shift and go to state 27
    ID              reduce using rule 82 (empty -> .)

    array                          shift and go to state 138
    empty                          shift and go to state 28

state 126

    (13) param_declaration -> empty .

    RIGHT_PAR       reduce using rule 13 (param_declaration -> empty .)


state 127

    (36) block_2 -> RETURN expression SEMICOLON block_3 .

    $end            reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)
    ELSE            reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)
    RETURN          reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)
    IF              reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)
    ID              reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)
    WHILE           reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)
    READ            reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)
    WRITE           reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)
    RIGHT_BRACE     reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)
    INT             reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)
    DOUBLE          reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)
    BOOL            reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)
    STRING          reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)
    FUNCTION        reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)
    MAIN            reduce using rule 36 (block_2 -> RETURN expression SEMICOLON block_3 .)


state 128

    (46) assignment -> var_type ID ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 139


state 129

    (74) function_call -> ID LEFT_PAR param_call RIGHT_PAR .

    SEMICOLON       reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    MULTIPLY        reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    DIVIDE          reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    PLUS            reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    MINUS           reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    IS_EQUAL_TO     reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    NOT_EQUAL_TO    reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    GREATER_THAN    reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    LESS_THAN       reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    AND             reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    OR              reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    RIGHT_BRACKET   reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    RIGHT_PAR       reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    COMMA           reduce using rule 74 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)


state 130

    (75) param_call -> expression param_call_1 .

    RIGHT_PAR       reduce using rule 75 (param_call -> expression param_call_1 .)


state 131

    (76) param_call_1 -> COMMA . param_call_1
    (76) param_call_1 -> . COMMA param_call_1
    (77) param_call_1 -> . empty
    (82) empty -> .

    COMMA           shift and go to state 131
    RIGHT_PAR       reduce using rule 82 (empty -> .)

    param_call_1                   shift and go to state 140
    empty                          shift and go to state 132

state 132

    (77) param_call_1 -> empty .

    RIGHT_PAR       reduce using rule 77 (param_call_1 -> empty .)


state 133

    (71) condition -> IF LEFT_PAR expression RIGHT_PAR . block condition_1
    (33) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 25

    block                          shift and go to state 141

state 134

    (78) while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR . block
    (33) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 25

    block                          shift and go to state 142

state 135

    (79) read -> READ LEFT_PAR exp RIGHT_PAR . SEMICOLON

    SEMICOLON       shift and go to state 143


state 136

    (80) write -> WRITE LEFT_PAR exp RIGHT_PAR . SEMICOLON

    SEMICOLON       shift and go to state 144


state 137

    (11) func_signature_1 -> ID LEFT_PAR param_declaration RIGHT_PAR . block
    (33) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 25

    block                          shift and go to state 145

state 138

    (12) param_declaration -> var_type array . ID param_declaration_1

    ID              shift and go to state 146


state 139

    (46) assignment -> var_type ID ASSIGN expression SEMICOLON .

    RETURN          reduce using rule 46 (assignment -> var_type ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 46 (assignment -> var_type ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 46 (assignment -> var_type ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 46 (assignment -> var_type ID ASSIGN expression SEMICOLON .)
    READ            reduce using rule 46 (assignment -> var_type ID ASSIGN expression SEMICOLON .)
    WRITE           reduce using rule 46 (assignment -> var_type ID ASSIGN expression SEMICOLON .)
    RIGHT_BRACE     reduce using rule 46 (assignment -> var_type ID ASSIGN expression SEMICOLON .)
    INT             reduce using rule 46 (assignment -> var_type ID ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 46 (assignment -> var_type ID ASSIGN expression SEMICOLON .)
    BOOL            reduce using rule 46 (assignment -> var_type ID ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 46 (assignment -> var_type ID ASSIGN expression SEMICOLON .)


state 140

    (76) param_call_1 -> COMMA param_call_1 .

    RIGHT_PAR       reduce using rule 76 (param_call_1 -> COMMA param_call_1 .)


state 141

    (71) condition -> IF LEFT_PAR expression RIGHT_PAR block . condition_1
    (72) condition_1 -> . ELSE block
    (73) condition_1 -> . empty
    (82) empty -> .

    ELSE            shift and go to state 148
    RETURN          reduce using rule 82 (empty -> .)
    IF              reduce using rule 82 (empty -> .)
    ID              reduce using rule 82 (empty -> .)
    WHILE           reduce using rule 82 (empty -> .)
    READ            reduce using rule 82 (empty -> .)
    WRITE           reduce using rule 82 (empty -> .)
    RIGHT_BRACE     reduce using rule 82 (empty -> .)
    INT             reduce using rule 82 (empty -> .)
    DOUBLE          reduce using rule 82 (empty -> .)
    BOOL            reduce using rule 82 (empty -> .)
    STRING          reduce using rule 82 (empty -> .)

    condition_1                    shift and go to state 147
    empty                          shift and go to state 149

state 142

    (78) while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .

    RETURN          reduce using rule 78 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    IF              reduce using rule 78 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    ID              reduce using rule 78 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    WHILE           reduce using rule 78 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    READ            reduce using rule 78 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    WRITE           reduce using rule 78 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    RIGHT_BRACE     reduce using rule 78 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    INT             reduce using rule 78 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    DOUBLE          reduce using rule 78 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    BOOL            reduce using rule 78 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    STRING          reduce using rule 78 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)


state 143

    (79) read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .

    RETURN          reduce using rule 79 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    IF              reduce using rule 79 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    ID              reduce using rule 79 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    WHILE           reduce using rule 79 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    READ            reduce using rule 79 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    WRITE           reduce using rule 79 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    RIGHT_BRACE     reduce using rule 79 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    INT             reduce using rule 79 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    DOUBLE          reduce using rule 79 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    BOOL            reduce using rule 79 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    STRING          reduce using rule 79 (read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON .)


state 144

    (80) write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .

    RETURN          reduce using rule 80 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    IF              reduce using rule 80 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    ID              reduce using rule 80 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    WHILE           reduce using rule 80 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    READ            reduce using rule 80 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    WRITE           reduce using rule 80 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    RIGHT_BRACE     reduce using rule 80 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    INT             reduce using rule 80 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    DOUBLE          reduce using rule 80 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    BOOL            reduce using rule 80 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)
    STRING          reduce using rule 80 (write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON .)


state 145

    (11) func_signature_1 -> ID LEFT_PAR param_declaration RIGHT_PAR block .

    FUNCTION        reduce using rule 11 (func_signature_1 -> ID LEFT_PAR param_declaration RIGHT_PAR block .)
    MAIN            reduce using rule 11 (func_signature_1 -> ID LEFT_PAR param_declaration RIGHT_PAR block .)


state 146

    (12) param_declaration -> var_type array ID . param_declaration_1
    (14) param_declaration_1 -> . COMMA var_type array ID param_declaration_1
    (15) param_declaration_1 -> . empty
    (82) empty -> .

    COMMA           shift and go to state 151
    RIGHT_PAR       reduce using rule 82 (empty -> .)

    param_declaration_1            shift and go to state 150
    empty                          shift and go to state 152

state 147

    (71) condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .

    RETURN          reduce using rule 71 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    IF              reduce using rule 71 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    ID              reduce using rule 71 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    WHILE           reduce using rule 71 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    READ            reduce using rule 71 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    WRITE           reduce using rule 71 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    RIGHT_BRACE     reduce using rule 71 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    INT             reduce using rule 71 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    DOUBLE          reduce using rule 71 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    BOOL            reduce using rule 71 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    STRING          reduce using rule 71 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)


state 148

    (72) condition_1 -> ELSE . block
    (33) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 25

    block                          shift and go to state 153

state 149

    (73) condition_1 -> empty .

    RETURN          reduce using rule 73 (condition_1 -> empty .)
    IF              reduce using rule 73 (condition_1 -> empty .)
    ID              reduce using rule 73 (condition_1 -> empty .)
    WHILE           reduce using rule 73 (condition_1 -> empty .)
    READ            reduce using rule 73 (condition_1 -> empty .)
    WRITE           reduce using rule 73 (condition_1 -> empty .)
    RIGHT_BRACE     reduce using rule 73 (condition_1 -> empty .)
    INT             reduce using rule 73 (condition_1 -> empty .)
    DOUBLE          reduce using rule 73 (condition_1 -> empty .)
    BOOL            reduce using rule 73 (condition_1 -> empty .)
    STRING          reduce using rule 73 (condition_1 -> empty .)


state 150

    (12) param_declaration -> var_type array ID param_declaration_1 .

    RIGHT_PAR       reduce using rule 12 (param_declaration -> var_type array ID param_declaration_1 .)


state 151

    (14) param_declaration_1 -> COMMA . var_type array ID param_declaration_1
    (16) var_type -> . INT
    (17) var_type -> . DOUBLE
    (18) var_type -> . BOOL
    (19) var_type -> . STRING

    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    var_type                       shift and go to state 154

state 152

    (15) param_declaration_1 -> empty .

    RIGHT_PAR       reduce using rule 15 (param_declaration_1 -> empty .)


state 153

    (72) condition_1 -> ELSE block .

    RETURN          reduce using rule 72 (condition_1 -> ELSE block .)
    IF              reduce using rule 72 (condition_1 -> ELSE block .)
    ID              reduce using rule 72 (condition_1 -> ELSE block .)
    WHILE           reduce using rule 72 (condition_1 -> ELSE block .)
    READ            reduce using rule 72 (condition_1 -> ELSE block .)
    WRITE           reduce using rule 72 (condition_1 -> ELSE block .)
    RIGHT_BRACE     reduce using rule 72 (condition_1 -> ELSE block .)
    INT             reduce using rule 72 (condition_1 -> ELSE block .)
    DOUBLE          reduce using rule 72 (condition_1 -> ELSE block .)
    BOOL            reduce using rule 72 (condition_1 -> ELSE block .)
    STRING          reduce using rule 72 (condition_1 -> ELSE block .)


state 154

    (14) param_declaration_1 -> COMMA var_type . array ID param_declaration_1
    (6) array -> . LEFT_BRACKET expression RIGHT_BRACKET array
    (7) array -> . empty
    (82) empty -> .

    LEFT_BRACKET    shift and go to state 27
    ID              reduce using rule 82 (empty -> .)

    array                          shift and go to state 155
    empty                          shift and go to state 28

state 155

    (14) param_declaration_1 -> COMMA var_type array . ID param_declaration_1

    ID              shift and go to state 156


state 156

    (14) param_declaration_1 -> COMMA var_type array ID . param_declaration_1
    (14) param_declaration_1 -> . COMMA var_type array ID param_declaration_1
    (15) param_declaration_1 -> . empty
    (82) empty -> .

    COMMA           shift and go to state 151
    RIGHT_PAR       reduce using rule 82 (empty -> .)

    param_declaration_1            shift and go to state 157
    empty                          shift and go to state 152

state 157

    (14) param_declaration_1 -> COMMA var_type array ID param_declaration_1 .

    RIGHT_PAR       reduce using rule 14 (param_declaration_1 -> COMMA var_type array ID param_declaration_1 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 3 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 3 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 25 resolved as shift
WARNING: shift/reduce conflict for IF in state 25 resolved as shift
WARNING: shift/reduce conflict for ID in state 25 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 25 resolved as shift
WARNING: shift/reduce conflict for READ in state 25 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 25 resolved as shift
WARNING: shift/reduce conflict for RIGHT_BRACE in state 25 resolved as shift
WARNING: shift/reduce conflict for INT in state 25 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 25 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 25 resolved as shift
WARNING: shift/reduce conflict for STRING in state 25 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 27 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 27 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 27 resolved as shift
WARNING: shift/reduce conflict for ID in state 27 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 27 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 27 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 31 resolved as shift
WARNING: shift/reduce conflict for IF in state 31 resolved as shift
WARNING: shift/reduce conflict for ID in state 31 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 31 resolved as shift
WARNING: shift/reduce conflict for READ in state 31 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 31 resolved as shift
WARNING: shift/reduce conflict for RIGHT_BRACE in state 31 resolved as shift
WARNING: shift/reduce conflict for INT in state 31 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 31 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 31 resolved as shift
WARNING: shift/reduce conflict for STRING in state 31 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 40 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 40 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 40 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 40 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 54 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 54 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 54 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 54 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 74 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 74 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 74 resolved as shift
WARNING: shift/reduce conflict for ID in state 74 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 74 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 74 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 75 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 75 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 75 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 75 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 75 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 76 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 76 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 76 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 76 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 76 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 77 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 77 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 77 resolved as shift
WARNING: shift/reduce conflict for ID in state 77 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 77 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 77 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 78 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 78 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 78 resolved as shift
WARNING: shift/reduce conflict for ID in state 78 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 78 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 78 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 81 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 81 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 81 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 81 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 82 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 82 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 82 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 82 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 83 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 83 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 83 resolved as shift
WARNING: shift/reduce conflict for ID in state 83 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 83 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 83 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 84 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 84 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 84 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 84 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 85 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 85 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 85 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 85 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 86 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 86 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 86 resolved as shift
WARNING: shift/reduce conflict for ID in state 86 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 86 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 86 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 87 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 87 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 87 resolved as shift
WARNING: shift/reduce conflict for ID in state 87 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 87 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 87 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 88 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 88 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 88 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 88 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 91 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 91 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 91 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 91 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 91 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 92 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 92 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 92 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 92 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 92 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 95 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 95 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 95 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 95 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 96 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 96 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 96 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 96 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 103 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 103 resolved as shift
WARNING: shift/reduce conflict for CTE_S in state 103 resolved as shift
WARNING: shift/reduce conflict for ID in state 103 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 103 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 103 resolved as shift

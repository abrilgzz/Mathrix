Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> sem_start_program declaration func_declaration
Rule 2     declaration -> var_declaration declaration
Rule 3     declaration -> matrix_declaration declaration
Rule 4     declaration -> empty
Rule 5     var_declaration -> var_type ID sem_add_var SEMICOLON
Rule 6     matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
Rule 7     matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
Rule 8     matrix -> empty
Rule 9     func_declaration -> func_signature func_declaration
Rule 10    func_declaration -> main
Rule 11    func_signature -> FUNCTION func_type func_signature_1 sem_end_func
Rule 12    func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block
Rule 13    param_declaration -> var_type ID sem_add_param
Rule 14    param_declaration -> var_type ID sem_add_param COMMA param_declaration
Rule 15    param_declaration -> empty
Rule 16    var_type -> INT sem_get_type
Rule 17    var_type -> DOUBLE sem_get_type
Rule 18    var_type -> BOOL sem_get_type
Rule 19    var_cte -> CTE_I sem_push_constant_int
Rule 20    var_cte -> CTE_D sem_push_constant_double
Rule 21    var_cte -> cte_b sem_push_constant_bool
Rule 22    var_cte -> ID sem_push_operand matrix
Rule 23    var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
Rule 24    cte_b -> TRUE
Rule 25    cte_b -> FALSE
Rule 26    func_type -> INT sem_get_type
Rule 27    func_type -> DOUBLE sem_get_type
Rule 28    func_type -> BOOL sem_get_type
Rule 29    func_type -> VOID sem_get_type
Rule 30    block -> LEFT_BRACE declaration statements RIGHT_BRACE
Rule 31    statements -> statement statements
Rule 32    statements -> empty
Rule 33    statement -> var_assignment
Rule 34    statement -> matrix_assignment
Rule 35    statement -> condition
Rule 36    statement -> return
Rule 37    statement -> function_call
Rule 38    statement -> while_cycle
Rule 39    statement -> read
Rule 40    statement -> write
Rule 41    statement -> swap
Rule 42    statement -> multiply_matrix
Rule 43    statement -> add_to_matrix
Rule 44    statement -> subtract_from_matrix
Rule 45    statement -> p_matrix
Rule 46    var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
Rule 47    matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON
Rule 48    matrix_construct -> LEFT_BRACE rows RIGHT_BRACE
Rule 49    rows -> row
Rule 50    rows -> row COMMA rows
Rule 51    row -> LEFT_BRACKET col RIGHT_BRACKET sem_push_row sem_clear_row
Rule 52    col -> CTE_I sem_push_col col
Rule 53    col -> CTE_B sem_push_col col
Rule 54    col -> COMMA col
Rule 55    col -> empty
Rule 56    return -> RETURN mega_exp sem_return_function SEMICOLON
Rule 57    mega_exp -> hyper_exp mega_exp_1
Rule 58    mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical
Rule 59    mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical
Rule 60    mega_exp_1 -> empty
Rule 61    hyper_exp -> exp hyper_exp_1
Rule 62    hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 63    hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 64    hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational
Rule 65    hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational
Rule 66    hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 67    hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
Rule 68    hyper_exp_1 -> empty
Rule 69    exp -> term sem_top_term
Rule 70    exp -> term sem_top_term PLUS sem_push_operator exp
Rule 71    exp -> term sem_top_term MINUS sem_push_operator exp
Rule 72    term -> factor sem_top_factor
Rule 73    term -> factor sem_top_factor MULTIPLY sem_push_operator term
Rule 74    term -> factor sem_top_factor DIVIDE sem_push_operator term
Rule 75    factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
Rule 76    factor -> var_cte
Rule 77    factor -> PLUS sem_push_operator var_cte
Rule 78    factor -> MINUS sem_push_operator var_cte
Rule 79    condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
Rule 80    condition_1 -> ELSE sem_else_condition block
Rule 81    condition_1 -> empty
Rule 82    function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
Rule 83    param_call -> mega_exp sem_check_param
Rule 84    param_call -> mega_exp sem_check_param COMMA param_call
Rule 85    param_call -> empty
Rule 86    while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
Rule 87    read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
Rule 88    write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
Rule 89    p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix
Rule 90    multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix
Rule 91    add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix
Rule 92    subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix
Rule 93    swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap
Rule 94    main -> MAIN sem_fill_goto_main block sem_fill_eras sem_end_main
Rule 95    empty -> <empty>
Rule 96    sem_get_type -> empty
Rule 97    sem_add_func -> empty
Rule 98    sem_end_func -> empty
Rule 99    sem_add_var -> empty
Rule 100   sem_push_operator -> empty
Rule 101   sem_push_operand -> empty
Rule 102   sem_push_constant_int -> empty
Rule 103   sem_push_constant_double -> empty
Rule 104   sem_push_constant_bool -> empty
Rule 105   sem_top_factor -> empty
Rule 106   sem_top_term -> empty
Rule 107   sem_false_bottom_begin -> empty
Rule 108   sem_false_bottom_end -> empty
Rule 109   sem_assign_value -> empty
Rule 110   sem_read_write -> empty
Rule 111   sem_return_function -> empty
Rule 112   sem_top_logical -> <empty>
Rule 113   sem_top_relational -> <empty>
Rule 114   sem_end_condition -> empty
Rule 115   sem_fill_gotof -> empty
Rule 116   sem_else_condition -> empty
Rule 117   sem_start_while -> empty
Rule 118   sem_end_while -> empty
Rule 119   sem_add_param -> empty
Rule 120   sem_check_function -> empty
Rule 121   sem_create_era -> empty
Rule 122   sem_check_param -> empty
Rule 123   sem_count_params -> empty
Rule 124   sem_gosub -> empty
Rule 125   sem_start_program -> empty
Rule 126   sem_fill_goto_main -> empty
Rule 127   sem_end_main -> empty
Rule 128   sem_fill_eras -> empty
Rule 129   sem_get_matrix_id -> empty
Rule 130   sem_get_dim1 -> empty
Rule 131   sem_get_dim2 -> empty
Rule 132   sem_add_matrix -> empty
Rule 133   sem_check_dim1 -> empty
Rule 134   sem_ver_dim1 -> empty
Rule 135   sem_check_dim2 -> empty
Rule 136   sem_ver_dim2 -> empty
Rule 137   sem_assign_matrix -> empty
Rule 138   sem_clear_row -> empty
Rule 139   sem_push_row -> empty
Rule 140   sem_push_col -> empty
Rule 141   sem_multiply_matrix -> empty
Rule 142   sem_print_matrix -> empty
Rule 143   sem_add_to_matrix -> empty
Rule 144   sem_subtract_from_matrix -> empty
Rule 145   sem_swap -> empty

Terminals, with rules where they appear

ADD_TO_MATRIX        : 91
AND                  : 58
ASSIGN               : 46 47
BOOL                 : 18 28
COMMA                : 14 50 54 84 90 91 92 93
CTE_B                : 53
CTE_D                : 20
CTE_I                : 6 6 19 52 90 91 92
DIVIDE               : 74
DOUBLE               : 17 27
ELSE                 : 80
FALSE                : 25
FUNCTION             : 11
GREATER_THAN         : 64
GREATER_THAN_OR_EQUAL_TO : 66
ID                   : 5 6 12 13 14 22 23 46 47 82 89 90 91 92
IF                   : 79
INT                  : 16 26
IS_EQUAL_TO          : 62
LEFT_BRACE           : 30 48
LEFT_BRACKET         : 6 6 7 7 51
LEFT_PAR             : 12 23 75 79 82 86 87 88 89 90 91 92 93
LESS_THAN            : 65
LESS_THAN_OR_EQUAL_TO : 67
MAIN                 : 94
MATRIX               : 6 47
MINUS                : 71 78
MULTIPLY             : 73
MULTIPLY_MATRIX      : 90
NOT_EQUAL_TO         : 63
OR                   : 59
PLUS                 : 70 77
P_MATRIX             : 89
READ                 : 87
RETURN               : 56
RIGHT_BRACE          : 30 48
RIGHT_BRACKET        : 6 6 7 7 51
RIGHT_PAR            : 12 23 75 79 82 86 87 88 89 90 91 92 93
SEMICOLON            : 5 6 46 47 56 82 87 88 89 90 91 92 93
SUBTRACT_FROM_MATRIX : 92
SWAP                 : 93
TRUE                 : 24
VOID                 : 29
WHILE                : 86
WRITE                : 88
error                : 

Nonterminals, with rules where they appear

add_to_matrix        : 43
block                : 12 79 80 86 94
col                  : 51 52 53 54
condition            : 35
condition_1          : 79
cte_b                : 21
declaration          : 1 2 3 30
empty                : 4 8 15 32 55 60 68 81 85 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145
exp                  : 7 7 61 62 63 64 65 66 67 70 71
factor               : 72 73 74
func_declaration     : 1 9
func_signature       : 9
func_signature_1     : 11
func_type            : 11
function_call        : 37
hyper_exp            : 57
hyper_exp_1          : 61
main                 : 10
matrix               : 22 46
matrix_assignment    : 34
matrix_construct     : 47
matrix_declaration   : 3
mega_exp             : 46 56 58 59 75 79 83 84 86 87 88 93 93
mega_exp_1           : 57
multiply_matrix      : 42
p_matrix             : 45
param_call           : 23 82 84
param_declaration    : 12 14
read                 : 39
return               : 36
row                  : 49 50
rows                 : 48 50
sem_add_func         : 12
sem_add_matrix       : 6
sem_add_param        : 13 14
sem_add_to_matrix    : 91
sem_add_var          : 5
sem_assign_matrix    : 47
sem_assign_value     : 46
sem_check_dim1       : 7
sem_check_dim2       : 7
sem_check_function   : 23 82
sem_check_param      : 83 84
sem_clear_row        : 51
sem_count_params     : 23 82
sem_create_era       : 23 82
sem_else_condition   : 80
sem_end_condition    : 79 86
sem_end_func         : 11
sem_end_main         : 94
sem_end_while        : 86
sem_false_bottom_begin : 23 75
sem_false_bottom_end : 23 75
sem_fill_eras        : 94
sem_fill_goto_main   : 94
sem_fill_gotof       : 79
sem_get_dim1         : 6
sem_get_dim2         : 6
sem_get_matrix_id    : 6
sem_get_type         : 16 17 18 26 27 28 29
sem_gosub            : 23 82
sem_multiply_matrix  : 90
sem_print_matrix     : 89
sem_push_col         : 52 53
sem_push_constant_bool : 21
sem_push_constant_double : 20
sem_push_constant_int : 19 90 91 92
sem_push_operand     : 22 46 47 89 90 91 92
sem_push_operator    : 46 47 58 59 62 63 64 65 66 67 70 71 73 74 77 78 87 88
sem_push_row         : 51
sem_read_write       : 87 88
sem_return_function  : 56
sem_start_program    : 1
sem_start_while      : 86
sem_subtract_from_matrix : 92
sem_swap             : 93
sem_top_factor       : 72 73 74
sem_top_logical      : 58 59
sem_top_relational   : 62 63 64 65 66 67
sem_top_term         : 69 70 71
sem_ver_dim1         : 7
sem_ver_dim2         : 7
start                : 0
statement            : 31
statements           : 30 31
subtract_from_matrix : 44
swap                 : 41
term                 : 69 70 71 73 74
var_assignment       : 33
var_cte              : 76 77 78
var_declaration      : 2
var_type             : 5 6 13 14
while_cycle          : 38
write                : 40

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . sem_start_program declaration func_declaration
    (125) sem_start_program -> . empty
    (95) empty -> .

    MATRIX          reduce using rule 95 (empty -> .)
    INT             reduce using rule 95 (empty -> .)
    DOUBLE          reduce using rule 95 (empty -> .)
    BOOL            reduce using rule 95 (empty -> .)
    FUNCTION        reduce using rule 95 (empty -> .)
    MAIN            reduce using rule 95 (empty -> .)

    start                          shift and go to state 1
    sem_start_program              shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> sem_start_program . declaration func_declaration
    (2) declaration -> . var_declaration declaration
    (3) declaration -> . matrix_declaration declaration
    (4) declaration -> . empty
    (5) var_declaration -> . var_type ID sem_add_var SEMICOLON
    (6) matrix_declaration -> . MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (95) empty -> .
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type

    MATRIX          shift and go to state 9
    FUNCTION        reduce using rule 95 (empty -> .)
    MAIN            reduce using rule 95 (empty -> .)
    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    BOOL            shift and go to state 12

    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    matrix_declaration             shift and go to state 6
    empty                          shift and go to state 7
    var_type                       shift and go to state 8

state 3

    (125) sem_start_program -> empty .

    MATRIX          reduce using rule 125 (sem_start_program -> empty .)
    INT             reduce using rule 125 (sem_start_program -> empty .)
    DOUBLE          reduce using rule 125 (sem_start_program -> empty .)
    BOOL            reduce using rule 125 (sem_start_program -> empty .)
    FUNCTION        reduce using rule 125 (sem_start_program -> empty .)
    MAIN            reduce using rule 125 (sem_start_program -> empty .)


state 4

    (1) start -> sem_start_program declaration . func_declaration
    (9) func_declaration -> . func_signature func_declaration
    (10) func_declaration -> . main
    (11) func_signature -> . FUNCTION func_type func_signature_1 sem_end_func
    (94) main -> . MAIN sem_fill_goto_main block sem_fill_eras sem_end_main

    FUNCTION        shift and go to state 16
    MAIN            shift and go to state 17

    func_declaration               shift and go to state 13
    func_signature                 shift and go to state 14
    main                           shift and go to state 15

state 5

    (2) declaration -> var_declaration . declaration
    (2) declaration -> . var_declaration declaration
    (3) declaration -> . matrix_declaration declaration
    (4) declaration -> . empty
    (5) var_declaration -> . var_type ID sem_add_var SEMICOLON
    (6) matrix_declaration -> . MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (95) empty -> .
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type

  ! shift/reduce conflict for MATRIX resolved as shift
    MATRIX          shift and go to state 9
    FUNCTION        reduce using rule 95 (empty -> .)
    MAIN            reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    SWAP            reduce using rule 95 (empty -> .)
    MULTIPLY_MATRIX reduce using rule 95 (empty -> .)
    ADD_TO_MATRIX   reduce using rule 95 (empty -> .)
    SUBTRACT_FROM_MATRIX reduce using rule 95 (empty -> .)
    P_MATRIX        reduce using rule 95 (empty -> .)
    RIGHT_BRACE     reduce using rule 95 (empty -> .)
    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    BOOL            shift and go to state 12

  ! MATRIX          [ reduce using rule 95 (empty -> .) ]

    var_declaration                shift and go to state 5
    declaration                    shift and go to state 18
    matrix_declaration             shift and go to state 6
    empty                          shift and go to state 7
    var_type                       shift and go to state 8

state 6

    (3) declaration -> matrix_declaration . declaration
    (2) declaration -> . var_declaration declaration
    (3) declaration -> . matrix_declaration declaration
    (4) declaration -> . empty
    (5) var_declaration -> . var_type ID sem_add_var SEMICOLON
    (6) matrix_declaration -> . MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (95) empty -> .
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type

  ! shift/reduce conflict for MATRIX resolved as shift
    MATRIX          shift and go to state 9
    FUNCTION        reduce using rule 95 (empty -> .)
    MAIN            reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    SWAP            reduce using rule 95 (empty -> .)
    MULTIPLY_MATRIX reduce using rule 95 (empty -> .)
    ADD_TO_MATRIX   reduce using rule 95 (empty -> .)
    SUBTRACT_FROM_MATRIX reduce using rule 95 (empty -> .)
    P_MATRIX        reduce using rule 95 (empty -> .)
    RIGHT_BRACE     reduce using rule 95 (empty -> .)
    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    BOOL            shift and go to state 12

  ! MATRIX          [ reduce using rule 95 (empty -> .) ]

    matrix_declaration             shift and go to state 6
    declaration                    shift and go to state 19
    var_declaration                shift and go to state 5
    empty                          shift and go to state 7
    var_type                       shift and go to state 8

state 7

    (4) declaration -> empty .

    FUNCTION        reduce using rule 4 (declaration -> empty .)
    MAIN            reduce using rule 4 (declaration -> empty .)
    ID              reduce using rule 4 (declaration -> empty .)
    MATRIX          reduce using rule 4 (declaration -> empty .)
    IF              reduce using rule 4 (declaration -> empty .)
    RETURN          reduce using rule 4 (declaration -> empty .)
    WHILE           reduce using rule 4 (declaration -> empty .)
    READ            reduce using rule 4 (declaration -> empty .)
    WRITE           reduce using rule 4 (declaration -> empty .)
    SWAP            reduce using rule 4 (declaration -> empty .)
    MULTIPLY_MATRIX reduce using rule 4 (declaration -> empty .)
    ADD_TO_MATRIX   reduce using rule 4 (declaration -> empty .)
    SUBTRACT_FROM_MATRIX reduce using rule 4 (declaration -> empty .)
    P_MATRIX        reduce using rule 4 (declaration -> empty .)
    RIGHT_BRACE     reduce using rule 4 (declaration -> empty .)


state 8

    (5) var_declaration -> var_type . ID sem_add_var SEMICOLON

    ID              shift and go to state 20


state 9

    (6) matrix_declaration -> MATRIX . var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type

    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    BOOL            shift and go to state 12

    var_type                       shift and go to state 21

state 10

    (16) var_type -> INT . sem_get_type
    (96) sem_get_type -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)

    sem_get_type                   shift and go to state 22
    empty                          shift and go to state 23

state 11

    (17) var_type -> DOUBLE . sem_get_type
    (96) sem_get_type -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)

    sem_get_type                   shift and go to state 24
    empty                          shift and go to state 23

state 12

    (18) var_type -> BOOL . sem_get_type
    (96) sem_get_type -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)

    sem_get_type                   shift and go to state 25
    empty                          shift and go to state 23

state 13

    (1) start -> sem_start_program declaration func_declaration .

    $end            reduce using rule 1 (start -> sem_start_program declaration func_declaration .)


state 14

    (9) func_declaration -> func_signature . func_declaration
    (9) func_declaration -> . func_signature func_declaration
    (10) func_declaration -> . main
    (11) func_signature -> . FUNCTION func_type func_signature_1 sem_end_func
    (94) main -> . MAIN sem_fill_goto_main block sem_fill_eras sem_end_main

    FUNCTION        shift and go to state 16
    MAIN            shift and go to state 17

    func_signature                 shift and go to state 14
    func_declaration               shift and go to state 26
    main                           shift and go to state 15

state 15

    (10) func_declaration -> main .

    $end            reduce using rule 10 (func_declaration -> main .)


state 16

    (11) func_signature -> FUNCTION . func_type func_signature_1 sem_end_func
    (26) func_type -> . INT sem_get_type
    (27) func_type -> . DOUBLE sem_get_type
    (28) func_type -> . BOOL sem_get_type
    (29) func_type -> . VOID sem_get_type

    INT             shift and go to state 28
    DOUBLE          shift and go to state 29
    BOOL            shift and go to state 30
    VOID            shift and go to state 31

    func_type                      shift and go to state 27

state 17

    (94) main -> MAIN . sem_fill_goto_main block sem_fill_eras sem_end_main
    (126) sem_fill_goto_main -> . empty
    (95) empty -> .

    LEFT_BRACE      reduce using rule 95 (empty -> .)

    sem_fill_goto_main             shift and go to state 32
    empty                          shift and go to state 33

state 18

    (2) declaration -> var_declaration declaration .

    FUNCTION        reduce using rule 2 (declaration -> var_declaration declaration .)
    MAIN            reduce using rule 2 (declaration -> var_declaration declaration .)
    ID              reduce using rule 2 (declaration -> var_declaration declaration .)
    MATRIX          reduce using rule 2 (declaration -> var_declaration declaration .)
    IF              reduce using rule 2 (declaration -> var_declaration declaration .)
    RETURN          reduce using rule 2 (declaration -> var_declaration declaration .)
    WHILE           reduce using rule 2 (declaration -> var_declaration declaration .)
    READ            reduce using rule 2 (declaration -> var_declaration declaration .)
    WRITE           reduce using rule 2 (declaration -> var_declaration declaration .)
    SWAP            reduce using rule 2 (declaration -> var_declaration declaration .)
    MULTIPLY_MATRIX reduce using rule 2 (declaration -> var_declaration declaration .)
    ADD_TO_MATRIX   reduce using rule 2 (declaration -> var_declaration declaration .)
    SUBTRACT_FROM_MATRIX reduce using rule 2 (declaration -> var_declaration declaration .)
    P_MATRIX        reduce using rule 2 (declaration -> var_declaration declaration .)
    RIGHT_BRACE     reduce using rule 2 (declaration -> var_declaration declaration .)


state 19

    (3) declaration -> matrix_declaration declaration .

    FUNCTION        reduce using rule 3 (declaration -> matrix_declaration declaration .)
    MAIN            reduce using rule 3 (declaration -> matrix_declaration declaration .)
    ID              reduce using rule 3 (declaration -> matrix_declaration declaration .)
    MATRIX          reduce using rule 3 (declaration -> matrix_declaration declaration .)
    IF              reduce using rule 3 (declaration -> matrix_declaration declaration .)
    RETURN          reduce using rule 3 (declaration -> matrix_declaration declaration .)
    WHILE           reduce using rule 3 (declaration -> matrix_declaration declaration .)
    READ            reduce using rule 3 (declaration -> matrix_declaration declaration .)
    WRITE           reduce using rule 3 (declaration -> matrix_declaration declaration .)
    SWAP            reduce using rule 3 (declaration -> matrix_declaration declaration .)
    MULTIPLY_MATRIX reduce using rule 3 (declaration -> matrix_declaration declaration .)
    ADD_TO_MATRIX   reduce using rule 3 (declaration -> matrix_declaration declaration .)
    SUBTRACT_FROM_MATRIX reduce using rule 3 (declaration -> matrix_declaration declaration .)
    P_MATRIX        reduce using rule 3 (declaration -> matrix_declaration declaration .)
    RIGHT_BRACE     reduce using rule 3 (declaration -> matrix_declaration declaration .)


state 20

    (5) var_declaration -> var_type ID . sem_add_var SEMICOLON
    (99) sem_add_var -> . empty
    (95) empty -> .

    SEMICOLON       reduce using rule 95 (empty -> .)

    sem_add_var                    shift and go to state 34
    empty                          shift and go to state 35

state 21

    (6) matrix_declaration -> MATRIX var_type . ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON

    ID              shift and go to state 36


state 22

    (16) var_type -> INT sem_get_type .

    ID              reduce using rule 16 (var_type -> INT sem_get_type .)


state 23

    (96) sem_get_type -> empty .

    ID              reduce using rule 96 (sem_get_type -> empty .)


state 24

    (17) var_type -> DOUBLE sem_get_type .

    ID              reduce using rule 17 (var_type -> DOUBLE sem_get_type .)


state 25

    (18) var_type -> BOOL sem_get_type .

    ID              reduce using rule 18 (var_type -> BOOL sem_get_type .)


state 26

    (9) func_declaration -> func_signature func_declaration .

    $end            reduce using rule 9 (func_declaration -> func_signature func_declaration .)


state 27

    (11) func_signature -> FUNCTION func_type . func_signature_1 sem_end_func
    (12) func_signature_1 -> . ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block

    ID              shift and go to state 38

    func_signature_1               shift and go to state 37

state 28

    (26) func_type -> INT . sem_get_type
    (96) sem_get_type -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)

    sem_get_type                   shift and go to state 39
    empty                          shift and go to state 23

state 29

    (27) func_type -> DOUBLE . sem_get_type
    (96) sem_get_type -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)

    sem_get_type                   shift and go to state 40
    empty                          shift and go to state 23

state 30

    (28) func_type -> BOOL . sem_get_type
    (96) sem_get_type -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)

    sem_get_type                   shift and go to state 41
    empty                          shift and go to state 23

state 31

    (29) func_type -> VOID . sem_get_type
    (96) sem_get_type -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)

    sem_get_type                   shift and go to state 42
    empty                          shift and go to state 23

state 32

    (94) main -> MAIN sem_fill_goto_main . block sem_fill_eras sem_end_main
    (30) block -> . LEFT_BRACE declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 44

    block                          shift and go to state 43

state 33

    (126) sem_fill_goto_main -> empty .

    LEFT_BRACE      reduce using rule 126 (sem_fill_goto_main -> empty .)


state 34

    (5) var_declaration -> var_type ID sem_add_var . SEMICOLON

    SEMICOLON       shift and go to state 45


state 35

    (99) sem_add_var -> empty .

    SEMICOLON       reduce using rule 99 (sem_add_var -> empty .)


state 36

    (6) matrix_declaration -> MATRIX var_type ID . sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (129) sem_get_matrix_id -> . empty
    (95) empty -> .

    LEFT_BRACKET    reduce using rule 95 (empty -> .)

    sem_get_matrix_id              shift and go to state 46
    empty                          shift and go to state 47

state 37

    (11) func_signature -> FUNCTION func_type func_signature_1 . sem_end_func
    (98) sem_end_func -> . empty
    (95) empty -> .

    FUNCTION        reduce using rule 95 (empty -> .)
    MAIN            reduce using rule 95 (empty -> .)

    sem_end_func                   shift and go to state 48
    empty                          shift and go to state 49

state 38

    (12) func_signature_1 -> ID . sem_add_func LEFT_PAR param_declaration RIGHT_PAR block
    (97) sem_add_func -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)

    sem_add_func                   shift and go to state 50
    empty                          shift and go to state 51

state 39

    (26) func_type -> INT sem_get_type .

    ID              reduce using rule 26 (func_type -> INT sem_get_type .)


state 40

    (27) func_type -> DOUBLE sem_get_type .

    ID              reduce using rule 27 (func_type -> DOUBLE sem_get_type .)


state 41

    (28) func_type -> BOOL sem_get_type .

    ID              reduce using rule 28 (func_type -> BOOL sem_get_type .)


state 42

    (29) func_type -> VOID sem_get_type .

    ID              reduce using rule 29 (func_type -> VOID sem_get_type .)


state 43

    (94) main -> MAIN sem_fill_goto_main block . sem_fill_eras sem_end_main
    (128) sem_fill_eras -> . empty
    (95) empty -> .

    $end            reduce using rule 95 (empty -> .)

    sem_fill_eras                  shift and go to state 52
    empty                          shift and go to state 53

state 44

    (30) block -> LEFT_BRACE . declaration statements RIGHT_BRACE
    (2) declaration -> . var_declaration declaration
    (3) declaration -> . matrix_declaration declaration
    (4) declaration -> . empty
    (5) var_declaration -> . var_type ID sem_add_var SEMICOLON
    (6) matrix_declaration -> . MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (95) empty -> .
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type

  ! shift/reduce conflict for MATRIX resolved as shift
    MATRIX          shift and go to state 9
    ID              reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    SWAP            reduce using rule 95 (empty -> .)
    MULTIPLY_MATRIX reduce using rule 95 (empty -> .)
    ADD_TO_MATRIX   reduce using rule 95 (empty -> .)
    SUBTRACT_FROM_MATRIX reduce using rule 95 (empty -> .)
    P_MATRIX        reduce using rule 95 (empty -> .)
    RIGHT_BRACE     reduce using rule 95 (empty -> .)
    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    BOOL            shift and go to state 12

  ! MATRIX          [ reduce using rule 95 (empty -> .) ]

    declaration                    shift and go to state 54
    var_declaration                shift and go to state 5
    matrix_declaration             shift and go to state 6
    empty                          shift and go to state 7
    var_type                       shift and go to state 8

state 45

    (5) var_declaration -> var_type ID sem_add_var SEMICOLON .

    MATRIX          reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    INT             reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    DOUBLE          reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    BOOL            reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    FUNCTION        reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    MAIN            reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    ID              reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    IF              reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    RETURN          reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    WHILE           reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    READ            reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    WRITE           reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    SWAP            reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    MULTIPLY_MATRIX reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    ADD_TO_MATRIX   reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    SUBTRACT_FROM_MATRIX reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    P_MATRIX        reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)
    RIGHT_BRACE     reduce using rule 5 (var_declaration -> var_type ID sem_add_var SEMICOLON .)


state 46

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id . LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON

    LEFT_BRACKET    shift and go to state 55


state 47

    (129) sem_get_matrix_id -> empty .

    LEFT_BRACKET    reduce using rule 129 (sem_get_matrix_id -> empty .)


state 48

    (11) func_signature -> FUNCTION func_type func_signature_1 sem_end_func .

    FUNCTION        reduce using rule 11 (func_signature -> FUNCTION func_type func_signature_1 sem_end_func .)
    MAIN            reduce using rule 11 (func_signature -> FUNCTION func_type func_signature_1 sem_end_func .)


state 49

    (98) sem_end_func -> empty .

    FUNCTION        reduce using rule 98 (sem_end_func -> empty .)
    MAIN            reduce using rule 98 (sem_end_func -> empty .)


state 50

    (12) func_signature_1 -> ID sem_add_func . LEFT_PAR param_declaration RIGHT_PAR block

    LEFT_PAR        shift and go to state 56


state 51

    (97) sem_add_func -> empty .

    LEFT_PAR        reduce using rule 97 (sem_add_func -> empty .)


state 52

    (94) main -> MAIN sem_fill_goto_main block sem_fill_eras . sem_end_main
    (127) sem_end_main -> . empty
    (95) empty -> .

    $end            reduce using rule 95 (empty -> .)

    sem_end_main                   shift and go to state 57
    empty                          shift and go to state 58

state 53

    (128) sem_fill_eras -> empty .

    $end            reduce using rule 128 (sem_fill_eras -> empty .)


state 54

    (30) block -> LEFT_BRACE declaration . statements RIGHT_BRACE
    (31) statements -> . statement statements
    (32) statements -> . empty
    (33) statement -> . var_assignment
    (34) statement -> . matrix_assignment
    (35) statement -> . condition
    (36) statement -> . return
    (37) statement -> . function_call
    (38) statement -> . while_cycle
    (39) statement -> . read
    (40) statement -> . write
    (41) statement -> . swap
    (42) statement -> . multiply_matrix
    (43) statement -> . add_to_matrix
    (44) statement -> . subtract_from_matrix
    (45) statement -> . p_matrix
    (95) empty -> .
    (46) var_assignment -> . ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (47) matrix_assignment -> . MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON
    (79) condition -> . IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (56) return -> . RETURN mega_exp sem_return_function SEMICOLON
    (82) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (86) while_cycle -> . WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (87) read -> . READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (88) write -> . WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (93) swap -> . SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap
    (90) multiply_matrix -> . MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix
    (91) add_to_matrix -> . ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix
    (92) subtract_from_matrix -> . SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix
    (89) p_matrix -> . P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix

    RIGHT_BRACE     reduce using rule 95 (empty -> .)
    ID              shift and go to state 75
    MATRIX          shift and go to state 76
    IF              shift and go to state 77
    RETURN          shift and go to state 78
    WHILE           shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    SWAP            shift and go to state 82
    MULTIPLY_MATRIX shift and go to state 83
    ADD_TO_MATRIX   shift and go to state 84
    SUBTRACT_FROM_MATRIX shift and go to state 85
    P_MATRIX        shift and go to state 86

    statements                     shift and go to state 59
    statement                      shift and go to state 60
    empty                          shift and go to state 61
    var_assignment                 shift and go to state 62
    matrix_assignment              shift and go to state 63
    condition                      shift and go to state 64
    return                         shift and go to state 65
    function_call                  shift and go to state 66
    while_cycle                    shift and go to state 67
    read                           shift and go to state 68
    write                          shift and go to state 69
    swap                           shift and go to state 70
    multiply_matrix                shift and go to state 71
    add_to_matrix                  shift and go to state 72
    subtract_from_matrix           shift and go to state 73
    p_matrix                       shift and go to state 74

state 55

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET . CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON

    CTE_I           shift and go to state 87


state 56

    (12) func_signature_1 -> ID sem_add_func LEFT_PAR . param_declaration RIGHT_PAR block
    (13) param_declaration -> . var_type ID sem_add_param
    (14) param_declaration -> . var_type ID sem_add_param COMMA param_declaration
    (15) param_declaration -> . empty
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type
    (95) empty -> .

    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    BOOL            shift and go to state 12
    RIGHT_PAR       reduce using rule 95 (empty -> .)

    param_declaration              shift and go to state 88
    var_type                       shift and go to state 89
    empty                          shift and go to state 90

state 57

    (94) main -> MAIN sem_fill_goto_main block sem_fill_eras sem_end_main .

    $end            reduce using rule 94 (main -> MAIN sem_fill_goto_main block sem_fill_eras sem_end_main .)


state 58

    (127) sem_end_main -> empty .

    $end            reduce using rule 127 (sem_end_main -> empty .)


state 59

    (30) block -> LEFT_BRACE declaration statements . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 91


state 60

    (31) statements -> statement . statements
    (31) statements -> . statement statements
    (32) statements -> . empty
    (33) statement -> . var_assignment
    (34) statement -> . matrix_assignment
    (35) statement -> . condition
    (36) statement -> . return
    (37) statement -> . function_call
    (38) statement -> . while_cycle
    (39) statement -> . read
    (40) statement -> . write
    (41) statement -> . swap
    (42) statement -> . multiply_matrix
    (43) statement -> . add_to_matrix
    (44) statement -> . subtract_from_matrix
    (45) statement -> . p_matrix
    (95) empty -> .
    (46) var_assignment -> . ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (47) matrix_assignment -> . MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON
    (79) condition -> . IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (56) return -> . RETURN mega_exp sem_return_function SEMICOLON
    (82) function_call -> . ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (86) while_cycle -> . WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (87) read -> . READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (88) write -> . WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (93) swap -> . SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap
    (90) multiply_matrix -> . MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix
    (91) add_to_matrix -> . ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix
    (92) subtract_from_matrix -> . SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix
    (89) p_matrix -> . P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix

    RIGHT_BRACE     reduce using rule 95 (empty -> .)
    ID              shift and go to state 75
    MATRIX          shift and go to state 76
    IF              shift and go to state 77
    RETURN          shift and go to state 78
    WHILE           shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    SWAP            shift and go to state 82
    MULTIPLY_MATRIX shift and go to state 83
    ADD_TO_MATRIX   shift and go to state 84
    SUBTRACT_FROM_MATRIX shift and go to state 85
    P_MATRIX        shift and go to state 86

    statement                      shift and go to state 60
    statements                     shift and go to state 92
    empty                          shift and go to state 61
    var_assignment                 shift and go to state 62
    matrix_assignment              shift and go to state 63
    condition                      shift and go to state 64
    return                         shift and go to state 65
    function_call                  shift and go to state 66
    while_cycle                    shift and go to state 67
    read                           shift and go to state 68
    write                          shift and go to state 69
    swap                           shift and go to state 70
    multiply_matrix                shift and go to state 71
    add_to_matrix                  shift and go to state 72
    subtract_from_matrix           shift and go to state 73
    p_matrix                       shift and go to state 74

state 61

    (32) statements -> empty .

    RIGHT_BRACE     reduce using rule 32 (statements -> empty .)


state 62

    (33) statement -> var_assignment .

    ID              reduce using rule 33 (statement -> var_assignment .)
    MATRIX          reduce using rule 33 (statement -> var_assignment .)
    IF              reduce using rule 33 (statement -> var_assignment .)
    RETURN          reduce using rule 33 (statement -> var_assignment .)
    WHILE           reduce using rule 33 (statement -> var_assignment .)
    READ            reduce using rule 33 (statement -> var_assignment .)
    WRITE           reduce using rule 33 (statement -> var_assignment .)
    SWAP            reduce using rule 33 (statement -> var_assignment .)
    MULTIPLY_MATRIX reduce using rule 33 (statement -> var_assignment .)
    ADD_TO_MATRIX   reduce using rule 33 (statement -> var_assignment .)
    SUBTRACT_FROM_MATRIX reduce using rule 33 (statement -> var_assignment .)
    P_MATRIX        reduce using rule 33 (statement -> var_assignment .)
    RIGHT_BRACE     reduce using rule 33 (statement -> var_assignment .)


state 63

    (34) statement -> matrix_assignment .

    ID              reduce using rule 34 (statement -> matrix_assignment .)
    MATRIX          reduce using rule 34 (statement -> matrix_assignment .)
    IF              reduce using rule 34 (statement -> matrix_assignment .)
    RETURN          reduce using rule 34 (statement -> matrix_assignment .)
    WHILE           reduce using rule 34 (statement -> matrix_assignment .)
    READ            reduce using rule 34 (statement -> matrix_assignment .)
    WRITE           reduce using rule 34 (statement -> matrix_assignment .)
    SWAP            reduce using rule 34 (statement -> matrix_assignment .)
    MULTIPLY_MATRIX reduce using rule 34 (statement -> matrix_assignment .)
    ADD_TO_MATRIX   reduce using rule 34 (statement -> matrix_assignment .)
    SUBTRACT_FROM_MATRIX reduce using rule 34 (statement -> matrix_assignment .)
    P_MATRIX        reduce using rule 34 (statement -> matrix_assignment .)
    RIGHT_BRACE     reduce using rule 34 (statement -> matrix_assignment .)


state 64

    (35) statement -> condition .

    ID              reduce using rule 35 (statement -> condition .)
    MATRIX          reduce using rule 35 (statement -> condition .)
    IF              reduce using rule 35 (statement -> condition .)
    RETURN          reduce using rule 35 (statement -> condition .)
    WHILE           reduce using rule 35 (statement -> condition .)
    READ            reduce using rule 35 (statement -> condition .)
    WRITE           reduce using rule 35 (statement -> condition .)
    SWAP            reduce using rule 35 (statement -> condition .)
    MULTIPLY_MATRIX reduce using rule 35 (statement -> condition .)
    ADD_TO_MATRIX   reduce using rule 35 (statement -> condition .)
    SUBTRACT_FROM_MATRIX reduce using rule 35 (statement -> condition .)
    P_MATRIX        reduce using rule 35 (statement -> condition .)
    RIGHT_BRACE     reduce using rule 35 (statement -> condition .)


state 65

    (36) statement -> return .

    ID              reduce using rule 36 (statement -> return .)
    MATRIX          reduce using rule 36 (statement -> return .)
    IF              reduce using rule 36 (statement -> return .)
    RETURN          reduce using rule 36 (statement -> return .)
    WHILE           reduce using rule 36 (statement -> return .)
    READ            reduce using rule 36 (statement -> return .)
    WRITE           reduce using rule 36 (statement -> return .)
    SWAP            reduce using rule 36 (statement -> return .)
    MULTIPLY_MATRIX reduce using rule 36 (statement -> return .)
    ADD_TO_MATRIX   reduce using rule 36 (statement -> return .)
    SUBTRACT_FROM_MATRIX reduce using rule 36 (statement -> return .)
    P_MATRIX        reduce using rule 36 (statement -> return .)
    RIGHT_BRACE     reduce using rule 36 (statement -> return .)


state 66

    (37) statement -> function_call .

    ID              reduce using rule 37 (statement -> function_call .)
    MATRIX          reduce using rule 37 (statement -> function_call .)
    IF              reduce using rule 37 (statement -> function_call .)
    RETURN          reduce using rule 37 (statement -> function_call .)
    WHILE           reduce using rule 37 (statement -> function_call .)
    READ            reduce using rule 37 (statement -> function_call .)
    WRITE           reduce using rule 37 (statement -> function_call .)
    SWAP            reduce using rule 37 (statement -> function_call .)
    MULTIPLY_MATRIX reduce using rule 37 (statement -> function_call .)
    ADD_TO_MATRIX   reduce using rule 37 (statement -> function_call .)
    SUBTRACT_FROM_MATRIX reduce using rule 37 (statement -> function_call .)
    P_MATRIX        reduce using rule 37 (statement -> function_call .)
    RIGHT_BRACE     reduce using rule 37 (statement -> function_call .)


state 67

    (38) statement -> while_cycle .

    ID              reduce using rule 38 (statement -> while_cycle .)
    MATRIX          reduce using rule 38 (statement -> while_cycle .)
    IF              reduce using rule 38 (statement -> while_cycle .)
    RETURN          reduce using rule 38 (statement -> while_cycle .)
    WHILE           reduce using rule 38 (statement -> while_cycle .)
    READ            reduce using rule 38 (statement -> while_cycle .)
    WRITE           reduce using rule 38 (statement -> while_cycle .)
    SWAP            reduce using rule 38 (statement -> while_cycle .)
    MULTIPLY_MATRIX reduce using rule 38 (statement -> while_cycle .)
    ADD_TO_MATRIX   reduce using rule 38 (statement -> while_cycle .)
    SUBTRACT_FROM_MATRIX reduce using rule 38 (statement -> while_cycle .)
    P_MATRIX        reduce using rule 38 (statement -> while_cycle .)
    RIGHT_BRACE     reduce using rule 38 (statement -> while_cycle .)


state 68

    (39) statement -> read .

    ID              reduce using rule 39 (statement -> read .)
    MATRIX          reduce using rule 39 (statement -> read .)
    IF              reduce using rule 39 (statement -> read .)
    RETURN          reduce using rule 39 (statement -> read .)
    WHILE           reduce using rule 39 (statement -> read .)
    READ            reduce using rule 39 (statement -> read .)
    WRITE           reduce using rule 39 (statement -> read .)
    SWAP            reduce using rule 39 (statement -> read .)
    MULTIPLY_MATRIX reduce using rule 39 (statement -> read .)
    ADD_TO_MATRIX   reduce using rule 39 (statement -> read .)
    SUBTRACT_FROM_MATRIX reduce using rule 39 (statement -> read .)
    P_MATRIX        reduce using rule 39 (statement -> read .)
    RIGHT_BRACE     reduce using rule 39 (statement -> read .)


state 69

    (40) statement -> write .

    ID              reduce using rule 40 (statement -> write .)
    MATRIX          reduce using rule 40 (statement -> write .)
    IF              reduce using rule 40 (statement -> write .)
    RETURN          reduce using rule 40 (statement -> write .)
    WHILE           reduce using rule 40 (statement -> write .)
    READ            reduce using rule 40 (statement -> write .)
    WRITE           reduce using rule 40 (statement -> write .)
    SWAP            reduce using rule 40 (statement -> write .)
    MULTIPLY_MATRIX reduce using rule 40 (statement -> write .)
    ADD_TO_MATRIX   reduce using rule 40 (statement -> write .)
    SUBTRACT_FROM_MATRIX reduce using rule 40 (statement -> write .)
    P_MATRIX        reduce using rule 40 (statement -> write .)
    RIGHT_BRACE     reduce using rule 40 (statement -> write .)


state 70

    (41) statement -> swap .

    ID              reduce using rule 41 (statement -> swap .)
    MATRIX          reduce using rule 41 (statement -> swap .)
    IF              reduce using rule 41 (statement -> swap .)
    RETURN          reduce using rule 41 (statement -> swap .)
    WHILE           reduce using rule 41 (statement -> swap .)
    READ            reduce using rule 41 (statement -> swap .)
    WRITE           reduce using rule 41 (statement -> swap .)
    SWAP            reduce using rule 41 (statement -> swap .)
    MULTIPLY_MATRIX reduce using rule 41 (statement -> swap .)
    ADD_TO_MATRIX   reduce using rule 41 (statement -> swap .)
    SUBTRACT_FROM_MATRIX reduce using rule 41 (statement -> swap .)
    P_MATRIX        reduce using rule 41 (statement -> swap .)
    RIGHT_BRACE     reduce using rule 41 (statement -> swap .)


state 71

    (42) statement -> multiply_matrix .

    ID              reduce using rule 42 (statement -> multiply_matrix .)
    MATRIX          reduce using rule 42 (statement -> multiply_matrix .)
    IF              reduce using rule 42 (statement -> multiply_matrix .)
    RETURN          reduce using rule 42 (statement -> multiply_matrix .)
    WHILE           reduce using rule 42 (statement -> multiply_matrix .)
    READ            reduce using rule 42 (statement -> multiply_matrix .)
    WRITE           reduce using rule 42 (statement -> multiply_matrix .)
    SWAP            reduce using rule 42 (statement -> multiply_matrix .)
    MULTIPLY_MATRIX reduce using rule 42 (statement -> multiply_matrix .)
    ADD_TO_MATRIX   reduce using rule 42 (statement -> multiply_matrix .)
    SUBTRACT_FROM_MATRIX reduce using rule 42 (statement -> multiply_matrix .)
    P_MATRIX        reduce using rule 42 (statement -> multiply_matrix .)
    RIGHT_BRACE     reduce using rule 42 (statement -> multiply_matrix .)


state 72

    (43) statement -> add_to_matrix .

    ID              reduce using rule 43 (statement -> add_to_matrix .)
    MATRIX          reduce using rule 43 (statement -> add_to_matrix .)
    IF              reduce using rule 43 (statement -> add_to_matrix .)
    RETURN          reduce using rule 43 (statement -> add_to_matrix .)
    WHILE           reduce using rule 43 (statement -> add_to_matrix .)
    READ            reduce using rule 43 (statement -> add_to_matrix .)
    WRITE           reduce using rule 43 (statement -> add_to_matrix .)
    SWAP            reduce using rule 43 (statement -> add_to_matrix .)
    MULTIPLY_MATRIX reduce using rule 43 (statement -> add_to_matrix .)
    ADD_TO_MATRIX   reduce using rule 43 (statement -> add_to_matrix .)
    SUBTRACT_FROM_MATRIX reduce using rule 43 (statement -> add_to_matrix .)
    P_MATRIX        reduce using rule 43 (statement -> add_to_matrix .)
    RIGHT_BRACE     reduce using rule 43 (statement -> add_to_matrix .)


state 73

    (44) statement -> subtract_from_matrix .

    ID              reduce using rule 44 (statement -> subtract_from_matrix .)
    MATRIX          reduce using rule 44 (statement -> subtract_from_matrix .)
    IF              reduce using rule 44 (statement -> subtract_from_matrix .)
    RETURN          reduce using rule 44 (statement -> subtract_from_matrix .)
    WHILE           reduce using rule 44 (statement -> subtract_from_matrix .)
    READ            reduce using rule 44 (statement -> subtract_from_matrix .)
    WRITE           reduce using rule 44 (statement -> subtract_from_matrix .)
    SWAP            reduce using rule 44 (statement -> subtract_from_matrix .)
    MULTIPLY_MATRIX reduce using rule 44 (statement -> subtract_from_matrix .)
    ADD_TO_MATRIX   reduce using rule 44 (statement -> subtract_from_matrix .)
    SUBTRACT_FROM_MATRIX reduce using rule 44 (statement -> subtract_from_matrix .)
    P_MATRIX        reduce using rule 44 (statement -> subtract_from_matrix .)
    RIGHT_BRACE     reduce using rule 44 (statement -> subtract_from_matrix .)


state 74

    (45) statement -> p_matrix .

    ID              reduce using rule 45 (statement -> p_matrix .)
    MATRIX          reduce using rule 45 (statement -> p_matrix .)
    IF              reduce using rule 45 (statement -> p_matrix .)
    RETURN          reduce using rule 45 (statement -> p_matrix .)
    WHILE           reduce using rule 45 (statement -> p_matrix .)
    READ            reduce using rule 45 (statement -> p_matrix .)
    WRITE           reduce using rule 45 (statement -> p_matrix .)
    SWAP            reduce using rule 45 (statement -> p_matrix .)
    MULTIPLY_MATRIX reduce using rule 45 (statement -> p_matrix .)
    ADD_TO_MATRIX   reduce using rule 45 (statement -> p_matrix .)
    SUBTRACT_FROM_MATRIX reduce using rule 45 (statement -> p_matrix .)
    P_MATRIX        reduce using rule 45 (statement -> p_matrix .)
    RIGHT_BRACE     reduce using rule 45 (statement -> p_matrix .)


state 75

    (46) var_assignment -> ID . sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (82) function_call -> ID . sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (101) sem_push_operand -> . empty
    (120) sem_check_function -> . empty
    (95) empty -> .

    LEFT_BRACKET    reduce using rule 95 (empty -> .)
    ASSIGN          reduce using rule 95 (empty -> .)
    LEFT_PAR        reduce using rule 95 (empty -> .)

    sem_push_operand               shift and go to state 93
    sem_check_function             shift and go to state 94
    empty                          shift and go to state 95

state 76

    (47) matrix_assignment -> MATRIX . ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON

    ID              shift and go to state 96


state 77

    (79) condition -> IF . LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof

    LEFT_PAR        shift and go to state 97


state 78

    (56) return -> RETURN . mega_exp sem_return_function SEMICOLON
    (57) mega_exp -> . hyper_exp mega_exp_1
    (61) hyper_exp -> . exp hyper_exp_1
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    mega_exp                       shift and go to state 98
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 79

    (86) while_cycle -> WHILE . sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (117) sem_start_while -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)

    sem_start_while                shift and go to state 113
    empty                          shift and go to state 114

state 80

    (87) read -> READ . sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 115
    empty                          shift and go to state 116

state 81

    (88) write -> WRITE . sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 117
    empty                          shift and go to state 116

state 82

    (93) swap -> SWAP . LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap

    LEFT_PAR        shift and go to state 118


state 83

    (90) multiply_matrix -> MULTIPLY_MATRIX . LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix

    LEFT_PAR        shift and go to state 119


state 84

    (91) add_to_matrix -> ADD_TO_MATRIX . LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix

    LEFT_PAR        shift and go to state 120


state 85

    (92) subtract_from_matrix -> SUBTRACT_FROM_MATRIX . LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix

    LEFT_PAR        shift and go to state 121


state 86

    (89) p_matrix -> P_MATRIX . LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix

    LEFT_PAR        shift and go to state 122


state 87

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I . sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (130) sem_get_dim1 -> . empty
    (95) empty -> .

    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    sem_get_dim1                   shift and go to state 123
    empty                          shift and go to state 124

state 88

    (12) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration . RIGHT_PAR block

    RIGHT_PAR       shift and go to state 125


state 89

    (13) param_declaration -> var_type . ID sem_add_param
    (14) param_declaration -> var_type . ID sem_add_param COMMA param_declaration

    ID              shift and go to state 126


state 90

    (15) param_declaration -> empty .

    RIGHT_PAR       reduce using rule 15 (param_declaration -> empty .)


state 91

    (30) block -> LEFT_BRACE declaration statements RIGHT_BRACE .

    $end            reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    FUNCTION        reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    MAIN            reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    ELSE            reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    ID              reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    MATRIX          reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    IF              reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    RETURN          reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    WHILE           reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    READ            reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    WRITE           reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    SWAP            reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    MULTIPLY_MATRIX reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    ADD_TO_MATRIX   reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    SUBTRACT_FROM_MATRIX reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    P_MATRIX        reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 30 (block -> LEFT_BRACE declaration statements RIGHT_BRACE .)


state 92

    (31) statements -> statement statements .

    RIGHT_BRACE     reduce using rule 31 (statements -> statement statements .)


state 93

    (46) var_assignment -> ID sem_push_operand . matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON
    (7) matrix -> . LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (8) matrix -> . empty
    (95) empty -> .

    LEFT_BRACKET    shift and go to state 128
    ASSIGN          reduce using rule 95 (empty -> .)

    matrix                         shift and go to state 127
    empty                          shift and go to state 129

state 94

    (82) function_call -> ID sem_check_function . LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub

    LEFT_PAR        shift and go to state 130


state 95

    (101) sem_push_operand -> empty .
    (120) sem_check_function -> empty .

    LEFT_BRACKET    reduce using rule 101 (sem_push_operand -> empty .)
    ASSIGN          reduce using rule 101 (sem_push_operand -> empty .)
    MULTIPLY        reduce using rule 101 (sem_push_operand -> empty .)
    DIVIDE          reduce using rule 101 (sem_push_operand -> empty .)
    PLUS            reduce using rule 101 (sem_push_operand -> empty .)
    MINUS           reduce using rule 101 (sem_push_operand -> empty .)
    IS_EQUAL_TO     reduce using rule 101 (sem_push_operand -> empty .)
    NOT_EQUAL_TO    reduce using rule 101 (sem_push_operand -> empty .)
    GREATER_THAN    reduce using rule 101 (sem_push_operand -> empty .)
    LESS_THAN       reduce using rule 101 (sem_push_operand -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 101 (sem_push_operand -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 101 (sem_push_operand -> empty .)
    AND             reduce using rule 101 (sem_push_operand -> empty .)
    OR              reduce using rule 101 (sem_push_operand -> empty .)
    SEMICOLON       reduce using rule 101 (sem_push_operand -> empty .)
    RIGHT_PAR       reduce using rule 101 (sem_push_operand -> empty .)
    COMMA           reduce using rule 101 (sem_push_operand -> empty .)
    RIGHT_BRACKET   reduce using rule 101 (sem_push_operand -> empty .)
    LEFT_PAR        reduce using rule 120 (sem_check_function -> empty .)


state 96

    (47) matrix_assignment -> MATRIX ID . sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON
    (101) sem_push_operand -> . empty
    (95) empty -> .

    ASSIGN          reduce using rule 95 (empty -> .)

    sem_push_operand               shift and go to state 131
    empty                          shift and go to state 132

state 97

    (79) condition -> IF LEFT_PAR . mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof
    (57) mega_exp -> . hyper_exp mega_exp_1
    (61) hyper_exp -> . exp hyper_exp_1
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    mega_exp                       shift and go to state 133
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 98

    (56) return -> RETURN mega_exp . sem_return_function SEMICOLON
    (111) sem_return_function -> . empty
    (95) empty -> .

    SEMICOLON       reduce using rule 95 (empty -> .)

    sem_return_function            shift and go to state 134
    empty                          shift and go to state 135

state 99

    (57) mega_exp -> hyper_exp . mega_exp_1
    (58) mega_exp_1 -> . AND sem_push_operator mega_exp sem_top_logical
    (59) mega_exp_1 -> . OR sem_push_operator mega_exp sem_top_logical
    (60) mega_exp_1 -> . empty
    (95) empty -> .

    AND             shift and go to state 137
    OR              shift and go to state 138
    SEMICOLON       reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)

    mega_exp_1                     shift and go to state 136
    empty                          shift and go to state 139

state 100

    (61) hyper_exp -> exp . hyper_exp_1
    (62) hyper_exp_1 -> . IS_EQUAL_TO sem_push_operator exp sem_top_relational
    (63) hyper_exp_1 -> . NOT_EQUAL_TO sem_push_operator exp sem_top_relational
    (64) hyper_exp_1 -> . GREATER_THAN sem_push_operator exp sem_top_relational
    (65) hyper_exp_1 -> . LESS_THAN sem_push_operator exp sem_top_relational
    (66) hyper_exp_1 -> . GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
    (67) hyper_exp_1 -> . LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational
    (68) hyper_exp_1 -> . empty
    (95) empty -> .

    IS_EQUAL_TO     shift and go to state 141
    NOT_EQUAL_TO    shift and go to state 142
    GREATER_THAN    shift and go to state 143
    LESS_THAN       shift and go to state 144
    GREATER_THAN_OR_EQUAL_TO shift and go to state 145
    LESS_THAN_OR_EQUAL_TO shift and go to state 146
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)

    hyper_exp_1                    shift and go to state 140
    empty                          shift and go to state 147

state 101

    (69) exp -> term . sem_top_term
    (70) exp -> term . sem_top_term PLUS sem_push_operator exp
    (71) exp -> term . sem_top_term MINUS sem_push_operator exp
    (106) sem_top_term -> . empty
    (95) empty -> .

    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    IS_EQUAL_TO     reduce using rule 95 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 95 (empty -> .)
    GREATER_THAN    reduce using rule 95 (empty -> .)
    LESS_THAN       reduce using rule 95 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    sem_top_term                   shift and go to state 148
    empty                          shift and go to state 149

state 102

    (77) factor -> PLUS . sem_push_operator var_cte
    (100) sem_push_operator -> . empty
    (95) empty -> .

    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 150
    empty                          shift and go to state 116

state 103

    (78) factor -> MINUS . sem_push_operator var_cte
    (100) sem_push_operator -> . empty
    (95) empty -> .

    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 151
    empty                          shift and go to state 116

state 104

    (72) term -> factor . sem_top_factor
    (73) term -> factor . sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> factor . sem_top_factor DIVIDE sem_push_operator term
    (105) sem_top_factor -> . empty
    (95) empty -> .

    MULTIPLY        reduce using rule 95 (empty -> .)
    DIVIDE          reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    IS_EQUAL_TO     reduce using rule 95 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 95 (empty -> .)
    GREATER_THAN    reduce using rule 95 (empty -> .)
    LESS_THAN       reduce using rule 95 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    sem_top_factor                 shift and go to state 152
    empty                          shift and go to state 153

state 105

    (75) factor -> LEFT_PAR . sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (107) sem_false_bottom_begin -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_false_bottom_begin         shift and go to state 154
    empty                          shift and go to state 155

state 106

    (76) factor -> var_cte .

    MULTIPLY        reduce using rule 76 (factor -> var_cte .)
    DIVIDE          reduce using rule 76 (factor -> var_cte .)
    PLUS            reduce using rule 76 (factor -> var_cte .)
    MINUS           reduce using rule 76 (factor -> var_cte .)
    IS_EQUAL_TO     reduce using rule 76 (factor -> var_cte .)
    NOT_EQUAL_TO    reduce using rule 76 (factor -> var_cte .)
    GREATER_THAN    reduce using rule 76 (factor -> var_cte .)
    LESS_THAN       reduce using rule 76 (factor -> var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 76 (factor -> var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 76 (factor -> var_cte .)
    AND             reduce using rule 76 (factor -> var_cte .)
    OR              reduce using rule 76 (factor -> var_cte .)
    SEMICOLON       reduce using rule 76 (factor -> var_cte .)
    RIGHT_PAR       reduce using rule 76 (factor -> var_cte .)
    COMMA           reduce using rule 76 (factor -> var_cte .)
    RIGHT_BRACKET   reduce using rule 76 (factor -> var_cte .)


state 107

    (19) var_cte -> CTE_I . sem_push_constant_int
    (102) sem_push_constant_int -> . empty
    (95) empty -> .

    MULTIPLY        reduce using rule 95 (empty -> .)
    DIVIDE          reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    IS_EQUAL_TO     reduce using rule 95 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 95 (empty -> .)
    GREATER_THAN    reduce using rule 95 (empty -> .)
    LESS_THAN       reduce using rule 95 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    sem_push_constant_int          shift and go to state 156
    empty                          shift and go to state 157

state 108

    (20) var_cte -> CTE_D . sem_push_constant_double
    (103) sem_push_constant_double -> . empty
    (95) empty -> .

    MULTIPLY        reduce using rule 95 (empty -> .)
    DIVIDE          reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    IS_EQUAL_TO     reduce using rule 95 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 95 (empty -> .)
    GREATER_THAN    reduce using rule 95 (empty -> .)
    LESS_THAN       reduce using rule 95 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    sem_push_constant_double       shift and go to state 158
    empty                          shift and go to state 159

state 109

    (21) var_cte -> cte_b . sem_push_constant_bool
    (104) sem_push_constant_bool -> . empty
    (95) empty -> .

    MULTIPLY        reduce using rule 95 (empty -> .)
    DIVIDE          reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    IS_EQUAL_TO     reduce using rule 95 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 95 (empty -> .)
    GREATER_THAN    reduce using rule 95 (empty -> .)
    LESS_THAN       reduce using rule 95 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    sem_push_constant_bool         shift and go to state 160
    empty                          shift and go to state 161

state 110

    (22) var_cte -> ID . sem_push_operand matrix
    (23) var_cte -> ID . sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (101) sem_push_operand -> . empty
    (120) sem_check_function -> . empty
    (95) empty -> .

    LEFT_BRACKET    reduce using rule 95 (empty -> .)
    MULTIPLY        reduce using rule 95 (empty -> .)
    DIVIDE          reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    IS_EQUAL_TO     reduce using rule 95 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 95 (empty -> .)
    GREATER_THAN    reduce using rule 95 (empty -> .)
    LESS_THAN       reduce using rule 95 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)
    LEFT_PAR        reduce using rule 95 (empty -> .)

    sem_push_operand               shift and go to state 162
    sem_check_function             shift and go to state 163
    empty                          shift and go to state 95

state 111

    (24) cte_b -> TRUE .

    MULTIPLY        reduce using rule 24 (cte_b -> TRUE .)
    DIVIDE          reduce using rule 24 (cte_b -> TRUE .)
    PLUS            reduce using rule 24 (cte_b -> TRUE .)
    MINUS           reduce using rule 24 (cte_b -> TRUE .)
    IS_EQUAL_TO     reduce using rule 24 (cte_b -> TRUE .)
    NOT_EQUAL_TO    reduce using rule 24 (cte_b -> TRUE .)
    GREATER_THAN    reduce using rule 24 (cte_b -> TRUE .)
    LESS_THAN       reduce using rule 24 (cte_b -> TRUE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 24 (cte_b -> TRUE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 24 (cte_b -> TRUE .)
    AND             reduce using rule 24 (cte_b -> TRUE .)
    OR              reduce using rule 24 (cte_b -> TRUE .)
    SEMICOLON       reduce using rule 24 (cte_b -> TRUE .)
    RIGHT_PAR       reduce using rule 24 (cte_b -> TRUE .)
    COMMA           reduce using rule 24 (cte_b -> TRUE .)
    RIGHT_BRACKET   reduce using rule 24 (cte_b -> TRUE .)


state 112

    (25) cte_b -> FALSE .

    MULTIPLY        reduce using rule 25 (cte_b -> FALSE .)
    DIVIDE          reduce using rule 25 (cte_b -> FALSE .)
    PLUS            reduce using rule 25 (cte_b -> FALSE .)
    MINUS           reduce using rule 25 (cte_b -> FALSE .)
    IS_EQUAL_TO     reduce using rule 25 (cte_b -> FALSE .)
    NOT_EQUAL_TO    reduce using rule 25 (cte_b -> FALSE .)
    GREATER_THAN    reduce using rule 25 (cte_b -> FALSE .)
    LESS_THAN       reduce using rule 25 (cte_b -> FALSE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 25 (cte_b -> FALSE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 25 (cte_b -> FALSE .)
    AND             reduce using rule 25 (cte_b -> FALSE .)
    OR              reduce using rule 25 (cte_b -> FALSE .)
    SEMICOLON       reduce using rule 25 (cte_b -> FALSE .)
    RIGHT_PAR       reduce using rule 25 (cte_b -> FALSE .)
    COMMA           reduce using rule 25 (cte_b -> FALSE .)
    RIGHT_BRACKET   reduce using rule 25 (cte_b -> FALSE .)


state 113

    (86) while_cycle -> WHILE sem_start_while . LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while

    LEFT_PAR        shift and go to state 164


state 114

    (117) sem_start_while -> empty .

    LEFT_PAR        reduce using rule 117 (sem_start_while -> empty .)


state 115

    (87) read -> READ sem_push_operator . LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    LEFT_PAR        shift and go to state 165


state 116

    (100) sem_push_operator -> empty .

    LEFT_PAR        reduce using rule 100 (sem_push_operator -> empty .)
    CTE_I           reduce using rule 100 (sem_push_operator -> empty .)
    CTE_D           reduce using rule 100 (sem_push_operator -> empty .)
    ID              reduce using rule 100 (sem_push_operator -> empty .)
    TRUE            reduce using rule 100 (sem_push_operator -> empty .)
    FALSE           reduce using rule 100 (sem_push_operator -> empty .)
    PLUS            reduce using rule 100 (sem_push_operator -> empty .)
    MINUS           reduce using rule 100 (sem_push_operator -> empty .)
    LEFT_BRACE      reduce using rule 100 (sem_push_operator -> empty .)


state 117

    (88) write -> WRITE sem_push_operator . LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON

    LEFT_PAR        shift and go to state 166


state 118

    (93) swap -> SWAP LEFT_PAR . mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap
    (57) mega_exp -> . hyper_exp mega_exp_1
    (61) hyper_exp -> . exp hyper_exp_1
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    mega_exp                       shift and go to state 167
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 119

    (90) multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR . ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix

    ID              shift and go to state 168


state 120

    (91) add_to_matrix -> ADD_TO_MATRIX LEFT_PAR . ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix

    ID              shift and go to state 169


state 121

    (92) subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR . ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix

    ID              shift and go to state 170


state 122

    (89) p_matrix -> P_MATRIX LEFT_PAR . ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix

    ID              shift and go to state 171


state 123

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 . RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON

    RIGHT_BRACKET   shift and go to state 172


state 124

    (130) sem_get_dim1 -> empty .

    RIGHT_BRACKET   reduce using rule 130 (sem_get_dim1 -> empty .)


state 125

    (12) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR . block
    (30) block -> . LEFT_BRACE declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 44

    block                          shift and go to state 173

state 126

    (13) param_declaration -> var_type ID . sem_add_param
    (14) param_declaration -> var_type ID . sem_add_param COMMA param_declaration
    (119) sem_add_param -> . empty
    (95) empty -> .

    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)

    sem_add_param                  shift and go to state 174
    empty                          shift and go to state 175

state 127

    (46) var_assignment -> ID sem_push_operand matrix . ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON

    ASSIGN          shift and go to state 176


state 128

    (7) matrix -> LEFT_BRACKET . sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (133) sem_check_dim1 -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_check_dim1                 shift and go to state 177
    empty                          shift and go to state 178

state 129

    (8) matrix -> empty .

    ASSIGN          reduce using rule 8 (matrix -> empty .)
    MULTIPLY        reduce using rule 8 (matrix -> empty .)
    DIVIDE          reduce using rule 8 (matrix -> empty .)
    PLUS            reduce using rule 8 (matrix -> empty .)
    MINUS           reduce using rule 8 (matrix -> empty .)
    IS_EQUAL_TO     reduce using rule 8 (matrix -> empty .)
    NOT_EQUAL_TO    reduce using rule 8 (matrix -> empty .)
    GREATER_THAN    reduce using rule 8 (matrix -> empty .)
    LESS_THAN       reduce using rule 8 (matrix -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 8 (matrix -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 8 (matrix -> empty .)
    AND             reduce using rule 8 (matrix -> empty .)
    OR              reduce using rule 8 (matrix -> empty .)
    SEMICOLON       reduce using rule 8 (matrix -> empty .)
    RIGHT_PAR       reduce using rule 8 (matrix -> empty .)
    COMMA           reduce using rule 8 (matrix -> empty .)
    RIGHT_BRACKET   reduce using rule 8 (matrix -> empty .)


state 130

    (82) function_call -> ID sem_check_function LEFT_PAR . sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (121) sem_create_era -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)

    sem_create_era                 shift and go to state 179
    empty                          shift and go to state 180

state 131

    (47) matrix_assignment -> MATRIX ID sem_push_operand . ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON

    ASSIGN          shift and go to state 181


state 132

    (101) sem_push_operand -> empty .

    ASSIGN          reduce using rule 101 (sem_push_operand -> empty .)
    COMMA           reduce using rule 101 (sem_push_operand -> empty .)
    RIGHT_PAR       reduce using rule 101 (sem_push_operand -> empty .)


state 133

    (79) condition -> IF LEFT_PAR mega_exp . RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof

    RIGHT_PAR       shift and go to state 182


state 134

    (56) return -> RETURN mega_exp sem_return_function . SEMICOLON

    SEMICOLON       shift and go to state 183


state 135

    (111) sem_return_function -> empty .

    SEMICOLON       reduce using rule 111 (sem_return_function -> empty .)


state 136

    (57) mega_exp -> hyper_exp mega_exp_1 .

    SEMICOLON       reduce using rule 57 (mega_exp -> hyper_exp mega_exp_1 .)
    RIGHT_PAR       reduce using rule 57 (mega_exp -> hyper_exp mega_exp_1 .)
    COMMA           reduce using rule 57 (mega_exp -> hyper_exp mega_exp_1 .)


state 137

    (58) mega_exp_1 -> AND . sem_push_operator mega_exp sem_top_logical
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 184
    empty                          shift and go to state 116

state 138

    (59) mega_exp_1 -> OR . sem_push_operator mega_exp sem_top_logical
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 185
    empty                          shift and go to state 116

state 139

    (60) mega_exp_1 -> empty .

    SEMICOLON       reduce using rule 60 (mega_exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 60 (mega_exp_1 -> empty .)
    COMMA           reduce using rule 60 (mega_exp_1 -> empty .)


state 140

    (61) hyper_exp -> exp hyper_exp_1 .

    AND             reduce using rule 61 (hyper_exp -> exp hyper_exp_1 .)
    OR              reduce using rule 61 (hyper_exp -> exp hyper_exp_1 .)
    SEMICOLON       reduce using rule 61 (hyper_exp -> exp hyper_exp_1 .)
    RIGHT_PAR       reduce using rule 61 (hyper_exp -> exp hyper_exp_1 .)
    COMMA           reduce using rule 61 (hyper_exp -> exp hyper_exp_1 .)


state 141

    (62) hyper_exp_1 -> IS_EQUAL_TO . sem_push_operator exp sem_top_relational
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 186
    empty                          shift and go to state 116

state 142

    (63) hyper_exp_1 -> NOT_EQUAL_TO . sem_push_operator exp sem_top_relational
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 187
    empty                          shift and go to state 116

state 143

    (64) hyper_exp_1 -> GREATER_THAN . sem_push_operator exp sem_top_relational
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 188
    empty                          shift and go to state 116

state 144

    (65) hyper_exp_1 -> LESS_THAN . sem_push_operator exp sem_top_relational
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 189
    empty                          shift and go to state 116

state 145

    (66) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO . sem_push_operator exp sem_top_relational
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 190
    empty                          shift and go to state 116

state 146

    (67) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO . sem_push_operator exp sem_top_relational
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 191
    empty                          shift and go to state 116

state 147

    (68) hyper_exp_1 -> empty .

    AND             reduce using rule 68 (hyper_exp_1 -> empty .)
    OR              reduce using rule 68 (hyper_exp_1 -> empty .)
    SEMICOLON       reduce using rule 68 (hyper_exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 68 (hyper_exp_1 -> empty .)
    COMMA           reduce using rule 68 (hyper_exp_1 -> empty .)


state 148

    (69) exp -> term sem_top_term .
    (70) exp -> term sem_top_term . PLUS sem_push_operator exp
    (71) exp -> term sem_top_term . MINUS sem_push_operator exp

    IS_EQUAL_TO     reduce using rule 69 (exp -> term sem_top_term .)
    NOT_EQUAL_TO    reduce using rule 69 (exp -> term sem_top_term .)
    GREATER_THAN    reduce using rule 69 (exp -> term sem_top_term .)
    LESS_THAN       reduce using rule 69 (exp -> term sem_top_term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 69 (exp -> term sem_top_term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 69 (exp -> term sem_top_term .)
    AND             reduce using rule 69 (exp -> term sem_top_term .)
    OR              reduce using rule 69 (exp -> term sem_top_term .)
    SEMICOLON       reduce using rule 69 (exp -> term sem_top_term .)
    RIGHT_PAR       reduce using rule 69 (exp -> term sem_top_term .)
    COMMA           reduce using rule 69 (exp -> term sem_top_term .)
    RIGHT_BRACKET   reduce using rule 69 (exp -> term sem_top_term .)
    PLUS            shift and go to state 192
    MINUS           shift and go to state 193


state 149

    (106) sem_top_term -> empty .

    PLUS            reduce using rule 106 (sem_top_term -> empty .)
    MINUS           reduce using rule 106 (sem_top_term -> empty .)
    IS_EQUAL_TO     reduce using rule 106 (sem_top_term -> empty .)
    NOT_EQUAL_TO    reduce using rule 106 (sem_top_term -> empty .)
    GREATER_THAN    reduce using rule 106 (sem_top_term -> empty .)
    LESS_THAN       reduce using rule 106 (sem_top_term -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 106 (sem_top_term -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 106 (sem_top_term -> empty .)
    AND             reduce using rule 106 (sem_top_term -> empty .)
    OR              reduce using rule 106 (sem_top_term -> empty .)
    SEMICOLON       reduce using rule 106 (sem_top_term -> empty .)
    RIGHT_PAR       reduce using rule 106 (sem_top_term -> empty .)
    COMMA           reduce using rule 106 (sem_top_term -> empty .)
    RIGHT_BRACKET   reduce using rule 106 (sem_top_term -> empty .)


state 150

    (77) factor -> PLUS sem_push_operator . var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    var_cte                        shift and go to state 194
    cte_b                          shift and go to state 109

state 151

    (78) factor -> MINUS sem_push_operator . var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    var_cte                        shift and go to state 195
    cte_b                          shift and go to state 109

state 152

    (72) term -> factor sem_top_factor .
    (73) term -> factor sem_top_factor . MULTIPLY sem_push_operator term
    (74) term -> factor sem_top_factor . DIVIDE sem_push_operator term

    PLUS            reduce using rule 72 (term -> factor sem_top_factor .)
    MINUS           reduce using rule 72 (term -> factor sem_top_factor .)
    IS_EQUAL_TO     reduce using rule 72 (term -> factor sem_top_factor .)
    NOT_EQUAL_TO    reduce using rule 72 (term -> factor sem_top_factor .)
    GREATER_THAN    reduce using rule 72 (term -> factor sem_top_factor .)
    LESS_THAN       reduce using rule 72 (term -> factor sem_top_factor .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 72 (term -> factor sem_top_factor .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 72 (term -> factor sem_top_factor .)
    AND             reduce using rule 72 (term -> factor sem_top_factor .)
    OR              reduce using rule 72 (term -> factor sem_top_factor .)
    SEMICOLON       reduce using rule 72 (term -> factor sem_top_factor .)
    RIGHT_PAR       reduce using rule 72 (term -> factor sem_top_factor .)
    COMMA           reduce using rule 72 (term -> factor sem_top_factor .)
    RIGHT_BRACKET   reduce using rule 72 (term -> factor sem_top_factor .)
    MULTIPLY        shift and go to state 196
    DIVIDE          shift and go to state 197


state 153

    (105) sem_top_factor -> empty .

    MULTIPLY        reduce using rule 105 (sem_top_factor -> empty .)
    DIVIDE          reduce using rule 105 (sem_top_factor -> empty .)
    PLUS            reduce using rule 105 (sem_top_factor -> empty .)
    MINUS           reduce using rule 105 (sem_top_factor -> empty .)
    IS_EQUAL_TO     reduce using rule 105 (sem_top_factor -> empty .)
    NOT_EQUAL_TO    reduce using rule 105 (sem_top_factor -> empty .)
    GREATER_THAN    reduce using rule 105 (sem_top_factor -> empty .)
    LESS_THAN       reduce using rule 105 (sem_top_factor -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 105 (sem_top_factor -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 105 (sem_top_factor -> empty .)
    AND             reduce using rule 105 (sem_top_factor -> empty .)
    OR              reduce using rule 105 (sem_top_factor -> empty .)
    SEMICOLON       reduce using rule 105 (sem_top_factor -> empty .)
    RIGHT_PAR       reduce using rule 105 (sem_top_factor -> empty .)
    COMMA           reduce using rule 105 (sem_top_factor -> empty .)
    RIGHT_BRACKET   reduce using rule 105 (sem_top_factor -> empty .)


state 154

    (75) factor -> LEFT_PAR sem_false_bottom_begin . mega_exp RIGHT_PAR sem_false_bottom_end
    (57) mega_exp -> . hyper_exp mega_exp_1
    (61) hyper_exp -> . exp hyper_exp_1
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    mega_exp                       shift and go to state 198
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 155

    (107) sem_false_bottom_begin -> empty .

    LEFT_PAR        reduce using rule 107 (sem_false_bottom_begin -> empty .)
    PLUS            reduce using rule 107 (sem_false_bottom_begin -> empty .)
    MINUS           reduce using rule 107 (sem_false_bottom_begin -> empty .)
    CTE_I           reduce using rule 107 (sem_false_bottom_begin -> empty .)
    CTE_D           reduce using rule 107 (sem_false_bottom_begin -> empty .)
    ID              reduce using rule 107 (sem_false_bottom_begin -> empty .)
    TRUE            reduce using rule 107 (sem_false_bottom_begin -> empty .)
    FALSE           reduce using rule 107 (sem_false_bottom_begin -> empty .)
    RIGHT_PAR       reduce using rule 107 (sem_false_bottom_begin -> empty .)


state 156

    (19) var_cte -> CTE_I sem_push_constant_int .

    MULTIPLY        reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    DIVIDE          reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    PLUS            reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    MINUS           reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    IS_EQUAL_TO     reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    NOT_EQUAL_TO    reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    GREATER_THAN    reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    LESS_THAN       reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    AND             reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    OR              reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    SEMICOLON       reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    RIGHT_PAR       reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    COMMA           reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    RIGHT_BRACKET   reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)


state 157

    (102) sem_push_constant_int -> empty .

    MULTIPLY        reduce using rule 102 (sem_push_constant_int -> empty .)
    DIVIDE          reduce using rule 102 (sem_push_constant_int -> empty .)
    PLUS            reduce using rule 102 (sem_push_constant_int -> empty .)
    MINUS           reduce using rule 102 (sem_push_constant_int -> empty .)
    IS_EQUAL_TO     reduce using rule 102 (sem_push_constant_int -> empty .)
    NOT_EQUAL_TO    reduce using rule 102 (sem_push_constant_int -> empty .)
    GREATER_THAN    reduce using rule 102 (sem_push_constant_int -> empty .)
    LESS_THAN       reduce using rule 102 (sem_push_constant_int -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 102 (sem_push_constant_int -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 102 (sem_push_constant_int -> empty .)
    AND             reduce using rule 102 (sem_push_constant_int -> empty .)
    OR              reduce using rule 102 (sem_push_constant_int -> empty .)
    SEMICOLON       reduce using rule 102 (sem_push_constant_int -> empty .)
    RIGHT_PAR       reduce using rule 102 (sem_push_constant_int -> empty .)
    COMMA           reduce using rule 102 (sem_push_constant_int -> empty .)
    RIGHT_BRACKET   reduce using rule 102 (sem_push_constant_int -> empty .)


state 158

    (20) var_cte -> CTE_D sem_push_constant_double .

    MULTIPLY        reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    DIVIDE          reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    PLUS            reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    MINUS           reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    IS_EQUAL_TO     reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    NOT_EQUAL_TO    reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    GREATER_THAN    reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    LESS_THAN       reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    AND             reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    OR              reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    SEMICOLON       reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    RIGHT_PAR       reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    COMMA           reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    RIGHT_BRACKET   reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)


state 159

    (103) sem_push_constant_double -> empty .

    MULTIPLY        reduce using rule 103 (sem_push_constant_double -> empty .)
    DIVIDE          reduce using rule 103 (sem_push_constant_double -> empty .)
    PLUS            reduce using rule 103 (sem_push_constant_double -> empty .)
    MINUS           reduce using rule 103 (sem_push_constant_double -> empty .)
    IS_EQUAL_TO     reduce using rule 103 (sem_push_constant_double -> empty .)
    NOT_EQUAL_TO    reduce using rule 103 (sem_push_constant_double -> empty .)
    GREATER_THAN    reduce using rule 103 (sem_push_constant_double -> empty .)
    LESS_THAN       reduce using rule 103 (sem_push_constant_double -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 103 (sem_push_constant_double -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 103 (sem_push_constant_double -> empty .)
    AND             reduce using rule 103 (sem_push_constant_double -> empty .)
    OR              reduce using rule 103 (sem_push_constant_double -> empty .)
    SEMICOLON       reduce using rule 103 (sem_push_constant_double -> empty .)
    RIGHT_PAR       reduce using rule 103 (sem_push_constant_double -> empty .)
    COMMA           reduce using rule 103 (sem_push_constant_double -> empty .)
    RIGHT_BRACKET   reduce using rule 103 (sem_push_constant_double -> empty .)


state 160

    (21) var_cte -> cte_b sem_push_constant_bool .

    MULTIPLY        reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    DIVIDE          reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    PLUS            reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    MINUS           reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    IS_EQUAL_TO     reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    NOT_EQUAL_TO    reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    GREATER_THAN    reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    LESS_THAN       reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    AND             reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    OR              reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    SEMICOLON       reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    RIGHT_PAR       reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    COMMA           reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)
    RIGHT_BRACKET   reduce using rule 21 (var_cte -> cte_b sem_push_constant_bool .)


state 161

    (104) sem_push_constant_bool -> empty .

    MULTIPLY        reduce using rule 104 (sem_push_constant_bool -> empty .)
    DIVIDE          reduce using rule 104 (sem_push_constant_bool -> empty .)
    PLUS            reduce using rule 104 (sem_push_constant_bool -> empty .)
    MINUS           reduce using rule 104 (sem_push_constant_bool -> empty .)
    IS_EQUAL_TO     reduce using rule 104 (sem_push_constant_bool -> empty .)
    NOT_EQUAL_TO    reduce using rule 104 (sem_push_constant_bool -> empty .)
    GREATER_THAN    reduce using rule 104 (sem_push_constant_bool -> empty .)
    LESS_THAN       reduce using rule 104 (sem_push_constant_bool -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 104 (sem_push_constant_bool -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 104 (sem_push_constant_bool -> empty .)
    AND             reduce using rule 104 (sem_push_constant_bool -> empty .)
    OR              reduce using rule 104 (sem_push_constant_bool -> empty .)
    SEMICOLON       reduce using rule 104 (sem_push_constant_bool -> empty .)
    RIGHT_PAR       reduce using rule 104 (sem_push_constant_bool -> empty .)
    COMMA           reduce using rule 104 (sem_push_constant_bool -> empty .)
    RIGHT_BRACKET   reduce using rule 104 (sem_push_constant_bool -> empty .)


state 162

    (22) var_cte -> ID sem_push_operand . matrix
    (7) matrix -> . LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (8) matrix -> . empty
    (95) empty -> .

    LEFT_BRACKET    shift and go to state 128
    MULTIPLY        reduce using rule 95 (empty -> .)
    DIVIDE          reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    IS_EQUAL_TO     reduce using rule 95 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 95 (empty -> .)
    GREATER_THAN    reduce using rule 95 (empty -> .)
    LESS_THAN       reduce using rule 95 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    matrix                         shift and go to state 199
    empty                          shift and go to state 129

state 163

    (23) var_cte -> ID sem_check_function . LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub

    LEFT_PAR        shift and go to state 200


state 164

    (86) while_cycle -> WHILE sem_start_while LEFT_PAR . mega_exp RIGHT_PAR sem_end_condition block sem_end_while
    (57) mega_exp -> . hyper_exp mega_exp_1
    (61) hyper_exp -> . exp hyper_exp_1
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    mega_exp                       shift and go to state 201
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 165

    (87) read -> READ sem_push_operator LEFT_PAR . mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (57) mega_exp -> . hyper_exp mega_exp_1
    (61) hyper_exp -> . exp hyper_exp_1
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    mega_exp                       shift and go to state 202
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 166

    (88) write -> WRITE sem_push_operator LEFT_PAR . mega_exp RIGHT_PAR sem_read_write SEMICOLON
    (57) mega_exp -> . hyper_exp mega_exp_1
    (61) hyper_exp -> . exp hyper_exp_1
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    mega_exp                       shift and go to state 203
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 167

    (93) swap -> SWAP LEFT_PAR mega_exp . COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap

    COMMA           shift and go to state 204


state 168

    (90) multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID . sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix
    (101) sem_push_operand -> . empty
    (95) empty -> .

    COMMA           reduce using rule 95 (empty -> .)

    sem_push_operand               shift and go to state 205
    empty                          shift and go to state 132

state 169

    (91) add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID . sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix
    (101) sem_push_operand -> . empty
    (95) empty -> .

    COMMA           reduce using rule 95 (empty -> .)

    sem_push_operand               shift and go to state 206
    empty                          shift and go to state 132

state 170

    (92) subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID . sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix
    (101) sem_push_operand -> . empty
    (95) empty -> .

    COMMA           reduce using rule 95 (empty -> .)

    sem_push_operand               shift and go to state 207
    empty                          shift and go to state 132

state 171

    (89) p_matrix -> P_MATRIX LEFT_PAR ID . sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix
    (101) sem_push_operand -> . empty
    (95) empty -> .

    RIGHT_PAR       reduce using rule 95 (empty -> .)

    sem_push_operand               shift and go to state 208
    empty                          shift and go to state 132

state 172

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET . LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON

    LEFT_BRACKET    shift and go to state 209


state 173

    (12) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .

    FUNCTION        reduce using rule 12 (func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .)
    MAIN            reduce using rule 12 (func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .)


state 174

    (13) param_declaration -> var_type ID sem_add_param .
    (14) param_declaration -> var_type ID sem_add_param . COMMA param_declaration

    RIGHT_PAR       reduce using rule 13 (param_declaration -> var_type ID sem_add_param .)
    COMMA           shift and go to state 210


state 175

    (119) sem_add_param -> empty .

    COMMA           reduce using rule 119 (sem_add_param -> empty .)
    RIGHT_PAR       reduce using rule 119 (sem_add_param -> empty .)


state 176

    (46) var_assignment -> ID sem_push_operand matrix ASSIGN . sem_push_operator mega_exp sem_assign_value SEMICOLON
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 211
    empty                          shift and go to state 116

state 177

    (7) matrix -> LEFT_BRACKET sem_check_dim1 . exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    exp                            shift and go to state 212
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 178

    (133) sem_check_dim1 -> empty .

    LEFT_PAR        reduce using rule 133 (sem_check_dim1 -> empty .)
    PLUS            reduce using rule 133 (sem_check_dim1 -> empty .)
    MINUS           reduce using rule 133 (sem_check_dim1 -> empty .)
    CTE_I           reduce using rule 133 (sem_check_dim1 -> empty .)
    CTE_D           reduce using rule 133 (sem_check_dim1 -> empty .)
    ID              reduce using rule 133 (sem_check_dim1 -> empty .)
    TRUE            reduce using rule 133 (sem_check_dim1 -> empty .)
    FALSE           reduce using rule 133 (sem_check_dim1 -> empty .)


state 179

    (82) function_call -> ID sem_check_function LEFT_PAR sem_create_era . param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub
    (83) param_call -> . mega_exp sem_check_param
    (84) param_call -> . mega_exp sem_check_param COMMA param_call
    (85) param_call -> . empty
    (57) mega_exp -> . hyper_exp mega_exp_1
    (95) empty -> .
    (61) hyper_exp -> . exp hyper_exp_1
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 95 (empty -> .)
    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    param_call                     shift and go to state 213
    mega_exp                       shift and go to state 214
    empty                          shift and go to state 215
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 180

    (121) sem_create_era -> empty .

    LEFT_PAR        reduce using rule 121 (sem_create_era -> empty .)
    PLUS            reduce using rule 121 (sem_create_era -> empty .)
    MINUS           reduce using rule 121 (sem_create_era -> empty .)
    CTE_I           reduce using rule 121 (sem_create_era -> empty .)
    CTE_D           reduce using rule 121 (sem_create_era -> empty .)
    ID              reduce using rule 121 (sem_create_era -> empty .)
    TRUE            reduce using rule 121 (sem_create_era -> empty .)
    FALSE           reduce using rule 121 (sem_create_era -> empty .)
    RIGHT_PAR       reduce using rule 121 (sem_create_era -> empty .)


state 181

    (47) matrix_assignment -> MATRIX ID sem_push_operand ASSIGN . sem_push_operator matrix_construct sem_assign_matrix SEMICOLON
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_BRACE      reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 216
    empty                          shift and go to state 116

state 182

    (79) condition -> IF LEFT_PAR mega_exp RIGHT_PAR . sem_end_condition block condition_1 sem_fill_gotof
    (114) sem_end_condition -> . empty
    (95) empty -> .

    LEFT_BRACE      reduce using rule 95 (empty -> .)

    sem_end_condition              shift and go to state 217
    empty                          shift and go to state 218

state 183

    (56) return -> RETURN mega_exp sem_return_function SEMICOLON .

    ID              reduce using rule 56 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    MATRIX          reduce using rule 56 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    IF              reduce using rule 56 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    RETURN          reduce using rule 56 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    WHILE           reduce using rule 56 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    READ            reduce using rule 56 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    WRITE           reduce using rule 56 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    SWAP            reduce using rule 56 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    MULTIPLY_MATRIX reduce using rule 56 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    ADD_TO_MATRIX   reduce using rule 56 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    SUBTRACT_FROM_MATRIX reduce using rule 56 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    P_MATRIX        reduce using rule 56 (return -> RETURN mega_exp sem_return_function SEMICOLON .)
    RIGHT_BRACE     reduce using rule 56 (return -> RETURN mega_exp sem_return_function SEMICOLON .)


state 184

    (58) mega_exp_1 -> AND sem_push_operator . mega_exp sem_top_logical
    (57) mega_exp -> . hyper_exp mega_exp_1
    (61) hyper_exp -> . exp hyper_exp_1
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    mega_exp                       shift and go to state 219
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 185

    (59) mega_exp_1 -> OR sem_push_operator . mega_exp sem_top_logical
    (57) mega_exp -> . hyper_exp mega_exp_1
    (61) hyper_exp -> . exp hyper_exp_1
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    mega_exp                       shift and go to state 220
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 186

    (62) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator . exp sem_top_relational
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    exp                            shift and go to state 221
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 187

    (63) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator . exp sem_top_relational
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    exp                            shift and go to state 222
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 188

    (64) hyper_exp_1 -> GREATER_THAN sem_push_operator . exp sem_top_relational
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    exp                            shift and go to state 223
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 189

    (65) hyper_exp_1 -> LESS_THAN sem_push_operator . exp sem_top_relational
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    exp                            shift and go to state 224
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 190

    (66) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator . exp sem_top_relational
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    exp                            shift and go to state 225
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 191

    (67) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator . exp sem_top_relational
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    exp                            shift and go to state 226
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 192

    (70) exp -> term sem_top_term PLUS . sem_push_operator exp
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 227
    empty                          shift and go to state 116

state 193

    (71) exp -> term sem_top_term MINUS . sem_push_operator exp
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 228
    empty                          shift and go to state 116

state 194

    (77) factor -> PLUS sem_push_operator var_cte .

    MULTIPLY        reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    DIVIDE          reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    PLUS            reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    MINUS           reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    IS_EQUAL_TO     reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    NOT_EQUAL_TO    reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    GREATER_THAN    reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    LESS_THAN       reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    AND             reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    OR              reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    SEMICOLON       reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    RIGHT_PAR       reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    COMMA           reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)
    RIGHT_BRACKET   reduce using rule 77 (factor -> PLUS sem_push_operator var_cte .)


state 195

    (78) factor -> MINUS sem_push_operator var_cte .

    MULTIPLY        reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    DIVIDE          reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    PLUS            reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    MINUS           reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    IS_EQUAL_TO     reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    NOT_EQUAL_TO    reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    GREATER_THAN    reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    LESS_THAN       reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    AND             reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    OR              reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    SEMICOLON       reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    RIGHT_PAR       reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    COMMA           reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)
    RIGHT_BRACKET   reduce using rule 78 (factor -> MINUS sem_push_operator var_cte .)


state 196

    (73) term -> factor sem_top_factor MULTIPLY . sem_push_operator term
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 229
    empty                          shift and go to state 116

state 197

    (74) term -> factor sem_top_factor DIVIDE . sem_push_operator term
    (100) sem_push_operator -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_push_operator              shift and go to state 230
    empty                          shift and go to state 116

state 198

    (75) factor -> LEFT_PAR sem_false_bottom_begin mega_exp . RIGHT_PAR sem_false_bottom_end

    RIGHT_PAR       shift and go to state 231


state 199

    (22) var_cte -> ID sem_push_operand matrix .

    MULTIPLY        reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    DIVIDE          reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    PLUS            reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    MINUS           reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    IS_EQUAL_TO     reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    NOT_EQUAL_TO    reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    GREATER_THAN    reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    LESS_THAN       reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    AND             reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    OR              reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    SEMICOLON       reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    RIGHT_PAR       reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    COMMA           reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)
    RIGHT_BRACKET   reduce using rule 22 (var_cte -> ID sem_push_operand matrix .)


state 200

    (23) var_cte -> ID sem_check_function LEFT_PAR . sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (107) sem_false_bottom_begin -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)

    sem_false_bottom_begin         shift and go to state 232
    empty                          shift and go to state 155

state 201

    (86) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp . RIGHT_PAR sem_end_condition block sem_end_while

    RIGHT_PAR       shift and go to state 233


state 202

    (87) read -> READ sem_push_operator LEFT_PAR mega_exp . RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_PAR       shift and go to state 234


state 203

    (88) write -> WRITE sem_push_operator LEFT_PAR mega_exp . RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_PAR       shift and go to state 235


state 204

    (93) swap -> SWAP LEFT_PAR mega_exp COMMA . mega_exp RIGHT_PAR SEMICOLON sem_swap
    (57) mega_exp -> . hyper_exp mega_exp_1
    (61) hyper_exp -> . exp hyper_exp_1
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    mega_exp                       shift and go to state 236
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 205

    (90) multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand . COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix

    COMMA           shift and go to state 237


state 206

    (91) add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand . COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix

    COMMA           shift and go to state 238


state 207

    (92) subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand . COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix

    COMMA           shift and go to state 239


state 208

    (89) p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand . RIGHT_PAR SEMICOLON sem_print_matrix

    RIGHT_PAR       shift and go to state 240


state 209

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET . CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON

    CTE_I           shift and go to state 241


state 210

    (14) param_declaration -> var_type ID sem_add_param COMMA . param_declaration
    (13) param_declaration -> . var_type ID sem_add_param
    (14) param_declaration -> . var_type ID sem_add_param COMMA param_declaration
    (15) param_declaration -> . empty
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type
    (95) empty -> .

    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    BOOL            shift and go to state 12
    RIGHT_PAR       reduce using rule 95 (empty -> .)

    var_type                       shift and go to state 89
    param_declaration              shift and go to state 242
    empty                          shift and go to state 90

state 211

    (46) var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator . mega_exp sem_assign_value SEMICOLON
    (57) mega_exp -> . hyper_exp mega_exp_1
    (61) hyper_exp -> . exp hyper_exp_1
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    mega_exp                       shift and go to state 243
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 212

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp . RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2

    RIGHT_BRACKET   shift and go to state 244


state 213

    (82) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call . RIGHT_PAR sem_count_params SEMICOLON sem_gosub

    RIGHT_PAR       shift and go to state 245


state 214

    (83) param_call -> mega_exp . sem_check_param
    (84) param_call -> mega_exp . sem_check_param COMMA param_call
    (122) sem_check_param -> . empty
    (95) empty -> .

    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)

    sem_check_param                shift and go to state 246
    empty                          shift and go to state 247

state 215

    (85) param_call -> empty .

    RIGHT_PAR       reduce using rule 85 (param_call -> empty .)


state 216

    (47) matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator . matrix_construct sem_assign_matrix SEMICOLON
    (48) matrix_construct -> . LEFT_BRACE rows RIGHT_BRACE

    LEFT_BRACE      shift and go to state 249

    matrix_construct               shift and go to state 248

state 217

    (79) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition . block condition_1 sem_fill_gotof
    (30) block -> . LEFT_BRACE declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 44

    block                          shift and go to state 250

state 218

    (114) sem_end_condition -> empty .

    LEFT_BRACE      reduce using rule 114 (sem_end_condition -> empty .)


state 219

    (58) mega_exp_1 -> AND sem_push_operator mega_exp . sem_top_logical
    (112) sem_top_logical -> .

    SEMICOLON       reduce using rule 112 (sem_top_logical -> .)
    RIGHT_PAR       reduce using rule 112 (sem_top_logical -> .)
    COMMA           reduce using rule 112 (sem_top_logical -> .)

    sem_top_logical                shift and go to state 251

state 220

    (59) mega_exp_1 -> OR sem_push_operator mega_exp . sem_top_logical
    (112) sem_top_logical -> .

    SEMICOLON       reduce using rule 112 (sem_top_logical -> .)
    RIGHT_PAR       reduce using rule 112 (sem_top_logical -> .)
    COMMA           reduce using rule 112 (sem_top_logical -> .)

    sem_top_logical                shift and go to state 252

state 221

    (62) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp . sem_top_relational
    (113) sem_top_relational -> .

    AND             reduce using rule 113 (sem_top_relational -> .)
    OR              reduce using rule 113 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 113 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 113 (sem_top_relational -> .)
    COMMA           reduce using rule 113 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 253

state 222

    (63) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp . sem_top_relational
    (113) sem_top_relational -> .

    AND             reduce using rule 113 (sem_top_relational -> .)
    OR              reduce using rule 113 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 113 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 113 (sem_top_relational -> .)
    COMMA           reduce using rule 113 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 254

state 223

    (64) hyper_exp_1 -> GREATER_THAN sem_push_operator exp . sem_top_relational
    (113) sem_top_relational -> .

    AND             reduce using rule 113 (sem_top_relational -> .)
    OR              reduce using rule 113 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 113 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 113 (sem_top_relational -> .)
    COMMA           reduce using rule 113 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 255

state 224

    (65) hyper_exp_1 -> LESS_THAN sem_push_operator exp . sem_top_relational
    (113) sem_top_relational -> .

    AND             reduce using rule 113 (sem_top_relational -> .)
    OR              reduce using rule 113 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 113 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 113 (sem_top_relational -> .)
    COMMA           reduce using rule 113 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 256

state 225

    (66) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp . sem_top_relational
    (113) sem_top_relational -> .

    AND             reduce using rule 113 (sem_top_relational -> .)
    OR              reduce using rule 113 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 113 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 113 (sem_top_relational -> .)
    COMMA           reduce using rule 113 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 257

state 226

    (67) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp . sem_top_relational
    (113) sem_top_relational -> .

    AND             reduce using rule 113 (sem_top_relational -> .)
    OR              reduce using rule 113 (sem_top_relational -> .)
    SEMICOLON       reduce using rule 113 (sem_top_relational -> .)
    RIGHT_PAR       reduce using rule 113 (sem_top_relational -> .)
    COMMA           reduce using rule 113 (sem_top_relational -> .)

    sem_top_relational             shift and go to state 258

state 227

    (70) exp -> term sem_top_term PLUS sem_push_operator . exp
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    term                           shift and go to state 101
    exp                            shift and go to state 259
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 228

    (71) exp -> term sem_top_term MINUS sem_push_operator . exp
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    term                           shift and go to state 101
    exp                            shift and go to state 260
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 229

    (73) term -> factor sem_top_factor MULTIPLY sem_push_operator . term
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    factor                         shift and go to state 104
    term                           shift and go to state 261
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 230

    (74) term -> factor sem_top_factor DIVIDE sem_push_operator . term
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    factor                         shift and go to state 104
    term                           shift and go to state 262
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 231

    (75) factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR . sem_false_bottom_end
    (108) sem_false_bottom_end -> . empty
    (95) empty -> .

    MULTIPLY        reduce using rule 95 (empty -> .)
    DIVIDE          reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    IS_EQUAL_TO     reduce using rule 95 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 95 (empty -> .)
    GREATER_THAN    reduce using rule 95 (empty -> .)
    LESS_THAN       reduce using rule 95 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    sem_false_bottom_end           shift and go to state 263
    empty                          shift and go to state 264

state 232

    (23) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin . sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (121) sem_create_era -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)

    sem_create_era                 shift and go to state 265
    empty                          shift and go to state 180

state 233

    (86) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR . sem_end_condition block sem_end_while
    (114) sem_end_condition -> . empty
    (95) empty -> .

    LEFT_BRACE      reduce using rule 95 (empty -> .)

    sem_end_condition              shift and go to state 266
    empty                          shift and go to state 218

state 234

    (87) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR . sem_read_write SEMICOLON
    (110) sem_read_write -> . empty
    (95) empty -> .

    SEMICOLON       reduce using rule 95 (empty -> .)

    sem_read_write                 shift and go to state 267
    empty                          shift and go to state 268

state 235

    (88) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR . sem_read_write SEMICOLON
    (110) sem_read_write -> . empty
    (95) empty -> .

    SEMICOLON       reduce using rule 95 (empty -> .)

    sem_read_write                 shift and go to state 269
    empty                          shift and go to state 268

state 236

    (93) swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp . RIGHT_PAR SEMICOLON sem_swap

    RIGHT_PAR       shift and go to state 270


state 237

    (90) multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA . CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix

    CTE_I           shift and go to state 271


state 238

    (91) add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA . CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix

    CTE_I           shift and go to state 272


state 239

    (92) subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA . CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix

    CTE_I           shift and go to state 273


state 240

    (89) p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR . SEMICOLON sem_print_matrix

    SEMICOLON       shift and go to state 274


state 241

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I . sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON
    (131) sem_get_dim2 -> . empty
    (95) empty -> .

    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    sem_get_dim2                   shift and go to state 275
    empty                          shift and go to state 276

state 242

    (14) param_declaration -> var_type ID sem_add_param COMMA param_declaration .

    RIGHT_PAR       reduce using rule 14 (param_declaration -> var_type ID sem_add_param COMMA param_declaration .)


state 243

    (46) var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp . sem_assign_value SEMICOLON
    (109) sem_assign_value -> . empty
    (95) empty -> .

    SEMICOLON       reduce using rule 95 (empty -> .)

    sem_assign_value               shift and go to state 277
    empty                          shift and go to state 278

state 244

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET . sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (134) sem_ver_dim1 -> . empty
    (95) empty -> .

    LEFT_BRACKET    reduce using rule 95 (empty -> .)

    sem_ver_dim1                   shift and go to state 279
    empty                          shift and go to state 280

state 245

    (82) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR . sem_count_params SEMICOLON sem_gosub
    (123) sem_count_params -> . empty
    (95) empty -> .

    SEMICOLON       reduce using rule 95 (empty -> .)

    sem_count_params               shift and go to state 281
    empty                          shift and go to state 282

state 246

    (83) param_call -> mega_exp sem_check_param .
    (84) param_call -> mega_exp sem_check_param . COMMA param_call

    RIGHT_PAR       reduce using rule 83 (param_call -> mega_exp sem_check_param .)
    COMMA           shift and go to state 283


state 247

    (122) sem_check_param -> empty .

    COMMA           reduce using rule 122 (sem_check_param -> empty .)
    RIGHT_PAR       reduce using rule 122 (sem_check_param -> empty .)


state 248

    (47) matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct . sem_assign_matrix SEMICOLON
    (137) sem_assign_matrix -> . empty
    (95) empty -> .

    SEMICOLON       reduce using rule 95 (empty -> .)

    sem_assign_matrix              shift and go to state 284
    empty                          shift and go to state 285

state 249

    (48) matrix_construct -> LEFT_BRACE . rows RIGHT_BRACE
    (49) rows -> . row
    (50) rows -> . row COMMA rows
    (51) row -> . LEFT_BRACKET col RIGHT_BRACKET sem_push_row sem_clear_row

    LEFT_BRACKET    shift and go to state 288

    rows                           shift and go to state 286
    row                            shift and go to state 287

state 250

    (79) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block . condition_1 sem_fill_gotof
    (80) condition_1 -> . ELSE sem_else_condition block
    (81) condition_1 -> . empty
    (95) empty -> .

    ELSE            shift and go to state 290
    ID              reduce using rule 95 (empty -> .)
    MATRIX          reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    SWAP            reduce using rule 95 (empty -> .)
    MULTIPLY_MATRIX reduce using rule 95 (empty -> .)
    ADD_TO_MATRIX   reduce using rule 95 (empty -> .)
    SUBTRACT_FROM_MATRIX reduce using rule 95 (empty -> .)
    P_MATRIX        reduce using rule 95 (empty -> .)
    RIGHT_BRACE     reduce using rule 95 (empty -> .)

    condition_1                    shift and go to state 289
    empty                          shift and go to state 291

state 251

    (58) mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .

    SEMICOLON       reduce using rule 58 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)
    RIGHT_PAR       reduce using rule 58 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)
    COMMA           reduce using rule 58 (mega_exp_1 -> AND sem_push_operator mega_exp sem_top_logical .)


state 252

    (59) mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .

    SEMICOLON       reduce using rule 59 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)
    RIGHT_PAR       reduce using rule 59 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)
    COMMA           reduce using rule 59 (mega_exp_1 -> OR sem_push_operator mega_exp sem_top_logical .)


state 253

    (62) hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 62 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 62 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 62 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 62 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 62 (hyper_exp_1 -> IS_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 254

    (63) hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 63 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 63 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 63 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 63 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 63 (hyper_exp_1 -> NOT_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 255

    (64) hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .

    AND             reduce using rule 64 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 64 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 64 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 64 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 64 (hyper_exp_1 -> GREATER_THAN sem_push_operator exp sem_top_relational .)


state 256

    (65) hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .

    AND             reduce using rule 65 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 65 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 65 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 65 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 65 (hyper_exp_1 -> LESS_THAN sem_push_operator exp sem_top_relational .)


state 257

    (66) hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 66 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 66 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 66 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 66 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 66 (hyper_exp_1 -> GREATER_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 258

    (67) hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .

    AND             reduce using rule 67 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    OR              reduce using rule 67 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    SEMICOLON       reduce using rule 67 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    RIGHT_PAR       reduce using rule 67 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)
    COMMA           reduce using rule 67 (hyper_exp_1 -> LESS_THAN_OR_EQUAL_TO sem_push_operator exp sem_top_relational .)


state 259

    (70) exp -> term sem_top_term PLUS sem_push_operator exp .

    IS_EQUAL_TO     reduce using rule 70 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    NOT_EQUAL_TO    reduce using rule 70 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    GREATER_THAN    reduce using rule 70 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    LESS_THAN       reduce using rule 70 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 70 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 70 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    AND             reduce using rule 70 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    OR              reduce using rule 70 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    SEMICOLON       reduce using rule 70 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    RIGHT_PAR       reduce using rule 70 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    COMMA           reduce using rule 70 (exp -> term sem_top_term PLUS sem_push_operator exp .)
    RIGHT_BRACKET   reduce using rule 70 (exp -> term sem_top_term PLUS sem_push_operator exp .)


state 260

    (71) exp -> term sem_top_term MINUS sem_push_operator exp .

    IS_EQUAL_TO     reduce using rule 71 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    NOT_EQUAL_TO    reduce using rule 71 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    GREATER_THAN    reduce using rule 71 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    LESS_THAN       reduce using rule 71 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 71 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 71 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    AND             reduce using rule 71 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    OR              reduce using rule 71 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    SEMICOLON       reduce using rule 71 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    RIGHT_PAR       reduce using rule 71 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    COMMA           reduce using rule 71 (exp -> term sem_top_term MINUS sem_push_operator exp .)
    RIGHT_BRACKET   reduce using rule 71 (exp -> term sem_top_term MINUS sem_push_operator exp .)


state 261

    (73) term -> factor sem_top_factor MULTIPLY sem_push_operator term .

    PLUS            reduce using rule 73 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    MINUS           reduce using rule 73 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    IS_EQUAL_TO     reduce using rule 73 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    NOT_EQUAL_TO    reduce using rule 73 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    GREATER_THAN    reduce using rule 73 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    LESS_THAN       reduce using rule 73 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 73 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 73 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    AND             reduce using rule 73 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    OR              reduce using rule 73 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    SEMICOLON       reduce using rule 73 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    RIGHT_PAR       reduce using rule 73 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    COMMA           reduce using rule 73 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)
    RIGHT_BRACKET   reduce using rule 73 (term -> factor sem_top_factor MULTIPLY sem_push_operator term .)


state 262

    (74) term -> factor sem_top_factor DIVIDE sem_push_operator term .

    PLUS            reduce using rule 74 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    MINUS           reduce using rule 74 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    IS_EQUAL_TO     reduce using rule 74 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    NOT_EQUAL_TO    reduce using rule 74 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    GREATER_THAN    reduce using rule 74 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    LESS_THAN       reduce using rule 74 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 74 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 74 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    AND             reduce using rule 74 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    OR              reduce using rule 74 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    SEMICOLON       reduce using rule 74 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    RIGHT_PAR       reduce using rule 74 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    COMMA           reduce using rule 74 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)
    RIGHT_BRACKET   reduce using rule 74 (term -> factor sem_top_factor DIVIDE sem_push_operator term .)


state 263

    (75) factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .

    MULTIPLY        reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    DIVIDE          reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    PLUS            reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    MINUS           reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    IS_EQUAL_TO     reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    NOT_EQUAL_TO    reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    GREATER_THAN    reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    LESS_THAN       reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    AND             reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    OR              reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    SEMICOLON       reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    RIGHT_PAR       reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    COMMA           reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)
    RIGHT_BRACKET   reduce using rule 75 (factor -> LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end .)


state 264

    (108) sem_false_bottom_end -> empty .

    MULTIPLY        reduce using rule 108 (sem_false_bottom_end -> empty .)
    DIVIDE          reduce using rule 108 (sem_false_bottom_end -> empty .)
    PLUS            reduce using rule 108 (sem_false_bottom_end -> empty .)
    MINUS           reduce using rule 108 (sem_false_bottom_end -> empty .)
    IS_EQUAL_TO     reduce using rule 108 (sem_false_bottom_end -> empty .)
    NOT_EQUAL_TO    reduce using rule 108 (sem_false_bottom_end -> empty .)
    GREATER_THAN    reduce using rule 108 (sem_false_bottom_end -> empty .)
    LESS_THAN       reduce using rule 108 (sem_false_bottom_end -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 108 (sem_false_bottom_end -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 108 (sem_false_bottom_end -> empty .)
    AND             reduce using rule 108 (sem_false_bottom_end -> empty .)
    OR              reduce using rule 108 (sem_false_bottom_end -> empty .)
    SEMICOLON       reduce using rule 108 (sem_false_bottom_end -> empty .)
    RIGHT_PAR       reduce using rule 108 (sem_false_bottom_end -> empty .)
    COMMA           reduce using rule 108 (sem_false_bottom_end -> empty .)
    RIGHT_BRACKET   reduce using rule 108 (sem_false_bottom_end -> empty .)


state 265

    (23) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era . param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (83) param_call -> . mega_exp sem_check_param
    (84) param_call -> . mega_exp sem_check_param COMMA param_call
    (85) param_call -> . empty
    (57) mega_exp -> . hyper_exp mega_exp_1
    (95) empty -> .
    (61) hyper_exp -> . exp hyper_exp_1
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 95 (empty -> .)
    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    param_call                     shift and go to state 292
    mega_exp                       shift and go to state 214
    empty                          shift and go to state 215
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 266

    (86) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition . block sem_end_while
    (30) block -> . LEFT_BRACE declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 44

    block                          shift and go to state 293

state 267

    (87) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write . SEMICOLON

    SEMICOLON       shift and go to state 294


state 268

    (110) sem_read_write -> empty .

    SEMICOLON       reduce using rule 110 (sem_read_write -> empty .)


state 269

    (88) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write . SEMICOLON

    SEMICOLON       shift and go to state 295


state 270

    (93) swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR . SEMICOLON sem_swap

    SEMICOLON       shift and go to state 296


state 271

    (90) multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I . sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix
    (102) sem_push_constant_int -> . empty
    (95) empty -> .

    RIGHT_PAR       reduce using rule 95 (empty -> .)

    sem_push_constant_int          shift and go to state 297
    empty                          shift and go to state 157

state 272

    (91) add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I . sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix
    (102) sem_push_constant_int -> . empty
    (95) empty -> .

    RIGHT_PAR       reduce using rule 95 (empty -> .)

    sem_push_constant_int          shift and go to state 298
    empty                          shift and go to state 157

state 273

    (92) subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I . sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix
    (102) sem_push_constant_int -> . empty
    (95) empty -> .

    RIGHT_PAR       reduce using rule 95 (empty -> .)

    sem_push_constant_int          shift and go to state 299
    empty                          shift and go to state 157

state 274

    (89) p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON . sem_print_matrix
    (142) sem_print_matrix -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)
    MATRIX          reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    SWAP            reduce using rule 95 (empty -> .)
    MULTIPLY_MATRIX reduce using rule 95 (empty -> .)
    ADD_TO_MATRIX   reduce using rule 95 (empty -> .)
    SUBTRACT_FROM_MATRIX reduce using rule 95 (empty -> .)
    P_MATRIX        reduce using rule 95 (empty -> .)
    RIGHT_BRACE     reduce using rule 95 (empty -> .)

    sem_print_matrix               shift and go to state 300
    empty                          shift and go to state 301

state 275

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 . RIGHT_BRACKET sem_add_matrix SEMICOLON

    RIGHT_BRACKET   shift and go to state 302


state 276

    (131) sem_get_dim2 -> empty .

    RIGHT_BRACKET   reduce using rule 131 (sem_get_dim2 -> empty .)


state 277

    (46) var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value . SEMICOLON

    SEMICOLON       shift and go to state 303


state 278

    (109) sem_assign_value -> empty .

    SEMICOLON       reduce using rule 109 (sem_assign_value -> empty .)


state 279

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 . LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2

    LEFT_BRACKET    shift and go to state 304


state 280

    (134) sem_ver_dim1 -> empty .

    LEFT_BRACKET    reduce using rule 134 (sem_ver_dim1 -> empty .)


state 281

    (82) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params . SEMICOLON sem_gosub

    SEMICOLON       shift and go to state 305


state 282

    (123) sem_count_params -> empty .

    SEMICOLON       reduce using rule 123 (sem_count_params -> empty .)
    MULTIPLY        reduce using rule 123 (sem_count_params -> empty .)
    DIVIDE          reduce using rule 123 (sem_count_params -> empty .)
    PLUS            reduce using rule 123 (sem_count_params -> empty .)
    MINUS           reduce using rule 123 (sem_count_params -> empty .)
    IS_EQUAL_TO     reduce using rule 123 (sem_count_params -> empty .)
    NOT_EQUAL_TO    reduce using rule 123 (sem_count_params -> empty .)
    GREATER_THAN    reduce using rule 123 (sem_count_params -> empty .)
    LESS_THAN       reduce using rule 123 (sem_count_params -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 123 (sem_count_params -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 123 (sem_count_params -> empty .)
    AND             reduce using rule 123 (sem_count_params -> empty .)
    OR              reduce using rule 123 (sem_count_params -> empty .)
    RIGHT_PAR       reduce using rule 123 (sem_count_params -> empty .)
    COMMA           reduce using rule 123 (sem_count_params -> empty .)
    RIGHT_BRACKET   reduce using rule 123 (sem_count_params -> empty .)


state 283

    (84) param_call -> mega_exp sem_check_param COMMA . param_call
    (83) param_call -> . mega_exp sem_check_param
    (84) param_call -> . mega_exp sem_check_param COMMA param_call
    (85) param_call -> . empty
    (57) mega_exp -> . hyper_exp mega_exp_1
    (95) empty -> .
    (61) hyper_exp -> . exp hyper_exp_1
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    RIGHT_PAR       reduce using rule 95 (empty -> .)
    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    mega_exp                       shift and go to state 214
    param_call                     shift and go to state 306
    empty                          shift and go to state 215
    hyper_exp                      shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 284

    (47) matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix . SEMICOLON

    SEMICOLON       shift and go to state 307


state 285

    (137) sem_assign_matrix -> empty .

    SEMICOLON       reduce using rule 137 (sem_assign_matrix -> empty .)


state 286

    (48) matrix_construct -> LEFT_BRACE rows . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 308


state 287

    (49) rows -> row .
    (50) rows -> row . COMMA rows

    RIGHT_BRACE     reduce using rule 49 (rows -> row .)
    COMMA           shift and go to state 309


state 288

    (51) row -> LEFT_BRACKET . col RIGHT_BRACKET sem_push_row sem_clear_row
    (52) col -> . CTE_I sem_push_col col
    (53) col -> . CTE_B sem_push_col col
    (54) col -> . COMMA col
    (55) col -> . empty
    (95) empty -> .

    CTE_I           shift and go to state 311
    CTE_B           shift and go to state 312
    COMMA           shift and go to state 313
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    col                            shift and go to state 310
    empty                          shift and go to state 314

state 289

    (79) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 . sem_fill_gotof
    (115) sem_fill_gotof -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)
    MATRIX          reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    SWAP            reduce using rule 95 (empty -> .)
    MULTIPLY_MATRIX reduce using rule 95 (empty -> .)
    ADD_TO_MATRIX   reduce using rule 95 (empty -> .)
    SUBTRACT_FROM_MATRIX reduce using rule 95 (empty -> .)
    P_MATRIX        reduce using rule 95 (empty -> .)
    RIGHT_BRACE     reduce using rule 95 (empty -> .)

    sem_fill_gotof                 shift and go to state 315
    empty                          shift and go to state 316

state 290

    (80) condition_1 -> ELSE . sem_else_condition block
    (116) sem_else_condition -> . empty
    (95) empty -> .

    LEFT_BRACE      reduce using rule 95 (empty -> .)

    sem_else_condition             shift and go to state 317
    empty                          shift and go to state 318

state 291

    (81) condition_1 -> empty .

    ID              reduce using rule 81 (condition_1 -> empty .)
    MATRIX          reduce using rule 81 (condition_1 -> empty .)
    IF              reduce using rule 81 (condition_1 -> empty .)
    RETURN          reduce using rule 81 (condition_1 -> empty .)
    WHILE           reduce using rule 81 (condition_1 -> empty .)
    READ            reduce using rule 81 (condition_1 -> empty .)
    WRITE           reduce using rule 81 (condition_1 -> empty .)
    SWAP            reduce using rule 81 (condition_1 -> empty .)
    MULTIPLY_MATRIX reduce using rule 81 (condition_1 -> empty .)
    ADD_TO_MATRIX   reduce using rule 81 (condition_1 -> empty .)
    SUBTRACT_FROM_MATRIX reduce using rule 81 (condition_1 -> empty .)
    P_MATRIX        reduce using rule 81 (condition_1 -> empty .)
    RIGHT_BRACE     reduce using rule 81 (condition_1 -> empty .)


state 292

    (23) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call . RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub

    RIGHT_PAR       shift and go to state 319


state 293

    (86) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block . sem_end_while
    (118) sem_end_while -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)
    MATRIX          reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    SWAP            reduce using rule 95 (empty -> .)
    MULTIPLY_MATRIX reduce using rule 95 (empty -> .)
    ADD_TO_MATRIX   reduce using rule 95 (empty -> .)
    SUBTRACT_FROM_MATRIX reduce using rule 95 (empty -> .)
    P_MATRIX        reduce using rule 95 (empty -> .)
    RIGHT_BRACE     reduce using rule 95 (empty -> .)

    sem_end_while                  shift and go to state 320
    empty                          shift and go to state 321

state 294

    (87) read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .

    ID              reduce using rule 87 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    MATRIX          reduce using rule 87 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    IF              reduce using rule 87 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RETURN          reduce using rule 87 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WHILE           reduce using rule 87 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    READ            reduce using rule 87 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WRITE           reduce using rule 87 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    SWAP            reduce using rule 87 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    MULTIPLY_MATRIX reduce using rule 87 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    ADD_TO_MATRIX   reduce using rule 87 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    SUBTRACT_FROM_MATRIX reduce using rule 87 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    P_MATRIX        reduce using rule 87 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RIGHT_BRACE     reduce using rule 87 (read -> READ sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)


state 295

    (88) write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .

    ID              reduce using rule 88 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    MATRIX          reduce using rule 88 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    IF              reduce using rule 88 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RETURN          reduce using rule 88 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WHILE           reduce using rule 88 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    READ            reduce using rule 88 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    WRITE           reduce using rule 88 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    SWAP            reduce using rule 88 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    MULTIPLY_MATRIX reduce using rule 88 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    ADD_TO_MATRIX   reduce using rule 88 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    SUBTRACT_FROM_MATRIX reduce using rule 88 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    P_MATRIX        reduce using rule 88 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)
    RIGHT_BRACE     reduce using rule 88 (write -> WRITE sem_push_operator LEFT_PAR mega_exp RIGHT_PAR sem_read_write SEMICOLON .)


state 296

    (93) swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON . sem_swap
    (145) sem_swap -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)
    MATRIX          reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    SWAP            reduce using rule 95 (empty -> .)
    MULTIPLY_MATRIX reduce using rule 95 (empty -> .)
    ADD_TO_MATRIX   reduce using rule 95 (empty -> .)
    SUBTRACT_FROM_MATRIX reduce using rule 95 (empty -> .)
    P_MATRIX        reduce using rule 95 (empty -> .)
    RIGHT_BRACE     reduce using rule 95 (empty -> .)

    sem_swap                       shift and go to state 322
    empty                          shift and go to state 323

state 297

    (90) multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int . RIGHT_PAR SEMICOLON sem_multiply_matrix

    RIGHT_PAR       shift and go to state 324


state 298

    (91) add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int . RIGHT_PAR SEMICOLON sem_add_to_matrix

    RIGHT_PAR       shift and go to state 325


state 299

    (92) subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int . RIGHT_PAR SEMICOLON sem_subtract_from_matrix

    RIGHT_PAR       shift and go to state 326


state 300

    (89) p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix .

    ID              reduce using rule 89 (p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix .)
    MATRIX          reduce using rule 89 (p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix .)
    IF              reduce using rule 89 (p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix .)
    RETURN          reduce using rule 89 (p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix .)
    WHILE           reduce using rule 89 (p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix .)
    READ            reduce using rule 89 (p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix .)
    WRITE           reduce using rule 89 (p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix .)
    SWAP            reduce using rule 89 (p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix .)
    MULTIPLY_MATRIX reduce using rule 89 (p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix .)
    ADD_TO_MATRIX   reduce using rule 89 (p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix .)
    SUBTRACT_FROM_MATRIX reduce using rule 89 (p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix .)
    P_MATRIX        reduce using rule 89 (p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix .)
    RIGHT_BRACE     reduce using rule 89 (p_matrix -> P_MATRIX LEFT_PAR ID sem_push_operand RIGHT_PAR SEMICOLON sem_print_matrix .)


state 301

    (142) sem_print_matrix -> empty .

    ID              reduce using rule 142 (sem_print_matrix -> empty .)
    MATRIX          reduce using rule 142 (sem_print_matrix -> empty .)
    IF              reduce using rule 142 (sem_print_matrix -> empty .)
    RETURN          reduce using rule 142 (sem_print_matrix -> empty .)
    WHILE           reduce using rule 142 (sem_print_matrix -> empty .)
    READ            reduce using rule 142 (sem_print_matrix -> empty .)
    WRITE           reduce using rule 142 (sem_print_matrix -> empty .)
    SWAP            reduce using rule 142 (sem_print_matrix -> empty .)
    MULTIPLY_MATRIX reduce using rule 142 (sem_print_matrix -> empty .)
    ADD_TO_MATRIX   reduce using rule 142 (sem_print_matrix -> empty .)
    SUBTRACT_FROM_MATRIX reduce using rule 142 (sem_print_matrix -> empty .)
    P_MATRIX        reduce using rule 142 (sem_print_matrix -> empty .)
    RIGHT_BRACE     reduce using rule 142 (sem_print_matrix -> empty .)


state 302

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET . sem_add_matrix SEMICOLON
    (132) sem_add_matrix -> . empty
    (95) empty -> .

    SEMICOLON       reduce using rule 95 (empty -> .)

    sem_add_matrix                 shift and go to state 327
    empty                          shift and go to state 328

state 303

    (46) var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .

    ID              reduce using rule 46 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    MATRIX          reduce using rule 46 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    IF              reduce using rule 46 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    RETURN          reduce using rule 46 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    WHILE           reduce using rule 46 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    READ            reduce using rule 46 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    WRITE           reduce using rule 46 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    SWAP            reduce using rule 46 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    MULTIPLY_MATRIX reduce using rule 46 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    ADD_TO_MATRIX   reduce using rule 46 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    SUBTRACT_FROM_MATRIX reduce using rule 46 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    P_MATRIX        reduce using rule 46 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)
    RIGHT_BRACE     reduce using rule 46 (var_assignment -> ID sem_push_operand matrix ASSIGN sem_push_operator mega_exp sem_assign_value SEMICOLON .)


state 304

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET . sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2
    (135) sem_check_dim2 -> . empty
    (95) empty -> .

    LEFT_PAR        reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    CTE_I           reduce using rule 95 (empty -> .)
    CTE_D           reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    TRUE            reduce using rule 95 (empty -> .)
    FALSE           reduce using rule 95 (empty -> .)

    sem_check_dim2                 shift and go to state 329
    empty                          shift and go to state 330

state 305

    (82) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON . sem_gosub
    (124) sem_gosub -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)
    MATRIX          reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    SWAP            reduce using rule 95 (empty -> .)
    MULTIPLY_MATRIX reduce using rule 95 (empty -> .)
    ADD_TO_MATRIX   reduce using rule 95 (empty -> .)
    SUBTRACT_FROM_MATRIX reduce using rule 95 (empty -> .)
    P_MATRIX        reduce using rule 95 (empty -> .)
    RIGHT_BRACE     reduce using rule 95 (empty -> .)

    sem_gosub                      shift and go to state 331
    empty                          shift and go to state 332

state 306

    (84) param_call -> mega_exp sem_check_param COMMA param_call .

    RIGHT_PAR       reduce using rule 84 (param_call -> mega_exp sem_check_param COMMA param_call .)


state 307

    (47) matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .

    ID              reduce using rule 47 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    MATRIX          reduce using rule 47 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    IF              reduce using rule 47 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    RETURN          reduce using rule 47 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    WHILE           reduce using rule 47 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    READ            reduce using rule 47 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    WRITE           reduce using rule 47 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    SWAP            reduce using rule 47 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    MULTIPLY_MATRIX reduce using rule 47 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    ADD_TO_MATRIX   reduce using rule 47 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    SUBTRACT_FROM_MATRIX reduce using rule 47 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    P_MATRIX        reduce using rule 47 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 47 (matrix_assignment -> MATRIX ID sem_push_operand ASSIGN sem_push_operator matrix_construct sem_assign_matrix SEMICOLON .)


state 308

    (48) matrix_construct -> LEFT_BRACE rows RIGHT_BRACE .

    SEMICOLON       reduce using rule 48 (matrix_construct -> LEFT_BRACE rows RIGHT_BRACE .)


state 309

    (50) rows -> row COMMA . rows
    (49) rows -> . row
    (50) rows -> . row COMMA rows
    (51) row -> . LEFT_BRACKET col RIGHT_BRACKET sem_push_row sem_clear_row

    LEFT_BRACKET    shift and go to state 288

    row                            shift and go to state 287
    rows                           shift and go to state 333

state 310

    (51) row -> LEFT_BRACKET col . RIGHT_BRACKET sem_push_row sem_clear_row

    RIGHT_BRACKET   shift and go to state 334


state 311

    (52) col -> CTE_I . sem_push_col col
    (140) sem_push_col -> . empty
    (95) empty -> .

    CTE_I           reduce using rule 95 (empty -> .)
    CTE_B           reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    sem_push_col                   shift and go to state 335
    empty                          shift and go to state 336

state 312

    (53) col -> CTE_B . sem_push_col col
    (140) sem_push_col -> . empty
    (95) empty -> .

    CTE_I           reduce using rule 95 (empty -> .)
    CTE_B           reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    sem_push_col                   shift and go to state 337
    empty                          shift and go to state 336

state 313

    (54) col -> COMMA . col
    (52) col -> . CTE_I sem_push_col col
    (53) col -> . CTE_B sem_push_col col
    (54) col -> . COMMA col
    (55) col -> . empty
    (95) empty -> .

    CTE_I           shift and go to state 311
    CTE_B           shift and go to state 312
    COMMA           shift and go to state 313
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    col                            shift and go to state 338
    empty                          shift and go to state 314

state 314

    (55) col -> empty .

    RIGHT_BRACKET   reduce using rule 55 (col -> empty .)


state 315

    (79) condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .

    ID              reduce using rule 79 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    MATRIX          reduce using rule 79 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    IF              reduce using rule 79 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    RETURN          reduce using rule 79 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    WHILE           reduce using rule 79 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    READ            reduce using rule 79 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    WRITE           reduce using rule 79 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    SWAP            reduce using rule 79 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    MULTIPLY_MATRIX reduce using rule 79 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    ADD_TO_MATRIX   reduce using rule 79 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    SUBTRACT_FROM_MATRIX reduce using rule 79 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    P_MATRIX        reduce using rule 79 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)
    RIGHT_BRACE     reduce using rule 79 (condition -> IF LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block condition_1 sem_fill_gotof .)


state 316

    (115) sem_fill_gotof -> empty .

    ID              reduce using rule 115 (sem_fill_gotof -> empty .)
    MATRIX          reduce using rule 115 (sem_fill_gotof -> empty .)
    IF              reduce using rule 115 (sem_fill_gotof -> empty .)
    RETURN          reduce using rule 115 (sem_fill_gotof -> empty .)
    WHILE           reduce using rule 115 (sem_fill_gotof -> empty .)
    READ            reduce using rule 115 (sem_fill_gotof -> empty .)
    WRITE           reduce using rule 115 (sem_fill_gotof -> empty .)
    SWAP            reduce using rule 115 (sem_fill_gotof -> empty .)
    MULTIPLY_MATRIX reduce using rule 115 (sem_fill_gotof -> empty .)
    ADD_TO_MATRIX   reduce using rule 115 (sem_fill_gotof -> empty .)
    SUBTRACT_FROM_MATRIX reduce using rule 115 (sem_fill_gotof -> empty .)
    P_MATRIX        reduce using rule 115 (sem_fill_gotof -> empty .)
    RIGHT_BRACE     reduce using rule 115 (sem_fill_gotof -> empty .)


state 317

    (80) condition_1 -> ELSE sem_else_condition . block
    (30) block -> . LEFT_BRACE declaration statements RIGHT_BRACE

    LEFT_BRACE      shift and go to state 44

    block                          shift and go to state 339

state 318

    (116) sem_else_condition -> empty .

    LEFT_BRACE      reduce using rule 116 (sem_else_condition -> empty .)


state 319

    (23) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR . sem_false_bottom_end sem_count_params sem_gosub
    (108) sem_false_bottom_end -> . empty
    (95) empty -> .

    MULTIPLY        reduce using rule 95 (empty -> .)
    DIVIDE          reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    IS_EQUAL_TO     reduce using rule 95 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 95 (empty -> .)
    GREATER_THAN    reduce using rule 95 (empty -> .)
    LESS_THAN       reduce using rule 95 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    sem_false_bottom_end           shift and go to state 340
    empty                          shift and go to state 264

state 320

    (86) while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .

    ID              reduce using rule 86 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    MATRIX          reduce using rule 86 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    IF              reduce using rule 86 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    RETURN          reduce using rule 86 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    WHILE           reduce using rule 86 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    READ            reduce using rule 86 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    WRITE           reduce using rule 86 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    SWAP            reduce using rule 86 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    MULTIPLY_MATRIX reduce using rule 86 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    ADD_TO_MATRIX   reduce using rule 86 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    SUBTRACT_FROM_MATRIX reduce using rule 86 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    P_MATRIX        reduce using rule 86 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)
    RIGHT_BRACE     reduce using rule 86 (while_cycle -> WHILE sem_start_while LEFT_PAR mega_exp RIGHT_PAR sem_end_condition block sem_end_while .)


state 321

    (118) sem_end_while -> empty .

    ID              reduce using rule 118 (sem_end_while -> empty .)
    MATRIX          reduce using rule 118 (sem_end_while -> empty .)
    IF              reduce using rule 118 (sem_end_while -> empty .)
    RETURN          reduce using rule 118 (sem_end_while -> empty .)
    WHILE           reduce using rule 118 (sem_end_while -> empty .)
    READ            reduce using rule 118 (sem_end_while -> empty .)
    WRITE           reduce using rule 118 (sem_end_while -> empty .)
    SWAP            reduce using rule 118 (sem_end_while -> empty .)
    MULTIPLY_MATRIX reduce using rule 118 (sem_end_while -> empty .)
    ADD_TO_MATRIX   reduce using rule 118 (sem_end_while -> empty .)
    SUBTRACT_FROM_MATRIX reduce using rule 118 (sem_end_while -> empty .)
    P_MATRIX        reduce using rule 118 (sem_end_while -> empty .)
    RIGHT_BRACE     reduce using rule 118 (sem_end_while -> empty .)


state 322

    (93) swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap .

    ID              reduce using rule 93 (swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap .)
    MATRIX          reduce using rule 93 (swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap .)
    IF              reduce using rule 93 (swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap .)
    RETURN          reduce using rule 93 (swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap .)
    WHILE           reduce using rule 93 (swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap .)
    READ            reduce using rule 93 (swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap .)
    WRITE           reduce using rule 93 (swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap .)
    SWAP            reduce using rule 93 (swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap .)
    MULTIPLY_MATRIX reduce using rule 93 (swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap .)
    ADD_TO_MATRIX   reduce using rule 93 (swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap .)
    SUBTRACT_FROM_MATRIX reduce using rule 93 (swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap .)
    P_MATRIX        reduce using rule 93 (swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap .)
    RIGHT_BRACE     reduce using rule 93 (swap -> SWAP LEFT_PAR mega_exp COMMA mega_exp RIGHT_PAR SEMICOLON sem_swap .)


state 323

    (145) sem_swap -> empty .

    ID              reduce using rule 145 (sem_swap -> empty .)
    MATRIX          reduce using rule 145 (sem_swap -> empty .)
    IF              reduce using rule 145 (sem_swap -> empty .)
    RETURN          reduce using rule 145 (sem_swap -> empty .)
    WHILE           reduce using rule 145 (sem_swap -> empty .)
    READ            reduce using rule 145 (sem_swap -> empty .)
    WRITE           reduce using rule 145 (sem_swap -> empty .)
    SWAP            reduce using rule 145 (sem_swap -> empty .)
    MULTIPLY_MATRIX reduce using rule 145 (sem_swap -> empty .)
    ADD_TO_MATRIX   reduce using rule 145 (sem_swap -> empty .)
    SUBTRACT_FROM_MATRIX reduce using rule 145 (sem_swap -> empty .)
    P_MATRIX        reduce using rule 145 (sem_swap -> empty .)
    RIGHT_BRACE     reduce using rule 145 (sem_swap -> empty .)


state 324

    (90) multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR . SEMICOLON sem_multiply_matrix

    SEMICOLON       shift and go to state 341


state 325

    (91) add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR . SEMICOLON sem_add_to_matrix

    SEMICOLON       shift and go to state 342


state 326

    (92) subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR . SEMICOLON sem_subtract_from_matrix

    SEMICOLON       shift and go to state 343


state 327

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix . SEMICOLON

    SEMICOLON       shift and go to state 344


state 328

    (132) sem_add_matrix -> empty .

    SEMICOLON       reduce using rule 132 (sem_add_matrix -> empty .)


state 329

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 . exp RIGHT_BRACKET sem_ver_dim2
    (69) exp -> . term sem_top_term
    (70) exp -> . term sem_top_term PLUS sem_push_operator exp
    (71) exp -> . term sem_top_term MINUS sem_push_operator exp
    (72) term -> . factor sem_top_factor
    (73) term -> . factor sem_top_factor MULTIPLY sem_push_operator term
    (74) term -> . factor sem_top_factor DIVIDE sem_push_operator term
    (75) factor -> . LEFT_PAR sem_false_bottom_begin mega_exp RIGHT_PAR sem_false_bottom_end
    (76) factor -> . var_cte
    (77) factor -> . PLUS sem_push_operator var_cte
    (78) factor -> . MINUS sem_push_operator var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b sem_push_constant_bool
    (22) var_cte -> . ID sem_push_operand matrix
    (23) var_cte -> . ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE

    LEFT_PAR        shift and go to state 105
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    CTE_I           shift and go to state 107
    CTE_D           shift and go to state 108
    ID              shift and go to state 110
    TRUE            shift and go to state 111
    FALSE           shift and go to state 112

    exp                            shift and go to state 345
    term                           shift and go to state 101
    factor                         shift and go to state 104
    var_cte                        shift and go to state 106
    cte_b                          shift and go to state 109

state 330

    (135) sem_check_dim2 -> empty .

    LEFT_PAR        reduce using rule 135 (sem_check_dim2 -> empty .)
    PLUS            reduce using rule 135 (sem_check_dim2 -> empty .)
    MINUS           reduce using rule 135 (sem_check_dim2 -> empty .)
    CTE_I           reduce using rule 135 (sem_check_dim2 -> empty .)
    CTE_D           reduce using rule 135 (sem_check_dim2 -> empty .)
    ID              reduce using rule 135 (sem_check_dim2 -> empty .)
    TRUE            reduce using rule 135 (sem_check_dim2 -> empty .)
    FALSE           reduce using rule 135 (sem_check_dim2 -> empty .)


state 331

    (82) function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .

    ID              reduce using rule 82 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    MATRIX          reduce using rule 82 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    IF              reduce using rule 82 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    RETURN          reduce using rule 82 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    WHILE           reduce using rule 82 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    READ            reduce using rule 82 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    WRITE           reduce using rule 82 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    SWAP            reduce using rule 82 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    MULTIPLY_MATRIX reduce using rule 82 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    ADD_TO_MATRIX   reduce using rule 82 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    SUBTRACT_FROM_MATRIX reduce using rule 82 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    P_MATRIX        reduce using rule 82 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)
    RIGHT_BRACE     reduce using rule 82 (function_call -> ID sem_check_function LEFT_PAR sem_create_era param_call RIGHT_PAR sem_count_params SEMICOLON sem_gosub .)


state 332

    (124) sem_gosub -> empty .

    ID              reduce using rule 124 (sem_gosub -> empty .)
    MATRIX          reduce using rule 124 (sem_gosub -> empty .)
    IF              reduce using rule 124 (sem_gosub -> empty .)
    RETURN          reduce using rule 124 (sem_gosub -> empty .)
    WHILE           reduce using rule 124 (sem_gosub -> empty .)
    READ            reduce using rule 124 (sem_gosub -> empty .)
    WRITE           reduce using rule 124 (sem_gosub -> empty .)
    SWAP            reduce using rule 124 (sem_gosub -> empty .)
    MULTIPLY_MATRIX reduce using rule 124 (sem_gosub -> empty .)
    ADD_TO_MATRIX   reduce using rule 124 (sem_gosub -> empty .)
    SUBTRACT_FROM_MATRIX reduce using rule 124 (sem_gosub -> empty .)
    P_MATRIX        reduce using rule 124 (sem_gosub -> empty .)
    RIGHT_BRACE     reduce using rule 124 (sem_gosub -> empty .)
    MULTIPLY        reduce using rule 124 (sem_gosub -> empty .)
    DIVIDE          reduce using rule 124 (sem_gosub -> empty .)
    PLUS            reduce using rule 124 (sem_gosub -> empty .)
    MINUS           reduce using rule 124 (sem_gosub -> empty .)
    IS_EQUAL_TO     reduce using rule 124 (sem_gosub -> empty .)
    NOT_EQUAL_TO    reduce using rule 124 (sem_gosub -> empty .)
    GREATER_THAN    reduce using rule 124 (sem_gosub -> empty .)
    LESS_THAN       reduce using rule 124 (sem_gosub -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 124 (sem_gosub -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 124 (sem_gosub -> empty .)
    AND             reduce using rule 124 (sem_gosub -> empty .)
    OR              reduce using rule 124 (sem_gosub -> empty .)
    SEMICOLON       reduce using rule 124 (sem_gosub -> empty .)
    RIGHT_PAR       reduce using rule 124 (sem_gosub -> empty .)
    COMMA           reduce using rule 124 (sem_gosub -> empty .)
    RIGHT_BRACKET   reduce using rule 124 (sem_gosub -> empty .)


state 333

    (50) rows -> row COMMA rows .

    RIGHT_BRACE     reduce using rule 50 (rows -> row COMMA rows .)


state 334

    (51) row -> LEFT_BRACKET col RIGHT_BRACKET . sem_push_row sem_clear_row
    (139) sem_push_row -> . empty
    (95) empty -> .

    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACE     reduce using rule 95 (empty -> .)

    sem_push_row                   shift and go to state 346
    empty                          shift and go to state 347

state 335

    (52) col -> CTE_I sem_push_col . col
    (52) col -> . CTE_I sem_push_col col
    (53) col -> . CTE_B sem_push_col col
    (54) col -> . COMMA col
    (55) col -> . empty
    (95) empty -> .

    CTE_I           shift and go to state 311
    CTE_B           shift and go to state 312
    COMMA           shift and go to state 313
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    col                            shift and go to state 348
    empty                          shift and go to state 314

state 336

    (140) sem_push_col -> empty .

    CTE_I           reduce using rule 140 (sem_push_col -> empty .)
    CTE_B           reduce using rule 140 (sem_push_col -> empty .)
    COMMA           reduce using rule 140 (sem_push_col -> empty .)
    RIGHT_BRACKET   reduce using rule 140 (sem_push_col -> empty .)


state 337

    (53) col -> CTE_B sem_push_col . col
    (52) col -> . CTE_I sem_push_col col
    (53) col -> . CTE_B sem_push_col col
    (54) col -> . COMMA col
    (55) col -> . empty
    (95) empty -> .

    CTE_I           shift and go to state 311
    CTE_B           shift and go to state 312
    COMMA           shift and go to state 313
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    col                            shift and go to state 349
    empty                          shift and go to state 314

state 338

    (54) col -> COMMA col .

    RIGHT_BRACKET   reduce using rule 54 (col -> COMMA col .)


state 339

    (80) condition_1 -> ELSE sem_else_condition block .

    ID              reduce using rule 80 (condition_1 -> ELSE sem_else_condition block .)
    MATRIX          reduce using rule 80 (condition_1 -> ELSE sem_else_condition block .)
    IF              reduce using rule 80 (condition_1 -> ELSE sem_else_condition block .)
    RETURN          reduce using rule 80 (condition_1 -> ELSE sem_else_condition block .)
    WHILE           reduce using rule 80 (condition_1 -> ELSE sem_else_condition block .)
    READ            reduce using rule 80 (condition_1 -> ELSE sem_else_condition block .)
    WRITE           reduce using rule 80 (condition_1 -> ELSE sem_else_condition block .)
    SWAP            reduce using rule 80 (condition_1 -> ELSE sem_else_condition block .)
    MULTIPLY_MATRIX reduce using rule 80 (condition_1 -> ELSE sem_else_condition block .)
    ADD_TO_MATRIX   reduce using rule 80 (condition_1 -> ELSE sem_else_condition block .)
    SUBTRACT_FROM_MATRIX reduce using rule 80 (condition_1 -> ELSE sem_else_condition block .)
    P_MATRIX        reduce using rule 80 (condition_1 -> ELSE sem_else_condition block .)
    RIGHT_BRACE     reduce using rule 80 (condition_1 -> ELSE sem_else_condition block .)


state 340

    (23) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end . sem_count_params sem_gosub
    (123) sem_count_params -> . empty
    (95) empty -> .

    MULTIPLY        reduce using rule 95 (empty -> .)
    DIVIDE          reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    IS_EQUAL_TO     reduce using rule 95 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 95 (empty -> .)
    GREATER_THAN    reduce using rule 95 (empty -> .)
    LESS_THAN       reduce using rule 95 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    sem_count_params               shift and go to state 350
    empty                          shift and go to state 282

state 341

    (90) multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON . sem_multiply_matrix
    (141) sem_multiply_matrix -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)
    MATRIX          reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    SWAP            reduce using rule 95 (empty -> .)
    MULTIPLY_MATRIX reduce using rule 95 (empty -> .)
    ADD_TO_MATRIX   reduce using rule 95 (empty -> .)
    SUBTRACT_FROM_MATRIX reduce using rule 95 (empty -> .)
    P_MATRIX        reduce using rule 95 (empty -> .)
    RIGHT_BRACE     reduce using rule 95 (empty -> .)

    sem_multiply_matrix            shift and go to state 351
    empty                          shift and go to state 352

state 342

    (91) add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON . sem_add_to_matrix
    (143) sem_add_to_matrix -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)
    MATRIX          reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    SWAP            reduce using rule 95 (empty -> .)
    MULTIPLY_MATRIX reduce using rule 95 (empty -> .)
    ADD_TO_MATRIX   reduce using rule 95 (empty -> .)
    SUBTRACT_FROM_MATRIX reduce using rule 95 (empty -> .)
    P_MATRIX        reduce using rule 95 (empty -> .)
    RIGHT_BRACE     reduce using rule 95 (empty -> .)

    sem_add_to_matrix              shift and go to state 353
    empty                          shift and go to state 354

state 343

    (92) subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON . sem_subtract_from_matrix
    (144) sem_subtract_from_matrix -> . empty
    (95) empty -> .

    ID              reduce using rule 95 (empty -> .)
    MATRIX          reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    SWAP            reduce using rule 95 (empty -> .)
    MULTIPLY_MATRIX reduce using rule 95 (empty -> .)
    ADD_TO_MATRIX   reduce using rule 95 (empty -> .)
    SUBTRACT_FROM_MATRIX reduce using rule 95 (empty -> .)
    P_MATRIX        reduce using rule 95 (empty -> .)
    RIGHT_BRACE     reduce using rule 95 (empty -> .)

    sem_subtract_from_matrix       shift and go to state 355
    empty                          shift and go to state 356

state 344

    (6) matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .

    MATRIX          reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    INT             reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    DOUBLE          reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    BOOL            reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    FUNCTION        reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    MAIN            reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    ID              reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    IF              reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    RETURN          reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    WHILE           reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    READ            reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    WRITE           reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    SWAP            reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    MULTIPLY_MATRIX reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    ADD_TO_MATRIX   reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    SUBTRACT_FROM_MATRIX reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    P_MATRIX        reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 6 (matrix_declaration -> MATRIX var_type ID sem_get_matrix_id LEFT_BRACKET CTE_I sem_get_dim1 RIGHT_BRACKET LEFT_BRACKET CTE_I sem_get_dim2 RIGHT_BRACKET sem_add_matrix SEMICOLON .)


state 345

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp . RIGHT_BRACKET sem_ver_dim2

    RIGHT_BRACKET   shift and go to state 357


state 346

    (51) row -> LEFT_BRACKET col RIGHT_BRACKET sem_push_row . sem_clear_row
    (138) sem_clear_row -> . empty
    (95) empty -> .

    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACE     reduce using rule 95 (empty -> .)

    sem_clear_row                  shift and go to state 358
    empty                          shift and go to state 359

state 347

    (139) sem_push_row -> empty .

    COMMA           reduce using rule 139 (sem_push_row -> empty .)
    RIGHT_BRACE     reduce using rule 139 (sem_push_row -> empty .)


state 348

    (52) col -> CTE_I sem_push_col col .

    RIGHT_BRACKET   reduce using rule 52 (col -> CTE_I sem_push_col col .)


state 349

    (53) col -> CTE_B sem_push_col col .

    RIGHT_BRACKET   reduce using rule 53 (col -> CTE_B sem_push_col col .)


state 350

    (23) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params . sem_gosub
    (124) sem_gosub -> . empty
    (95) empty -> .

    MULTIPLY        reduce using rule 95 (empty -> .)
    DIVIDE          reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    IS_EQUAL_TO     reduce using rule 95 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 95 (empty -> .)
    GREATER_THAN    reduce using rule 95 (empty -> .)
    LESS_THAN       reduce using rule 95 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    sem_gosub                      shift and go to state 360
    empty                          shift and go to state 332

state 351

    (90) multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix .

    ID              reduce using rule 90 (multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix .)
    MATRIX          reduce using rule 90 (multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix .)
    IF              reduce using rule 90 (multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix .)
    RETURN          reduce using rule 90 (multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix .)
    WHILE           reduce using rule 90 (multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix .)
    READ            reduce using rule 90 (multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix .)
    WRITE           reduce using rule 90 (multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix .)
    SWAP            reduce using rule 90 (multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix .)
    MULTIPLY_MATRIX reduce using rule 90 (multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix .)
    ADD_TO_MATRIX   reduce using rule 90 (multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix .)
    SUBTRACT_FROM_MATRIX reduce using rule 90 (multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix .)
    P_MATRIX        reduce using rule 90 (multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix .)
    RIGHT_BRACE     reduce using rule 90 (multiply_matrix -> MULTIPLY_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_multiply_matrix .)


state 352

    (141) sem_multiply_matrix -> empty .

    ID              reduce using rule 141 (sem_multiply_matrix -> empty .)
    MATRIX          reduce using rule 141 (sem_multiply_matrix -> empty .)
    IF              reduce using rule 141 (sem_multiply_matrix -> empty .)
    RETURN          reduce using rule 141 (sem_multiply_matrix -> empty .)
    WHILE           reduce using rule 141 (sem_multiply_matrix -> empty .)
    READ            reduce using rule 141 (sem_multiply_matrix -> empty .)
    WRITE           reduce using rule 141 (sem_multiply_matrix -> empty .)
    SWAP            reduce using rule 141 (sem_multiply_matrix -> empty .)
    MULTIPLY_MATRIX reduce using rule 141 (sem_multiply_matrix -> empty .)
    ADD_TO_MATRIX   reduce using rule 141 (sem_multiply_matrix -> empty .)
    SUBTRACT_FROM_MATRIX reduce using rule 141 (sem_multiply_matrix -> empty .)
    P_MATRIX        reduce using rule 141 (sem_multiply_matrix -> empty .)
    RIGHT_BRACE     reduce using rule 141 (sem_multiply_matrix -> empty .)


state 353

    (91) add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix .

    ID              reduce using rule 91 (add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix .)
    MATRIX          reduce using rule 91 (add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix .)
    IF              reduce using rule 91 (add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix .)
    RETURN          reduce using rule 91 (add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix .)
    WHILE           reduce using rule 91 (add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix .)
    READ            reduce using rule 91 (add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix .)
    WRITE           reduce using rule 91 (add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix .)
    SWAP            reduce using rule 91 (add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix .)
    MULTIPLY_MATRIX reduce using rule 91 (add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix .)
    ADD_TO_MATRIX   reduce using rule 91 (add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix .)
    SUBTRACT_FROM_MATRIX reduce using rule 91 (add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix .)
    P_MATRIX        reduce using rule 91 (add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix .)
    RIGHT_BRACE     reduce using rule 91 (add_to_matrix -> ADD_TO_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_add_to_matrix .)


state 354

    (143) sem_add_to_matrix -> empty .

    ID              reduce using rule 143 (sem_add_to_matrix -> empty .)
    MATRIX          reduce using rule 143 (sem_add_to_matrix -> empty .)
    IF              reduce using rule 143 (sem_add_to_matrix -> empty .)
    RETURN          reduce using rule 143 (sem_add_to_matrix -> empty .)
    WHILE           reduce using rule 143 (sem_add_to_matrix -> empty .)
    READ            reduce using rule 143 (sem_add_to_matrix -> empty .)
    WRITE           reduce using rule 143 (sem_add_to_matrix -> empty .)
    SWAP            reduce using rule 143 (sem_add_to_matrix -> empty .)
    MULTIPLY_MATRIX reduce using rule 143 (sem_add_to_matrix -> empty .)
    ADD_TO_MATRIX   reduce using rule 143 (sem_add_to_matrix -> empty .)
    SUBTRACT_FROM_MATRIX reduce using rule 143 (sem_add_to_matrix -> empty .)
    P_MATRIX        reduce using rule 143 (sem_add_to_matrix -> empty .)
    RIGHT_BRACE     reduce using rule 143 (sem_add_to_matrix -> empty .)


state 355

    (92) subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix .

    ID              reduce using rule 92 (subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix .)
    MATRIX          reduce using rule 92 (subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix .)
    IF              reduce using rule 92 (subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix .)
    RETURN          reduce using rule 92 (subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix .)
    WHILE           reduce using rule 92 (subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix .)
    READ            reduce using rule 92 (subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix .)
    WRITE           reduce using rule 92 (subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix .)
    SWAP            reduce using rule 92 (subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix .)
    MULTIPLY_MATRIX reduce using rule 92 (subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix .)
    ADD_TO_MATRIX   reduce using rule 92 (subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix .)
    SUBTRACT_FROM_MATRIX reduce using rule 92 (subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix .)
    P_MATRIX        reduce using rule 92 (subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix .)
    RIGHT_BRACE     reduce using rule 92 (subtract_from_matrix -> SUBTRACT_FROM_MATRIX LEFT_PAR ID sem_push_operand COMMA CTE_I sem_push_constant_int RIGHT_PAR SEMICOLON sem_subtract_from_matrix .)


state 356

    (144) sem_subtract_from_matrix -> empty .

    ID              reduce using rule 144 (sem_subtract_from_matrix -> empty .)
    MATRIX          reduce using rule 144 (sem_subtract_from_matrix -> empty .)
    IF              reduce using rule 144 (sem_subtract_from_matrix -> empty .)
    RETURN          reduce using rule 144 (sem_subtract_from_matrix -> empty .)
    WHILE           reduce using rule 144 (sem_subtract_from_matrix -> empty .)
    READ            reduce using rule 144 (sem_subtract_from_matrix -> empty .)
    WRITE           reduce using rule 144 (sem_subtract_from_matrix -> empty .)
    SWAP            reduce using rule 144 (sem_subtract_from_matrix -> empty .)
    MULTIPLY_MATRIX reduce using rule 144 (sem_subtract_from_matrix -> empty .)
    ADD_TO_MATRIX   reduce using rule 144 (sem_subtract_from_matrix -> empty .)
    SUBTRACT_FROM_MATRIX reduce using rule 144 (sem_subtract_from_matrix -> empty .)
    P_MATRIX        reduce using rule 144 (sem_subtract_from_matrix -> empty .)
    RIGHT_BRACE     reduce using rule 144 (sem_subtract_from_matrix -> empty .)


state 357

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET . sem_ver_dim2
    (136) sem_ver_dim2 -> . empty
    (95) empty -> .

    ASSIGN          reduce using rule 95 (empty -> .)
    MULTIPLY        reduce using rule 95 (empty -> .)
    DIVIDE          reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    IS_EQUAL_TO     reduce using rule 95 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 95 (empty -> .)
    GREATER_THAN    reduce using rule 95 (empty -> .)
    LESS_THAN       reduce using rule 95 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    SEMICOLON       reduce using rule 95 (empty -> .)
    RIGHT_PAR       reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RIGHT_BRACKET   reduce using rule 95 (empty -> .)

    sem_ver_dim2                   shift and go to state 361
    empty                          shift and go to state 362

state 358

    (51) row -> LEFT_BRACKET col RIGHT_BRACKET sem_push_row sem_clear_row .

    COMMA           reduce using rule 51 (row -> LEFT_BRACKET col RIGHT_BRACKET sem_push_row sem_clear_row .)
    RIGHT_BRACE     reduce using rule 51 (row -> LEFT_BRACKET col RIGHT_BRACKET sem_push_row sem_clear_row .)


state 359

    (138) sem_clear_row -> empty .

    COMMA           reduce using rule 138 (sem_clear_row -> empty .)
    RIGHT_BRACE     reduce using rule 138 (sem_clear_row -> empty .)


state 360

    (23) var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .

    MULTIPLY        reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    DIVIDE          reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    PLUS            reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    MINUS           reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    IS_EQUAL_TO     reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    NOT_EQUAL_TO    reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    GREATER_THAN    reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    LESS_THAN       reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    AND             reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    OR              reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    SEMICOLON       reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    RIGHT_PAR       reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    COMMA           reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)
    RIGHT_BRACKET   reduce using rule 23 (var_cte -> ID sem_check_function LEFT_PAR sem_false_bottom_begin sem_create_era param_call RIGHT_PAR sem_false_bottom_end sem_count_params sem_gosub .)


state 361

    (7) matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .

    ASSIGN          reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    MULTIPLY        reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    DIVIDE          reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    PLUS            reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    MINUS           reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    IS_EQUAL_TO     reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    NOT_EQUAL_TO    reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    GREATER_THAN    reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    LESS_THAN       reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    AND             reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    OR              reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    SEMICOLON       reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    RIGHT_PAR       reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    COMMA           reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)
    RIGHT_BRACKET   reduce using rule 7 (matrix -> LEFT_BRACKET sem_check_dim1 exp RIGHT_BRACKET sem_ver_dim1 LEFT_BRACKET sem_check_dim2 exp RIGHT_BRACKET sem_ver_dim2 .)


state 362

    (136) sem_ver_dim2 -> empty .

    ASSIGN          reduce using rule 136 (sem_ver_dim2 -> empty .)
    MULTIPLY        reduce using rule 136 (sem_ver_dim2 -> empty .)
    DIVIDE          reduce using rule 136 (sem_ver_dim2 -> empty .)
    PLUS            reduce using rule 136 (sem_ver_dim2 -> empty .)
    MINUS           reduce using rule 136 (sem_ver_dim2 -> empty .)
    IS_EQUAL_TO     reduce using rule 136 (sem_ver_dim2 -> empty .)
    NOT_EQUAL_TO    reduce using rule 136 (sem_ver_dim2 -> empty .)
    GREATER_THAN    reduce using rule 136 (sem_ver_dim2 -> empty .)
    LESS_THAN       reduce using rule 136 (sem_ver_dim2 -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 136 (sem_ver_dim2 -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 136 (sem_ver_dim2 -> empty .)
    AND             reduce using rule 136 (sem_ver_dim2 -> empty .)
    OR              reduce using rule 136 (sem_ver_dim2 -> empty .)
    SEMICOLON       reduce using rule 136 (sem_ver_dim2 -> empty .)
    RIGHT_PAR       reduce using rule 136 (sem_ver_dim2 -> empty .)
    COMMA           reduce using rule 136 (sem_ver_dim2 -> empty .)
    RIGHT_BRACKET   reduce using rule 136 (sem_ver_dim2 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MATRIX in state 5 resolved as shift
WARNING: shift/reduce conflict for MATRIX in state 6 resolved as shift
WARNING: shift/reduce conflict for MATRIX in state 44 resolved as shift

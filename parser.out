Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD_COLS
    ADD_ROWS
    CTE_S
    FIND_DETERMINANT
    MULTIPLY_COLS
    MULTIPLY_MATRIX
    MULTIPLY_ROWS
    PRINT_MATRIX
    SWAP_COLS
    SWAP_ROWS
    TRANSPOSE_MATRIX

Grammar

Rule 0     S' -> start
Rule 1     start -> global_declaration
Rule 2     global_declaration -> var_declaration global_declaration
Rule 3     global_declaration -> func_declaration
Rule 4     var_declaration -> var_type ID sem_add_var array SEMICOLON
Rule 5     var_declaration -> empty
Rule 6     array -> LEFT_BRACKET expression RIGHT_BRACKET array
Rule 7     array -> empty
Rule 8     func_declaration -> func_signature func_declaration
Rule 9     func_declaration -> main
Rule 10    func_signature -> FUNCTION func_type array func_signature_1 sem_end_func
Rule 11    func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block
Rule 12    param_declaration -> var_type array ID param_declaration_1
Rule 13    param_declaration -> empty
Rule 14    param_declaration_1 -> COMMA var_type array ID param_declaration_1
Rule 15    param_declaration_1 -> empty
Rule 16    var_type -> INT sem_get_type
Rule 17    var_type -> DOUBLE sem_get_type
Rule 18    var_type -> BOOL sem_get_type
Rule 19    var_cte -> CTE_I sem_push_constant_int
Rule 20    var_cte -> CTE_D sem_push_constant_double
Rule 21    var_cte -> cte_b
Rule 22    var_cte -> ID sem_push_operand array
Rule 23    var_cte -> function_call
Rule 24    cte_b -> TRUE
Rule 25    cte_b -> FALSE
Rule 26    func_type -> INT sem_get_type
Rule 27    func_type -> DOUBLE sem_get_type
Rule 28    func_type -> BOOL sem_get_type
Rule 29    func_type -> VOID sem_get_type
Rule 30    block -> LEFT_BRACE block_1
Rule 31    block_1 -> statement block_1
Rule 32    block_1 -> block_2
Rule 33    block_2 -> RETURN expression SEMICOLON block_3
Rule 34    block_2 -> block_3
Rule 35    block_3 -> RIGHT_BRACE
Rule 36    statement -> var_declaration
Rule 37    statement -> assignment
Rule 38    statement -> condition
Rule 39    statement -> function_call SEMICOLON
Rule 40    statement -> while_cycle
Rule 41    statement -> read
Rule 42    statement -> write
Rule 43    assignment -> ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON
Rule 44    expression -> exp expression_1
Rule 45    expression_1 -> IS_EQUAL_TO exp
Rule 46    expression_1 -> NOT_EQUAL_TO exp
Rule 47    expression_1 -> GREATER_THAN exp
Rule 48    expression_1 -> LESS_THAN exp
Rule 49    expression_1 -> GREATER_THAN_OR_EQUAL_TO exp
Rule 50    expression_1 -> LESS_THAN_OR_EQUAL_TO exp
Rule 51    expression_1 -> AND exp
Rule 52    expression_1 -> OR exp
Rule 53    expression_1 -> empty
Rule 54    exp -> term sem_top_term exp_1
Rule 55    exp_1 -> PLUS sem_push_operator exp
Rule 56    exp_1 -> MINUS sem_push_operator exp
Rule 57    exp_1 -> empty
Rule 58    term -> factor sem_top_factor term_1
Rule 59    term_1 -> MULTIPLY sem_push_operator term
Rule 60    term_1 -> DIVIDE sem_push_operator term
Rule 61    term_1 -> empty
Rule 62    factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
Rule 63    factor -> var_cte
Rule 64    factor -> factor_1 var_cte
Rule 65    factor_1 -> PLUS
Rule 66    factor_1 -> MINUS
Rule 67    factor_1 -> empty
Rule 68    condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1
Rule 69    condition_1 -> ELSE block
Rule 70    condition_1 -> empty
Rule 71    function_call -> ID LEFT_PAR param_call RIGHT_PAR
Rule 72    param_call -> expression param_call_1
Rule 73    param_call -> empty
Rule 74    param_call_1 -> COMMA param_call
Rule 75    param_call_1 -> empty
Rule 76    while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block
Rule 77    read -> READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON
Rule 78    write -> WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON
Rule 79    main -> MAIN block
Rule 80    empty -> <empty>
Rule 81    sem_get_type -> empty
Rule 82    sem_add_func -> empty
Rule 83    sem_end_func -> empty
Rule 84    sem_add_var -> empty
Rule 85    sem_push_operator -> empty
Rule 86    sem_push_operand -> empty
Rule 87    sem_push_constant_int -> empty
Rule 88    sem_push_constant_double -> empty
Rule 89    sem_top_factor -> empty
Rule 90    sem_top_term -> empty
Rule 91    sem_false_bottom_begin -> empty
Rule 92    sem_false_bottom_end -> empty
Rule 93    sem_assign_value -> empty
Rule 94    sem_read_write -> empty

Terminals, with rules where they appear

ADD_COLS             : 
ADD_ROWS             : 
AND                  : 51
ASSIGN               : 43
BOOL                 : 18 28
COMMA                : 14 74
CTE_D                : 20
CTE_I                : 19
CTE_S                : 
DIVIDE               : 60
DOUBLE               : 17 27
ELSE                 : 69
FALSE                : 25
FIND_DETERMINANT     : 
FUNCTION             : 10
GREATER_THAN         : 47
GREATER_THAN_OR_EQUAL_TO : 49
ID                   : 4 11 12 14 22 43 71
IF                   : 68
INT                  : 16 26
IS_EQUAL_TO          : 45
LEFT_BRACE           : 30
LEFT_BRACKET         : 6
LEFT_PAR             : 11 62 68 71 76 77 78
LESS_THAN            : 48
LESS_THAN_OR_EQUAL_TO : 50
MAIN                 : 79
MINUS                : 56 66
MULTIPLY             : 59
MULTIPLY_COLS        : 
MULTIPLY_MATRIX      : 
MULTIPLY_ROWS        : 
NOT_EQUAL_TO         : 46
OR                   : 52
PLUS                 : 55 65
PRINT_MATRIX         : 
READ                 : 77
RETURN               : 33
RIGHT_BRACE          : 35
RIGHT_BRACKET        : 6
RIGHT_PAR            : 11 62 68 71 76 77 78
SEMICOLON            : 4 33 39 43 77 78
SWAP_COLS            : 
SWAP_ROWS            : 
TRANSPOSE_MATRIX     : 
TRUE                 : 24
VOID                 : 29
WHILE                : 76
WRITE                : 78
error                : 

Nonterminals, with rules where they appear

array                : 4 6 10 12 14 22
assignment           : 37
block                : 11 68 69 76 79
block_1              : 30 31
block_2              : 32
block_3              : 33 34
condition            : 38
condition_1          : 68
cte_b                : 21
empty                : 5 7 13 15 53 57 61 67 70 73 75 81 82 83 84 85 86 87 88 89 90 91 92 93 94
exp                  : 44 45 46 47 48 49 50 51 52 55 56 77 78
exp_1                : 54
expression           : 6 33 43 62 68 72 76
expression_1         : 44
factor               : 58
factor_1             : 64
func_declaration     : 3 8
func_signature       : 8
func_signature_1     : 10
func_type            : 10
function_call        : 23 39
global_declaration   : 1 2
main                 : 9
param_call           : 71 74
param_call_1         : 72
param_declaration    : 11
param_declaration_1  : 12 14
read                 : 41
sem_add_func         : 11
sem_add_var          : 4
sem_assign_value     : 43
sem_end_func         : 10
sem_false_bottom_begin : 62
sem_false_bottom_end : 62
sem_get_type         : 16 17 18 26 27 28 29
sem_push_constant_double : 20
sem_push_constant_int : 19
sem_push_operand     : 22 43
sem_push_operator    : 43 55 56 59 60 77 78
sem_read_write       : 77 78
sem_top_factor       : 58
sem_top_term         : 54
start                : 0
statement            : 31
term                 : 54 59 60
term_1               : 58
var_cte              : 63 64
var_declaration      : 2 36
var_type             : 4 12 14
while_cycle          : 40
write                : 42

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . global_declaration
    (2) global_declaration -> . var_declaration global_declaration
    (3) global_declaration -> . func_declaration
    (4) var_declaration -> . var_type ID sem_add_var array SEMICOLON
    (5) var_declaration -> . empty
    (8) func_declaration -> . func_signature func_declaration
    (9) func_declaration -> . main
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type
    (80) empty -> .
    (10) func_signature -> . FUNCTION func_type array func_signature_1 sem_end_func
    (79) main -> . MAIN block

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    BOOL            shift and go to state 11
    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13

  ! INT             [ reduce using rule 80 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 80 (empty -> .) ]
  ! BOOL            [ reduce using rule 80 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 80 (empty -> .) ]
  ! MAIN            [ reduce using rule 80 (empty -> .) ]

    start                          shift and go to state 1
    global_declaration             shift and go to state 2
    var_declaration                shift and go to state 3
    func_declaration               shift and go to state 4
    var_type                       shift and go to state 5
    empty                          shift and go to state 6
    func_signature                 shift and go to state 7
    main                           shift and go to state 8

state 1

    (0) S' -> start .



state 2

    (1) start -> global_declaration .

    $end            reduce using rule 1 (start -> global_declaration .)


state 3

    (2) global_declaration -> var_declaration . global_declaration
    (2) global_declaration -> . var_declaration global_declaration
    (3) global_declaration -> . func_declaration
    (4) var_declaration -> . var_type ID sem_add_var array SEMICOLON
    (5) var_declaration -> . empty
    (8) func_declaration -> . func_signature func_declaration
    (9) func_declaration -> . main
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type
    (80) empty -> .
    (10) func_signature -> . FUNCTION func_type array func_signature_1 sem_end_func
    (79) main -> . MAIN block

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    BOOL            shift and go to state 11
    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13

  ! INT             [ reduce using rule 80 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 80 (empty -> .) ]
  ! BOOL            [ reduce using rule 80 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 80 (empty -> .) ]
  ! MAIN            [ reduce using rule 80 (empty -> .) ]

    var_declaration                shift and go to state 3
    global_declaration             shift and go to state 14
    func_declaration               shift and go to state 4
    var_type                       shift and go to state 5
    empty                          shift and go to state 6
    func_signature                 shift and go to state 7
    main                           shift and go to state 8

state 4

    (3) global_declaration -> func_declaration .

    $end            reduce using rule 3 (global_declaration -> func_declaration .)


state 5

    (4) var_declaration -> var_type . ID sem_add_var array SEMICOLON

    ID              shift and go to state 15


state 6

    (5) var_declaration -> empty .

    INT             reduce using rule 5 (var_declaration -> empty .)
    DOUBLE          reduce using rule 5 (var_declaration -> empty .)
    BOOL            reduce using rule 5 (var_declaration -> empty .)
    FUNCTION        reduce using rule 5 (var_declaration -> empty .)
    MAIN            reduce using rule 5 (var_declaration -> empty .)
    RETURN          reduce using rule 5 (var_declaration -> empty .)
    ID              reduce using rule 5 (var_declaration -> empty .)
    IF              reduce using rule 5 (var_declaration -> empty .)
    WHILE           reduce using rule 5 (var_declaration -> empty .)
    READ            reduce using rule 5 (var_declaration -> empty .)
    WRITE           reduce using rule 5 (var_declaration -> empty .)
    RIGHT_BRACE     reduce using rule 5 (var_declaration -> empty .)


state 7

    (8) func_declaration -> func_signature . func_declaration
    (8) func_declaration -> . func_signature func_declaration
    (9) func_declaration -> . main
    (10) func_signature -> . FUNCTION func_type array func_signature_1 sem_end_func
    (79) main -> . MAIN block

    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13

    func_signature                 shift and go to state 7
    func_declaration               shift and go to state 16
    main                           shift and go to state 8

state 8

    (9) func_declaration -> main .

    $end            reduce using rule 9 (func_declaration -> main .)


state 9

    (16) var_type -> INT . sem_get_type
    (81) sem_get_type -> . empty
    (80) empty -> .

    ID              reduce using rule 80 (empty -> .)
    LEFT_BRACKET    reduce using rule 80 (empty -> .)

    sem_get_type                   shift and go to state 17
    empty                          shift and go to state 18

state 10

    (17) var_type -> DOUBLE . sem_get_type
    (81) sem_get_type -> . empty
    (80) empty -> .

    ID              reduce using rule 80 (empty -> .)
    LEFT_BRACKET    reduce using rule 80 (empty -> .)

    sem_get_type                   shift and go to state 19
    empty                          shift and go to state 18

state 11

    (18) var_type -> BOOL . sem_get_type
    (81) sem_get_type -> . empty
    (80) empty -> .

    ID              reduce using rule 80 (empty -> .)
    LEFT_BRACKET    reduce using rule 80 (empty -> .)

    sem_get_type                   shift and go to state 20
    empty                          shift and go to state 18

state 12

    (10) func_signature -> FUNCTION . func_type array func_signature_1 sem_end_func
    (26) func_type -> . INT sem_get_type
    (27) func_type -> . DOUBLE sem_get_type
    (28) func_type -> . BOOL sem_get_type
    (29) func_type -> . VOID sem_get_type

    INT             shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOL            shift and go to state 24
    VOID            shift and go to state 25

    func_type                      shift and go to state 21

state 13

    (79) main -> MAIN . block
    (30) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 27

    block                          shift and go to state 26

state 14

    (2) global_declaration -> var_declaration global_declaration .

    $end            reduce using rule 2 (global_declaration -> var_declaration global_declaration .)


state 15

    (4) var_declaration -> var_type ID . sem_add_var array SEMICOLON
    (84) sem_add_var -> . empty
    (80) empty -> .

    LEFT_BRACKET    reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)

    sem_add_var                    shift and go to state 28
    empty                          shift and go to state 29

state 16

    (8) func_declaration -> func_signature func_declaration .

    $end            reduce using rule 8 (func_declaration -> func_signature func_declaration .)


state 17

    (16) var_type -> INT sem_get_type .

    ID              reduce using rule 16 (var_type -> INT sem_get_type .)
    LEFT_BRACKET    reduce using rule 16 (var_type -> INT sem_get_type .)


state 18

    (81) sem_get_type -> empty .

    ID              reduce using rule 81 (sem_get_type -> empty .)
    LEFT_BRACKET    reduce using rule 81 (sem_get_type -> empty .)


state 19

    (17) var_type -> DOUBLE sem_get_type .

    ID              reduce using rule 17 (var_type -> DOUBLE sem_get_type .)
    LEFT_BRACKET    reduce using rule 17 (var_type -> DOUBLE sem_get_type .)


state 20

    (18) var_type -> BOOL sem_get_type .

    ID              reduce using rule 18 (var_type -> BOOL sem_get_type .)
    LEFT_BRACKET    reduce using rule 18 (var_type -> BOOL sem_get_type .)


state 21

    (10) func_signature -> FUNCTION func_type . array func_signature_1 sem_end_func
    (6) array -> . LEFT_BRACKET expression RIGHT_BRACKET array
    (7) array -> . empty
    (80) empty -> .

    LEFT_BRACKET    shift and go to state 31
    ID              reduce using rule 80 (empty -> .)

    array                          shift and go to state 30
    empty                          shift and go to state 32

state 22

    (26) func_type -> INT . sem_get_type
    (81) sem_get_type -> . empty
    (80) empty -> .

    LEFT_BRACKET    reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sem_get_type                   shift and go to state 33
    empty                          shift and go to state 18

state 23

    (27) func_type -> DOUBLE . sem_get_type
    (81) sem_get_type -> . empty
    (80) empty -> .

    LEFT_BRACKET    reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sem_get_type                   shift and go to state 34
    empty                          shift and go to state 18

state 24

    (28) func_type -> BOOL . sem_get_type
    (81) sem_get_type -> . empty
    (80) empty -> .

    LEFT_BRACKET    reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sem_get_type                   shift and go to state 35
    empty                          shift and go to state 18

state 25

    (29) func_type -> VOID . sem_get_type
    (81) sem_get_type -> . empty
    (80) empty -> .

    LEFT_BRACKET    reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sem_get_type                   shift and go to state 36
    empty                          shift and go to state 18

state 26

    (79) main -> MAIN block .

    $end            reduce using rule 79 (main -> MAIN block .)


state 27

    (30) block -> LEFT_BRACE . block_1
    (31) block_1 -> . statement block_1
    (32) block_1 -> . block_2
    (36) statement -> . var_declaration
    (37) statement -> . assignment
    (38) statement -> . condition
    (39) statement -> . function_call SEMICOLON
    (40) statement -> . while_cycle
    (41) statement -> . read
    (42) statement -> . write
    (33) block_2 -> . RETURN expression SEMICOLON block_3
    (34) block_2 -> . block_3
    (4) var_declaration -> . var_type ID sem_add_var array SEMICOLON
    (5) var_declaration -> . empty
    (43) assignment -> . ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON
    (68) condition -> . IF LEFT_PAR expression RIGHT_PAR block condition_1
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (76) while_cycle -> . WHILE LEFT_PAR expression RIGHT_PAR block
    (77) read -> . READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON
    (78) write -> . WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON
    (35) block_3 -> . RIGHT_BRACE
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type
    (80) empty -> .

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RIGHT_BRACE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RETURN          shift and go to state 47
    ID              shift and go to state 49
    IF              shift and go to state 50
    WHILE           shift and go to state 51
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RIGHT_BRACE     shift and go to state 54
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    BOOL            shift and go to state 11

  ! RETURN          [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! IF              [ reduce using rule 80 (empty -> .) ]
  ! WHILE           [ reduce using rule 80 (empty -> .) ]
  ! READ            [ reduce using rule 80 (empty -> .) ]
  ! WRITE           [ reduce using rule 80 (empty -> .) ]
  ! RIGHT_BRACE     [ reduce using rule 80 (empty -> .) ]
  ! INT             [ reduce using rule 80 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 80 (empty -> .) ]
  ! BOOL            [ reduce using rule 80 (empty -> .) ]

    block_1                        shift and go to state 37
    statement                      shift and go to state 38
    block_2                        shift and go to state 39
    var_declaration                shift and go to state 40
    assignment                     shift and go to state 41
    condition                      shift and go to state 42
    function_call                  shift and go to state 43
    while_cycle                    shift and go to state 44
    read                           shift and go to state 45
    write                          shift and go to state 46
    block_3                        shift and go to state 48
    var_type                       shift and go to state 5
    empty                          shift and go to state 6

state 28

    (4) var_declaration -> var_type ID sem_add_var . array SEMICOLON
    (6) array -> . LEFT_BRACKET expression RIGHT_BRACKET array
    (7) array -> . empty
    (80) empty -> .

    LEFT_BRACKET    shift and go to state 31
    SEMICOLON       reduce using rule 80 (empty -> .)

    array                          shift and go to state 55
    empty                          shift and go to state 32

state 29

    (84) sem_add_var -> empty .

    LEFT_BRACKET    reduce using rule 84 (sem_add_var -> empty .)
    SEMICOLON       reduce using rule 84 (sem_add_var -> empty .)


state 30

    (10) func_signature -> FUNCTION func_type array . func_signature_1 sem_end_func
    (11) func_signature_1 -> . ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block

    ID              shift and go to state 57

    func_signature_1               shift and go to state 56

state 31

    (6) array -> LEFT_BRACKET . expression RIGHT_BRACKET array
    (44) expression -> . exp expression_1
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    expression                     shift and go to state 58
    exp                            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 32

    (7) array -> empty .

    ID              reduce using rule 7 (array -> empty .)
    SEMICOLON       reduce using rule 7 (array -> empty .)
    MULTIPLY        reduce using rule 7 (array -> empty .)
    DIVIDE          reduce using rule 7 (array -> empty .)
    PLUS            reduce using rule 7 (array -> empty .)
    MINUS           reduce using rule 7 (array -> empty .)
    IS_EQUAL_TO     reduce using rule 7 (array -> empty .)
    NOT_EQUAL_TO    reduce using rule 7 (array -> empty .)
    GREATER_THAN    reduce using rule 7 (array -> empty .)
    LESS_THAN       reduce using rule 7 (array -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 7 (array -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 7 (array -> empty .)
    AND             reduce using rule 7 (array -> empty .)
    OR              reduce using rule 7 (array -> empty .)
    RIGHT_BRACKET   reduce using rule 7 (array -> empty .)
    COMMA           reduce using rule 7 (array -> empty .)
    RIGHT_PAR       reduce using rule 7 (array -> empty .)


state 33

    (26) func_type -> INT sem_get_type .

    LEFT_BRACKET    reduce using rule 26 (func_type -> INT sem_get_type .)
    ID              reduce using rule 26 (func_type -> INT sem_get_type .)


state 34

    (27) func_type -> DOUBLE sem_get_type .

    LEFT_BRACKET    reduce using rule 27 (func_type -> DOUBLE sem_get_type .)
    ID              reduce using rule 27 (func_type -> DOUBLE sem_get_type .)


state 35

    (28) func_type -> BOOL sem_get_type .

    LEFT_BRACKET    reduce using rule 28 (func_type -> BOOL sem_get_type .)
    ID              reduce using rule 28 (func_type -> BOOL sem_get_type .)


state 36

    (29) func_type -> VOID sem_get_type .

    LEFT_BRACKET    reduce using rule 29 (func_type -> VOID sem_get_type .)
    ID              reduce using rule 29 (func_type -> VOID sem_get_type .)


state 37

    (30) block -> LEFT_BRACE block_1 .

    $end            reduce using rule 30 (block -> LEFT_BRACE block_1 .)
    ELSE            reduce using rule 30 (block -> LEFT_BRACE block_1 .)
    RETURN          reduce using rule 30 (block -> LEFT_BRACE block_1 .)
    ID              reduce using rule 30 (block -> LEFT_BRACE block_1 .)
    IF              reduce using rule 30 (block -> LEFT_BRACE block_1 .)
    WHILE           reduce using rule 30 (block -> LEFT_BRACE block_1 .)
    READ            reduce using rule 30 (block -> LEFT_BRACE block_1 .)
    WRITE           reduce using rule 30 (block -> LEFT_BRACE block_1 .)
    RIGHT_BRACE     reduce using rule 30 (block -> LEFT_BRACE block_1 .)
    INT             reduce using rule 30 (block -> LEFT_BRACE block_1 .)
    DOUBLE          reduce using rule 30 (block -> LEFT_BRACE block_1 .)
    BOOL            reduce using rule 30 (block -> LEFT_BRACE block_1 .)
    FUNCTION        reduce using rule 30 (block -> LEFT_BRACE block_1 .)
    MAIN            reduce using rule 30 (block -> LEFT_BRACE block_1 .)


state 38

    (31) block_1 -> statement . block_1
    (31) block_1 -> . statement block_1
    (32) block_1 -> . block_2
    (36) statement -> . var_declaration
    (37) statement -> . assignment
    (38) statement -> . condition
    (39) statement -> . function_call SEMICOLON
    (40) statement -> . while_cycle
    (41) statement -> . read
    (42) statement -> . write
    (33) block_2 -> . RETURN expression SEMICOLON block_3
    (34) block_2 -> . block_3
    (4) var_declaration -> . var_type ID sem_add_var array SEMICOLON
    (5) var_declaration -> . empty
    (43) assignment -> . ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON
    (68) condition -> . IF LEFT_PAR expression RIGHT_PAR block condition_1
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (76) while_cycle -> . WHILE LEFT_PAR expression RIGHT_PAR block
    (77) read -> . READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON
    (78) write -> . WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON
    (35) block_3 -> . RIGHT_BRACE
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type
    (80) empty -> .

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RIGHT_BRACE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RETURN          shift and go to state 47
    ID              shift and go to state 49
    IF              shift and go to state 50
    WHILE           shift and go to state 51
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RIGHT_BRACE     shift and go to state 54
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    BOOL            shift and go to state 11

  ! RETURN          [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! IF              [ reduce using rule 80 (empty -> .) ]
  ! WHILE           [ reduce using rule 80 (empty -> .) ]
  ! READ            [ reduce using rule 80 (empty -> .) ]
  ! WRITE           [ reduce using rule 80 (empty -> .) ]
  ! RIGHT_BRACE     [ reduce using rule 80 (empty -> .) ]
  ! INT             [ reduce using rule 80 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 80 (empty -> .) ]
  ! BOOL            [ reduce using rule 80 (empty -> .) ]

    statement                      shift and go to state 38
    block_1                        shift and go to state 75
    block_2                        shift and go to state 39
    var_declaration                shift and go to state 40
    assignment                     shift and go to state 41
    condition                      shift and go to state 42
    function_call                  shift and go to state 43
    while_cycle                    shift and go to state 44
    read                           shift and go to state 45
    write                          shift and go to state 46
    block_3                        shift and go to state 48
    var_type                       shift and go to state 5
    empty                          shift and go to state 6

state 39

    (32) block_1 -> block_2 .

    $end            reduce using rule 32 (block_1 -> block_2 .)
    ELSE            reduce using rule 32 (block_1 -> block_2 .)
    RETURN          reduce using rule 32 (block_1 -> block_2 .)
    ID              reduce using rule 32 (block_1 -> block_2 .)
    IF              reduce using rule 32 (block_1 -> block_2 .)
    WHILE           reduce using rule 32 (block_1 -> block_2 .)
    READ            reduce using rule 32 (block_1 -> block_2 .)
    WRITE           reduce using rule 32 (block_1 -> block_2 .)
    RIGHT_BRACE     reduce using rule 32 (block_1 -> block_2 .)
    INT             reduce using rule 32 (block_1 -> block_2 .)
    DOUBLE          reduce using rule 32 (block_1 -> block_2 .)
    BOOL            reduce using rule 32 (block_1 -> block_2 .)
    FUNCTION        reduce using rule 32 (block_1 -> block_2 .)
    MAIN            reduce using rule 32 (block_1 -> block_2 .)


state 40

    (36) statement -> var_declaration .

    RETURN          reduce using rule 36 (statement -> var_declaration .)
    ID              reduce using rule 36 (statement -> var_declaration .)
    IF              reduce using rule 36 (statement -> var_declaration .)
    WHILE           reduce using rule 36 (statement -> var_declaration .)
    READ            reduce using rule 36 (statement -> var_declaration .)
    WRITE           reduce using rule 36 (statement -> var_declaration .)
    RIGHT_BRACE     reduce using rule 36 (statement -> var_declaration .)
    INT             reduce using rule 36 (statement -> var_declaration .)
    DOUBLE          reduce using rule 36 (statement -> var_declaration .)
    BOOL            reduce using rule 36 (statement -> var_declaration .)


state 41

    (37) statement -> assignment .

    RETURN          reduce using rule 37 (statement -> assignment .)
    ID              reduce using rule 37 (statement -> assignment .)
    IF              reduce using rule 37 (statement -> assignment .)
    WHILE           reduce using rule 37 (statement -> assignment .)
    READ            reduce using rule 37 (statement -> assignment .)
    WRITE           reduce using rule 37 (statement -> assignment .)
    RIGHT_BRACE     reduce using rule 37 (statement -> assignment .)
    INT             reduce using rule 37 (statement -> assignment .)
    DOUBLE          reduce using rule 37 (statement -> assignment .)
    BOOL            reduce using rule 37 (statement -> assignment .)


state 42

    (38) statement -> condition .

    RETURN          reduce using rule 38 (statement -> condition .)
    ID              reduce using rule 38 (statement -> condition .)
    IF              reduce using rule 38 (statement -> condition .)
    WHILE           reduce using rule 38 (statement -> condition .)
    READ            reduce using rule 38 (statement -> condition .)
    WRITE           reduce using rule 38 (statement -> condition .)
    RIGHT_BRACE     reduce using rule 38 (statement -> condition .)
    INT             reduce using rule 38 (statement -> condition .)
    DOUBLE          reduce using rule 38 (statement -> condition .)
    BOOL            reduce using rule 38 (statement -> condition .)


state 43

    (39) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 76


state 44

    (40) statement -> while_cycle .

    RETURN          reduce using rule 40 (statement -> while_cycle .)
    ID              reduce using rule 40 (statement -> while_cycle .)
    IF              reduce using rule 40 (statement -> while_cycle .)
    WHILE           reduce using rule 40 (statement -> while_cycle .)
    READ            reduce using rule 40 (statement -> while_cycle .)
    WRITE           reduce using rule 40 (statement -> while_cycle .)
    RIGHT_BRACE     reduce using rule 40 (statement -> while_cycle .)
    INT             reduce using rule 40 (statement -> while_cycle .)
    DOUBLE          reduce using rule 40 (statement -> while_cycle .)
    BOOL            reduce using rule 40 (statement -> while_cycle .)


state 45

    (41) statement -> read .

    RETURN          reduce using rule 41 (statement -> read .)
    ID              reduce using rule 41 (statement -> read .)
    IF              reduce using rule 41 (statement -> read .)
    WHILE           reduce using rule 41 (statement -> read .)
    READ            reduce using rule 41 (statement -> read .)
    WRITE           reduce using rule 41 (statement -> read .)
    RIGHT_BRACE     reduce using rule 41 (statement -> read .)
    INT             reduce using rule 41 (statement -> read .)
    DOUBLE          reduce using rule 41 (statement -> read .)
    BOOL            reduce using rule 41 (statement -> read .)


state 46

    (42) statement -> write .

    RETURN          reduce using rule 42 (statement -> write .)
    ID              reduce using rule 42 (statement -> write .)
    IF              reduce using rule 42 (statement -> write .)
    WHILE           reduce using rule 42 (statement -> write .)
    READ            reduce using rule 42 (statement -> write .)
    WRITE           reduce using rule 42 (statement -> write .)
    RIGHT_BRACE     reduce using rule 42 (statement -> write .)
    INT             reduce using rule 42 (statement -> write .)
    DOUBLE          reduce using rule 42 (statement -> write .)
    BOOL            reduce using rule 42 (statement -> write .)


state 47

    (33) block_2 -> RETURN . expression SEMICOLON block_3
    (44) expression -> . exp expression_1
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    expression                     shift and go to state 77
    exp                            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 48

    (34) block_2 -> block_3 .

    $end            reduce using rule 34 (block_2 -> block_3 .)
    ELSE            reduce using rule 34 (block_2 -> block_3 .)
    RETURN          reduce using rule 34 (block_2 -> block_3 .)
    ID              reduce using rule 34 (block_2 -> block_3 .)
    IF              reduce using rule 34 (block_2 -> block_3 .)
    WHILE           reduce using rule 34 (block_2 -> block_3 .)
    READ            reduce using rule 34 (block_2 -> block_3 .)
    WRITE           reduce using rule 34 (block_2 -> block_3 .)
    RIGHT_BRACE     reduce using rule 34 (block_2 -> block_3 .)
    INT             reduce using rule 34 (block_2 -> block_3 .)
    DOUBLE          reduce using rule 34 (block_2 -> block_3 .)
    BOOL            reduce using rule 34 (block_2 -> block_3 .)
    FUNCTION        reduce using rule 34 (block_2 -> block_3 .)
    MAIN            reduce using rule 34 (block_2 -> block_3 .)


state 49

    (43) assignment -> ID . sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON
    (71) function_call -> ID . LEFT_PAR param_call RIGHT_PAR
    (86) sem_push_operand -> . empty
    (80) empty -> .

    LEFT_PAR        shift and go to state 79
    ASSIGN          reduce using rule 80 (empty -> .)

    sem_push_operand               shift and go to state 78
    empty                          shift and go to state 80

state 50

    (68) condition -> IF . LEFT_PAR expression RIGHT_PAR block condition_1

    LEFT_PAR        shift and go to state 81


state 51

    (76) while_cycle -> WHILE . LEFT_PAR expression RIGHT_PAR block

    LEFT_PAR        shift and go to state 82


state 52

    (77) read -> READ . sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 83
    empty                          shift and go to state 84

state 53

    (78) write -> WRITE . sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 85
    empty                          shift and go to state 84

state 54

    (35) block_3 -> RIGHT_BRACE .

    $end            reduce using rule 35 (block_3 -> RIGHT_BRACE .)
    ELSE            reduce using rule 35 (block_3 -> RIGHT_BRACE .)
    RETURN          reduce using rule 35 (block_3 -> RIGHT_BRACE .)
    ID              reduce using rule 35 (block_3 -> RIGHT_BRACE .)
    IF              reduce using rule 35 (block_3 -> RIGHT_BRACE .)
    WHILE           reduce using rule 35 (block_3 -> RIGHT_BRACE .)
    READ            reduce using rule 35 (block_3 -> RIGHT_BRACE .)
    WRITE           reduce using rule 35 (block_3 -> RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 35 (block_3 -> RIGHT_BRACE .)
    INT             reduce using rule 35 (block_3 -> RIGHT_BRACE .)
    DOUBLE          reduce using rule 35 (block_3 -> RIGHT_BRACE .)
    BOOL            reduce using rule 35 (block_3 -> RIGHT_BRACE .)
    FUNCTION        reduce using rule 35 (block_3 -> RIGHT_BRACE .)
    MAIN            reduce using rule 35 (block_3 -> RIGHT_BRACE .)


state 55

    (4) var_declaration -> var_type ID sem_add_var array . SEMICOLON

    SEMICOLON       shift and go to state 86


state 56

    (10) func_signature -> FUNCTION func_type array func_signature_1 . sem_end_func
    (83) sem_end_func -> . empty
    (80) empty -> .

    FUNCTION        reduce using rule 80 (empty -> .)
    MAIN            reduce using rule 80 (empty -> .)

    sem_end_func                   shift and go to state 87
    empty                          shift and go to state 88

state 57

    (11) func_signature_1 -> ID . sem_add_func LEFT_PAR param_declaration RIGHT_PAR block
    (82) sem_add_func -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)

    sem_add_func                   shift and go to state 89
    empty                          shift and go to state 90

state 58

    (6) array -> LEFT_BRACKET expression . RIGHT_BRACKET array

    RIGHT_BRACKET   shift and go to state 91


state 59

    (44) expression -> exp . expression_1
    (45) expression_1 -> . IS_EQUAL_TO exp
    (46) expression_1 -> . NOT_EQUAL_TO exp
    (47) expression_1 -> . GREATER_THAN exp
    (48) expression_1 -> . LESS_THAN exp
    (49) expression_1 -> . GREATER_THAN_OR_EQUAL_TO exp
    (50) expression_1 -> . LESS_THAN_OR_EQUAL_TO exp
    (51) expression_1 -> . AND exp
    (52) expression_1 -> . OR exp
    (53) expression_1 -> . empty
    (80) empty -> .

    IS_EQUAL_TO     shift and go to state 93
    NOT_EQUAL_TO    shift and go to state 94
    GREATER_THAN    shift and go to state 95
    LESS_THAN       shift and go to state 96
    GREATER_THAN_OR_EQUAL_TO shift and go to state 97
    LESS_THAN_OR_EQUAL_TO shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    expression_1                   shift and go to state 92
    empty                          shift and go to state 101

state 60

    (54) exp -> term . sem_top_term exp_1
    (90) sem_top_term -> . empty
    (80) empty -> .

    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    sem_top_term                   shift and go to state 102
    empty                          shift and go to state 103

state 61

    (58) term -> factor . sem_top_factor term_1
    (89) sem_top_factor -> . empty
    (80) empty -> .

    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    sem_top_factor                 shift and go to state 104
    empty                          shift and go to state 105

state 62

    (62) factor -> LEFT_PAR . sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (91) sem_false_bottom_begin -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_false_bottom_begin         shift and go to state 106
    empty                          shift and go to state 107

state 63

    (63) factor -> var_cte .

    MULTIPLY        reduce using rule 63 (factor -> var_cte .)
    DIVIDE          reduce using rule 63 (factor -> var_cte .)
    PLUS            reduce using rule 63 (factor -> var_cte .)
    MINUS           reduce using rule 63 (factor -> var_cte .)
    IS_EQUAL_TO     reduce using rule 63 (factor -> var_cte .)
    NOT_EQUAL_TO    reduce using rule 63 (factor -> var_cte .)
    GREATER_THAN    reduce using rule 63 (factor -> var_cte .)
    LESS_THAN       reduce using rule 63 (factor -> var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 63 (factor -> var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 63 (factor -> var_cte .)
    AND             reduce using rule 63 (factor -> var_cte .)
    OR              reduce using rule 63 (factor -> var_cte .)
    RIGHT_BRACKET   reduce using rule 63 (factor -> var_cte .)
    SEMICOLON       reduce using rule 63 (factor -> var_cte .)
    COMMA           reduce using rule 63 (factor -> var_cte .)
    RIGHT_PAR       reduce using rule 63 (factor -> var_cte .)


state 64

    (64) factor -> factor_1 . var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR

    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

    var_cte                        shift and go to state 108
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69

state 65

    (19) var_cte -> CTE_I . sem_push_constant_int
    (87) sem_push_constant_int -> . empty
    (80) empty -> .

    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    sem_push_constant_int          shift and go to state 109
    empty                          shift and go to state 110

state 66

    (20) var_cte -> CTE_D . sem_push_constant_double
    (88) sem_push_constant_double -> . empty
    (80) empty -> .

    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    sem_push_constant_double       shift and go to state 111
    empty                          shift and go to state 112

state 67

    (21) var_cte -> cte_b .

    MULTIPLY        reduce using rule 21 (var_cte -> cte_b .)
    DIVIDE          reduce using rule 21 (var_cte -> cte_b .)
    PLUS            reduce using rule 21 (var_cte -> cte_b .)
    MINUS           reduce using rule 21 (var_cte -> cte_b .)
    IS_EQUAL_TO     reduce using rule 21 (var_cte -> cte_b .)
    NOT_EQUAL_TO    reduce using rule 21 (var_cte -> cte_b .)
    GREATER_THAN    reduce using rule 21 (var_cte -> cte_b .)
    LESS_THAN       reduce using rule 21 (var_cte -> cte_b .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> cte_b .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 21 (var_cte -> cte_b .)
    AND             reduce using rule 21 (var_cte -> cte_b .)
    OR              reduce using rule 21 (var_cte -> cte_b .)
    RIGHT_BRACKET   reduce using rule 21 (var_cte -> cte_b .)
    SEMICOLON       reduce using rule 21 (var_cte -> cte_b .)
    COMMA           reduce using rule 21 (var_cte -> cte_b .)
    RIGHT_PAR       reduce using rule 21 (var_cte -> cte_b .)


state 68

    (22) var_cte -> ID . sem_push_operand array
    (71) function_call -> ID . LEFT_PAR param_call RIGHT_PAR
    (86) sem_push_operand -> . empty
    (80) empty -> .

    LEFT_PAR        shift and go to state 79
    LEFT_BRACKET    reduce using rule 80 (empty -> .)
    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    sem_push_operand               shift and go to state 113
    empty                          shift and go to state 80

state 69

    (23) var_cte -> function_call .

    MULTIPLY        reduce using rule 23 (var_cte -> function_call .)
    DIVIDE          reduce using rule 23 (var_cte -> function_call .)
    PLUS            reduce using rule 23 (var_cte -> function_call .)
    MINUS           reduce using rule 23 (var_cte -> function_call .)
    IS_EQUAL_TO     reduce using rule 23 (var_cte -> function_call .)
    NOT_EQUAL_TO    reduce using rule 23 (var_cte -> function_call .)
    GREATER_THAN    reduce using rule 23 (var_cte -> function_call .)
    LESS_THAN       reduce using rule 23 (var_cte -> function_call .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 23 (var_cte -> function_call .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 23 (var_cte -> function_call .)
    AND             reduce using rule 23 (var_cte -> function_call .)
    OR              reduce using rule 23 (var_cte -> function_call .)
    RIGHT_BRACKET   reduce using rule 23 (var_cte -> function_call .)
    SEMICOLON       reduce using rule 23 (var_cte -> function_call .)
    COMMA           reduce using rule 23 (var_cte -> function_call .)
    RIGHT_PAR       reduce using rule 23 (var_cte -> function_call .)


state 70

    (65) factor_1 -> PLUS .

    CTE_I           reduce using rule 65 (factor_1 -> PLUS .)
    CTE_D           reduce using rule 65 (factor_1 -> PLUS .)
    ID              reduce using rule 65 (factor_1 -> PLUS .)
    TRUE            reduce using rule 65 (factor_1 -> PLUS .)
    FALSE           reduce using rule 65 (factor_1 -> PLUS .)


state 71

    (66) factor_1 -> MINUS .

    CTE_I           reduce using rule 66 (factor_1 -> MINUS .)
    CTE_D           reduce using rule 66 (factor_1 -> MINUS .)
    ID              reduce using rule 66 (factor_1 -> MINUS .)
    TRUE            reduce using rule 66 (factor_1 -> MINUS .)
    FALSE           reduce using rule 66 (factor_1 -> MINUS .)


state 72

    (67) factor_1 -> empty .

    CTE_I           reduce using rule 67 (factor_1 -> empty .)
    CTE_D           reduce using rule 67 (factor_1 -> empty .)
    ID              reduce using rule 67 (factor_1 -> empty .)
    TRUE            reduce using rule 67 (factor_1 -> empty .)
    FALSE           reduce using rule 67 (factor_1 -> empty .)


state 73

    (24) cte_b -> TRUE .

    MULTIPLY        reduce using rule 24 (cte_b -> TRUE .)
    DIVIDE          reduce using rule 24 (cte_b -> TRUE .)
    PLUS            reduce using rule 24 (cte_b -> TRUE .)
    MINUS           reduce using rule 24 (cte_b -> TRUE .)
    IS_EQUAL_TO     reduce using rule 24 (cte_b -> TRUE .)
    NOT_EQUAL_TO    reduce using rule 24 (cte_b -> TRUE .)
    GREATER_THAN    reduce using rule 24 (cte_b -> TRUE .)
    LESS_THAN       reduce using rule 24 (cte_b -> TRUE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 24 (cte_b -> TRUE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 24 (cte_b -> TRUE .)
    AND             reduce using rule 24 (cte_b -> TRUE .)
    OR              reduce using rule 24 (cte_b -> TRUE .)
    RIGHT_BRACKET   reduce using rule 24 (cte_b -> TRUE .)
    SEMICOLON       reduce using rule 24 (cte_b -> TRUE .)
    COMMA           reduce using rule 24 (cte_b -> TRUE .)
    RIGHT_PAR       reduce using rule 24 (cte_b -> TRUE .)


state 74

    (25) cte_b -> FALSE .

    MULTIPLY        reduce using rule 25 (cte_b -> FALSE .)
    DIVIDE          reduce using rule 25 (cte_b -> FALSE .)
    PLUS            reduce using rule 25 (cte_b -> FALSE .)
    MINUS           reduce using rule 25 (cte_b -> FALSE .)
    IS_EQUAL_TO     reduce using rule 25 (cte_b -> FALSE .)
    NOT_EQUAL_TO    reduce using rule 25 (cte_b -> FALSE .)
    GREATER_THAN    reduce using rule 25 (cte_b -> FALSE .)
    LESS_THAN       reduce using rule 25 (cte_b -> FALSE .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 25 (cte_b -> FALSE .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 25 (cte_b -> FALSE .)
    AND             reduce using rule 25 (cte_b -> FALSE .)
    OR              reduce using rule 25 (cte_b -> FALSE .)
    RIGHT_BRACKET   reduce using rule 25 (cte_b -> FALSE .)
    SEMICOLON       reduce using rule 25 (cte_b -> FALSE .)
    COMMA           reduce using rule 25 (cte_b -> FALSE .)
    RIGHT_PAR       reduce using rule 25 (cte_b -> FALSE .)


state 75

    (31) block_1 -> statement block_1 .

    $end            reduce using rule 31 (block_1 -> statement block_1 .)
    ELSE            reduce using rule 31 (block_1 -> statement block_1 .)
    RETURN          reduce using rule 31 (block_1 -> statement block_1 .)
    ID              reduce using rule 31 (block_1 -> statement block_1 .)
    IF              reduce using rule 31 (block_1 -> statement block_1 .)
    WHILE           reduce using rule 31 (block_1 -> statement block_1 .)
    READ            reduce using rule 31 (block_1 -> statement block_1 .)
    WRITE           reduce using rule 31 (block_1 -> statement block_1 .)
    RIGHT_BRACE     reduce using rule 31 (block_1 -> statement block_1 .)
    INT             reduce using rule 31 (block_1 -> statement block_1 .)
    DOUBLE          reduce using rule 31 (block_1 -> statement block_1 .)
    BOOL            reduce using rule 31 (block_1 -> statement block_1 .)
    FUNCTION        reduce using rule 31 (block_1 -> statement block_1 .)
    MAIN            reduce using rule 31 (block_1 -> statement block_1 .)


state 76

    (39) statement -> function_call SEMICOLON .

    RETURN          reduce using rule 39 (statement -> function_call SEMICOLON .)
    ID              reduce using rule 39 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 39 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 39 (statement -> function_call SEMICOLON .)
    READ            reduce using rule 39 (statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 39 (statement -> function_call SEMICOLON .)
    RIGHT_BRACE     reduce using rule 39 (statement -> function_call SEMICOLON .)
    INT             reduce using rule 39 (statement -> function_call SEMICOLON .)
    DOUBLE          reduce using rule 39 (statement -> function_call SEMICOLON .)
    BOOL            reduce using rule 39 (statement -> function_call SEMICOLON .)


state 77

    (33) block_2 -> RETURN expression . SEMICOLON block_3

    SEMICOLON       shift and go to state 114


state 78

    (43) assignment -> ID sem_push_operand . ASSIGN sem_push_operator expression sem_assign_value SEMICOLON

    ASSIGN          shift and go to state 115


state 79

    (71) function_call -> ID LEFT_PAR . param_call RIGHT_PAR
    (72) param_call -> . expression param_call_1
    (73) param_call -> . empty
    (44) expression -> . exp expression_1
    (80) empty -> .
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    param_call                     shift and go to state 116
    expression                     shift and go to state 117
    empty                          shift and go to state 118
    exp                            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69

state 80

    (86) sem_push_operand -> empty .

    ASSIGN          reduce using rule 86 (sem_push_operand -> empty .)
    LEFT_BRACKET    reduce using rule 86 (sem_push_operand -> empty .)
    MULTIPLY        reduce using rule 86 (sem_push_operand -> empty .)
    DIVIDE          reduce using rule 86 (sem_push_operand -> empty .)
    PLUS            reduce using rule 86 (sem_push_operand -> empty .)
    MINUS           reduce using rule 86 (sem_push_operand -> empty .)
    IS_EQUAL_TO     reduce using rule 86 (sem_push_operand -> empty .)
    NOT_EQUAL_TO    reduce using rule 86 (sem_push_operand -> empty .)
    GREATER_THAN    reduce using rule 86 (sem_push_operand -> empty .)
    LESS_THAN       reduce using rule 86 (sem_push_operand -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 86 (sem_push_operand -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 86 (sem_push_operand -> empty .)
    AND             reduce using rule 86 (sem_push_operand -> empty .)
    OR              reduce using rule 86 (sem_push_operand -> empty .)
    RIGHT_BRACKET   reduce using rule 86 (sem_push_operand -> empty .)
    SEMICOLON       reduce using rule 86 (sem_push_operand -> empty .)
    COMMA           reduce using rule 86 (sem_push_operand -> empty .)
    RIGHT_PAR       reduce using rule 86 (sem_push_operand -> empty .)


state 81

    (68) condition -> IF LEFT_PAR . expression RIGHT_PAR block condition_1
    (44) expression -> . exp expression_1
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    expression                     shift and go to state 119
    exp                            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 82

    (76) while_cycle -> WHILE LEFT_PAR . expression RIGHT_PAR block
    (44) expression -> . exp expression_1
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    expression                     shift and go to state 120
    exp                            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 83

    (77) read -> READ sem_push_operator . LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON

    LEFT_PAR        shift and go to state 121


state 84

    (85) sem_push_operator -> empty .

    LEFT_PAR        reduce using rule 85 (sem_push_operator -> empty .)
    CTE_I           reduce using rule 85 (sem_push_operator -> empty .)
    CTE_D           reduce using rule 85 (sem_push_operator -> empty .)
    ID              reduce using rule 85 (sem_push_operator -> empty .)
    PLUS            reduce using rule 85 (sem_push_operator -> empty .)
    MINUS           reduce using rule 85 (sem_push_operator -> empty .)
    TRUE            reduce using rule 85 (sem_push_operator -> empty .)
    FALSE           reduce using rule 85 (sem_push_operator -> empty .)


state 85

    (78) write -> WRITE sem_push_operator . LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON

    LEFT_PAR        shift and go to state 122


state 86

    (4) var_declaration -> var_type ID sem_add_var array SEMICOLON .

    INT             reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    DOUBLE          reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    BOOL            reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    FUNCTION        reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    MAIN            reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    RETURN          reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    ID              reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    IF              reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    WHILE           reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    READ            reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    WRITE           reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (var_declaration -> var_type ID sem_add_var array SEMICOLON .)


state 87

    (10) func_signature -> FUNCTION func_type array func_signature_1 sem_end_func .

    FUNCTION        reduce using rule 10 (func_signature -> FUNCTION func_type array func_signature_1 sem_end_func .)
    MAIN            reduce using rule 10 (func_signature -> FUNCTION func_type array func_signature_1 sem_end_func .)


state 88

    (83) sem_end_func -> empty .

    FUNCTION        reduce using rule 83 (sem_end_func -> empty .)
    MAIN            reduce using rule 83 (sem_end_func -> empty .)


state 89

    (11) func_signature_1 -> ID sem_add_func . LEFT_PAR param_declaration RIGHT_PAR block

    LEFT_PAR        shift and go to state 123


state 90

    (82) sem_add_func -> empty .

    LEFT_PAR        reduce using rule 82 (sem_add_func -> empty .)


state 91

    (6) array -> LEFT_BRACKET expression RIGHT_BRACKET . array
    (6) array -> . LEFT_BRACKET expression RIGHT_BRACKET array
    (7) array -> . empty
    (80) empty -> .

    LEFT_BRACKET    shift and go to state 31
    ID              reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    array                          shift and go to state 124
    empty                          shift and go to state 32

state 92

    (44) expression -> exp expression_1 .

    RIGHT_BRACKET   reduce using rule 44 (expression -> exp expression_1 .)
    SEMICOLON       reduce using rule 44 (expression -> exp expression_1 .)
    COMMA           reduce using rule 44 (expression -> exp expression_1 .)
    RIGHT_PAR       reduce using rule 44 (expression -> exp expression_1 .)


state 93

    (45) expression_1 -> IS_EQUAL_TO . exp
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 125
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 94

    (46) expression_1 -> NOT_EQUAL_TO . exp
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 126
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 95

    (47) expression_1 -> GREATER_THAN . exp
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 127
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 96

    (48) expression_1 -> LESS_THAN . exp
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 128
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 97

    (49) expression_1 -> GREATER_THAN_OR_EQUAL_TO . exp
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 129
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 98

    (50) expression_1 -> LESS_THAN_OR_EQUAL_TO . exp
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 130
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 99

    (51) expression_1 -> AND . exp
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 131
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 100

    (52) expression_1 -> OR . exp
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 132
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 101

    (53) expression_1 -> empty .

    RIGHT_BRACKET   reduce using rule 53 (expression_1 -> empty .)
    SEMICOLON       reduce using rule 53 (expression_1 -> empty .)
    COMMA           reduce using rule 53 (expression_1 -> empty .)
    RIGHT_PAR       reduce using rule 53 (expression_1 -> empty .)


state 102

    (54) exp -> term sem_top_term . exp_1
    (55) exp_1 -> . PLUS sem_push_operator exp
    (56) exp_1 -> . MINUS sem_push_operator exp
    (57) exp_1 -> . empty
    (80) empty -> .

    PLUS            shift and go to state 134
    MINUS           shift and go to state 135
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    exp_1                          shift and go to state 133
    empty                          shift and go to state 136

state 103

    (90) sem_top_term -> empty .

    PLUS            reduce using rule 90 (sem_top_term -> empty .)
    MINUS           reduce using rule 90 (sem_top_term -> empty .)
    IS_EQUAL_TO     reduce using rule 90 (sem_top_term -> empty .)
    NOT_EQUAL_TO    reduce using rule 90 (sem_top_term -> empty .)
    GREATER_THAN    reduce using rule 90 (sem_top_term -> empty .)
    LESS_THAN       reduce using rule 90 (sem_top_term -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 90 (sem_top_term -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 90 (sem_top_term -> empty .)
    AND             reduce using rule 90 (sem_top_term -> empty .)
    OR              reduce using rule 90 (sem_top_term -> empty .)
    RIGHT_BRACKET   reduce using rule 90 (sem_top_term -> empty .)
    SEMICOLON       reduce using rule 90 (sem_top_term -> empty .)
    COMMA           reduce using rule 90 (sem_top_term -> empty .)
    RIGHT_PAR       reduce using rule 90 (sem_top_term -> empty .)


state 104

    (58) term -> factor sem_top_factor . term_1
    (59) term_1 -> . MULTIPLY sem_push_operator term
    (60) term_1 -> . DIVIDE sem_push_operator term
    (61) term_1 -> . empty
    (80) empty -> .

    MULTIPLY        shift and go to state 138
    DIVIDE          shift and go to state 139
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    term_1                         shift and go to state 137
    empty                          shift and go to state 140

state 105

    (89) sem_top_factor -> empty .

    MULTIPLY        reduce using rule 89 (sem_top_factor -> empty .)
    DIVIDE          reduce using rule 89 (sem_top_factor -> empty .)
    PLUS            reduce using rule 89 (sem_top_factor -> empty .)
    MINUS           reduce using rule 89 (sem_top_factor -> empty .)
    IS_EQUAL_TO     reduce using rule 89 (sem_top_factor -> empty .)
    NOT_EQUAL_TO    reduce using rule 89 (sem_top_factor -> empty .)
    GREATER_THAN    reduce using rule 89 (sem_top_factor -> empty .)
    LESS_THAN       reduce using rule 89 (sem_top_factor -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 89 (sem_top_factor -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 89 (sem_top_factor -> empty .)
    AND             reduce using rule 89 (sem_top_factor -> empty .)
    OR              reduce using rule 89 (sem_top_factor -> empty .)
    RIGHT_BRACKET   reduce using rule 89 (sem_top_factor -> empty .)
    SEMICOLON       reduce using rule 89 (sem_top_factor -> empty .)
    COMMA           reduce using rule 89 (sem_top_factor -> empty .)
    RIGHT_PAR       reduce using rule 89 (sem_top_factor -> empty .)


state 106

    (62) factor -> LEFT_PAR sem_false_bottom_begin . expression RIGHT_PAR sem_false_bottom_end
    (44) expression -> . exp expression_1
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    expression                     shift and go to state 141
    exp                            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 107

    (91) sem_false_bottom_begin -> empty .

    LEFT_PAR        reduce using rule 91 (sem_false_bottom_begin -> empty .)
    CTE_I           reduce using rule 91 (sem_false_bottom_begin -> empty .)
    CTE_D           reduce using rule 91 (sem_false_bottom_begin -> empty .)
    ID              reduce using rule 91 (sem_false_bottom_begin -> empty .)
    PLUS            reduce using rule 91 (sem_false_bottom_begin -> empty .)
    MINUS           reduce using rule 91 (sem_false_bottom_begin -> empty .)
    TRUE            reduce using rule 91 (sem_false_bottom_begin -> empty .)
    FALSE           reduce using rule 91 (sem_false_bottom_begin -> empty .)


state 108

    (64) factor -> factor_1 var_cte .

    MULTIPLY        reduce using rule 64 (factor -> factor_1 var_cte .)
    DIVIDE          reduce using rule 64 (factor -> factor_1 var_cte .)
    PLUS            reduce using rule 64 (factor -> factor_1 var_cte .)
    MINUS           reduce using rule 64 (factor -> factor_1 var_cte .)
    IS_EQUAL_TO     reduce using rule 64 (factor -> factor_1 var_cte .)
    NOT_EQUAL_TO    reduce using rule 64 (factor -> factor_1 var_cte .)
    GREATER_THAN    reduce using rule 64 (factor -> factor_1 var_cte .)
    LESS_THAN       reduce using rule 64 (factor -> factor_1 var_cte .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 64 (factor -> factor_1 var_cte .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 64 (factor -> factor_1 var_cte .)
    AND             reduce using rule 64 (factor -> factor_1 var_cte .)
    OR              reduce using rule 64 (factor -> factor_1 var_cte .)
    RIGHT_BRACKET   reduce using rule 64 (factor -> factor_1 var_cte .)
    SEMICOLON       reduce using rule 64 (factor -> factor_1 var_cte .)
    COMMA           reduce using rule 64 (factor -> factor_1 var_cte .)
    RIGHT_PAR       reduce using rule 64 (factor -> factor_1 var_cte .)


state 109

    (19) var_cte -> CTE_I sem_push_constant_int .

    MULTIPLY        reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    DIVIDE          reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    PLUS            reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    MINUS           reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    IS_EQUAL_TO     reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    NOT_EQUAL_TO    reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    GREATER_THAN    reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    LESS_THAN       reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    AND             reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    OR              reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    RIGHT_BRACKET   reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    SEMICOLON       reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    COMMA           reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)
    RIGHT_PAR       reduce using rule 19 (var_cte -> CTE_I sem_push_constant_int .)


state 110

    (87) sem_push_constant_int -> empty .

    MULTIPLY        reduce using rule 87 (sem_push_constant_int -> empty .)
    DIVIDE          reduce using rule 87 (sem_push_constant_int -> empty .)
    PLUS            reduce using rule 87 (sem_push_constant_int -> empty .)
    MINUS           reduce using rule 87 (sem_push_constant_int -> empty .)
    IS_EQUAL_TO     reduce using rule 87 (sem_push_constant_int -> empty .)
    NOT_EQUAL_TO    reduce using rule 87 (sem_push_constant_int -> empty .)
    GREATER_THAN    reduce using rule 87 (sem_push_constant_int -> empty .)
    LESS_THAN       reduce using rule 87 (sem_push_constant_int -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 87 (sem_push_constant_int -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 87 (sem_push_constant_int -> empty .)
    AND             reduce using rule 87 (sem_push_constant_int -> empty .)
    OR              reduce using rule 87 (sem_push_constant_int -> empty .)
    RIGHT_BRACKET   reduce using rule 87 (sem_push_constant_int -> empty .)
    SEMICOLON       reduce using rule 87 (sem_push_constant_int -> empty .)
    COMMA           reduce using rule 87 (sem_push_constant_int -> empty .)
    RIGHT_PAR       reduce using rule 87 (sem_push_constant_int -> empty .)


state 111

    (20) var_cte -> CTE_D sem_push_constant_double .

    MULTIPLY        reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    DIVIDE          reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    PLUS            reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    MINUS           reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    IS_EQUAL_TO     reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    NOT_EQUAL_TO    reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    GREATER_THAN    reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    LESS_THAN       reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    AND             reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    OR              reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    RIGHT_BRACKET   reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    SEMICOLON       reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    COMMA           reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)
    RIGHT_PAR       reduce using rule 20 (var_cte -> CTE_D sem_push_constant_double .)


state 112

    (88) sem_push_constant_double -> empty .

    MULTIPLY        reduce using rule 88 (sem_push_constant_double -> empty .)
    DIVIDE          reduce using rule 88 (sem_push_constant_double -> empty .)
    PLUS            reduce using rule 88 (sem_push_constant_double -> empty .)
    MINUS           reduce using rule 88 (sem_push_constant_double -> empty .)
    IS_EQUAL_TO     reduce using rule 88 (sem_push_constant_double -> empty .)
    NOT_EQUAL_TO    reduce using rule 88 (sem_push_constant_double -> empty .)
    GREATER_THAN    reduce using rule 88 (sem_push_constant_double -> empty .)
    LESS_THAN       reduce using rule 88 (sem_push_constant_double -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 88 (sem_push_constant_double -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 88 (sem_push_constant_double -> empty .)
    AND             reduce using rule 88 (sem_push_constant_double -> empty .)
    OR              reduce using rule 88 (sem_push_constant_double -> empty .)
    RIGHT_BRACKET   reduce using rule 88 (sem_push_constant_double -> empty .)
    SEMICOLON       reduce using rule 88 (sem_push_constant_double -> empty .)
    COMMA           reduce using rule 88 (sem_push_constant_double -> empty .)
    RIGHT_PAR       reduce using rule 88 (sem_push_constant_double -> empty .)


state 113

    (22) var_cte -> ID sem_push_operand . array
    (6) array -> . LEFT_BRACKET expression RIGHT_BRACKET array
    (7) array -> . empty
    (80) empty -> .

    LEFT_BRACKET    shift and go to state 31
    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    array                          shift and go to state 142
    empty                          shift and go to state 32

state 114

    (33) block_2 -> RETURN expression SEMICOLON . block_3
    (35) block_3 -> . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 54

    block_3                        shift and go to state 143

state 115

    (43) assignment -> ID sem_push_operand ASSIGN . sem_push_operator expression sem_assign_value SEMICOLON
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 144
    empty                          shift and go to state 84

state 116

    (71) function_call -> ID LEFT_PAR param_call . RIGHT_PAR

    RIGHT_PAR       shift and go to state 145


state 117

    (72) param_call -> expression . param_call_1
    (74) param_call_1 -> . COMMA param_call
    (75) param_call_1 -> . empty
    (80) empty -> .

    COMMA           shift and go to state 147
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    param_call_1                   shift and go to state 146
    empty                          shift and go to state 148

state 118

    (73) param_call -> empty .
    (67) factor_1 -> empty .

    RIGHT_PAR       reduce using rule 73 (param_call -> empty .)
    CTE_I           reduce using rule 67 (factor_1 -> empty .)
    CTE_D           reduce using rule 67 (factor_1 -> empty .)
    ID              reduce using rule 67 (factor_1 -> empty .)
    TRUE            reduce using rule 67 (factor_1 -> empty .)
    FALSE           reduce using rule 67 (factor_1 -> empty .)


state 119

    (68) condition -> IF LEFT_PAR expression . RIGHT_PAR block condition_1

    RIGHT_PAR       shift and go to state 149


state 120

    (76) while_cycle -> WHILE LEFT_PAR expression . RIGHT_PAR block

    RIGHT_PAR       shift and go to state 150


state 121

    (77) read -> READ sem_push_operator LEFT_PAR . exp RIGHT_PAR sem_read_write SEMICOLON
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 151
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 122

    (78) write -> WRITE sem_push_operator LEFT_PAR . exp RIGHT_PAR sem_read_write SEMICOLON
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 152
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 123

    (11) func_signature_1 -> ID sem_add_func LEFT_PAR . param_declaration RIGHT_PAR block
    (12) param_declaration -> . var_type array ID param_declaration_1
    (13) param_declaration -> . empty
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type
    (80) empty -> .

    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    BOOL            shift and go to state 11
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    param_declaration              shift and go to state 153
    var_type                       shift and go to state 154
    empty                          shift and go to state 155

state 124

    (6) array -> LEFT_BRACKET expression RIGHT_BRACKET array .

    ID              reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    SEMICOLON       reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    MULTIPLY        reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    DIVIDE          reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    PLUS            reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    MINUS           reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    IS_EQUAL_TO     reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    NOT_EQUAL_TO    reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    GREATER_THAN    reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    LESS_THAN       reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    AND             reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    OR              reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    RIGHT_BRACKET   reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    COMMA           reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)
    RIGHT_PAR       reduce using rule 6 (array -> LEFT_BRACKET expression RIGHT_BRACKET array .)


state 125

    (45) expression_1 -> IS_EQUAL_TO exp .

    RIGHT_BRACKET   reduce using rule 45 (expression_1 -> IS_EQUAL_TO exp .)
    SEMICOLON       reduce using rule 45 (expression_1 -> IS_EQUAL_TO exp .)
    COMMA           reduce using rule 45 (expression_1 -> IS_EQUAL_TO exp .)
    RIGHT_PAR       reduce using rule 45 (expression_1 -> IS_EQUAL_TO exp .)


state 126

    (46) expression_1 -> NOT_EQUAL_TO exp .

    RIGHT_BRACKET   reduce using rule 46 (expression_1 -> NOT_EQUAL_TO exp .)
    SEMICOLON       reduce using rule 46 (expression_1 -> NOT_EQUAL_TO exp .)
    COMMA           reduce using rule 46 (expression_1 -> NOT_EQUAL_TO exp .)
    RIGHT_PAR       reduce using rule 46 (expression_1 -> NOT_EQUAL_TO exp .)


state 127

    (47) expression_1 -> GREATER_THAN exp .

    RIGHT_BRACKET   reduce using rule 47 (expression_1 -> GREATER_THAN exp .)
    SEMICOLON       reduce using rule 47 (expression_1 -> GREATER_THAN exp .)
    COMMA           reduce using rule 47 (expression_1 -> GREATER_THAN exp .)
    RIGHT_PAR       reduce using rule 47 (expression_1 -> GREATER_THAN exp .)


state 128

    (48) expression_1 -> LESS_THAN exp .

    RIGHT_BRACKET   reduce using rule 48 (expression_1 -> LESS_THAN exp .)
    SEMICOLON       reduce using rule 48 (expression_1 -> LESS_THAN exp .)
    COMMA           reduce using rule 48 (expression_1 -> LESS_THAN exp .)
    RIGHT_PAR       reduce using rule 48 (expression_1 -> LESS_THAN exp .)


state 129

    (49) expression_1 -> GREATER_THAN_OR_EQUAL_TO exp .

    RIGHT_BRACKET   reduce using rule 49 (expression_1 -> GREATER_THAN_OR_EQUAL_TO exp .)
    SEMICOLON       reduce using rule 49 (expression_1 -> GREATER_THAN_OR_EQUAL_TO exp .)
    COMMA           reduce using rule 49 (expression_1 -> GREATER_THAN_OR_EQUAL_TO exp .)
    RIGHT_PAR       reduce using rule 49 (expression_1 -> GREATER_THAN_OR_EQUAL_TO exp .)


state 130

    (50) expression_1 -> LESS_THAN_OR_EQUAL_TO exp .

    RIGHT_BRACKET   reduce using rule 50 (expression_1 -> LESS_THAN_OR_EQUAL_TO exp .)
    SEMICOLON       reduce using rule 50 (expression_1 -> LESS_THAN_OR_EQUAL_TO exp .)
    COMMA           reduce using rule 50 (expression_1 -> LESS_THAN_OR_EQUAL_TO exp .)
    RIGHT_PAR       reduce using rule 50 (expression_1 -> LESS_THAN_OR_EQUAL_TO exp .)


state 131

    (51) expression_1 -> AND exp .

    RIGHT_BRACKET   reduce using rule 51 (expression_1 -> AND exp .)
    SEMICOLON       reduce using rule 51 (expression_1 -> AND exp .)
    COMMA           reduce using rule 51 (expression_1 -> AND exp .)
    RIGHT_PAR       reduce using rule 51 (expression_1 -> AND exp .)


state 132

    (52) expression_1 -> OR exp .

    RIGHT_BRACKET   reduce using rule 52 (expression_1 -> OR exp .)
    SEMICOLON       reduce using rule 52 (expression_1 -> OR exp .)
    COMMA           reduce using rule 52 (expression_1 -> OR exp .)
    RIGHT_PAR       reduce using rule 52 (expression_1 -> OR exp .)


state 133

    (54) exp -> term sem_top_term exp_1 .

    IS_EQUAL_TO     reduce using rule 54 (exp -> term sem_top_term exp_1 .)
    NOT_EQUAL_TO    reduce using rule 54 (exp -> term sem_top_term exp_1 .)
    GREATER_THAN    reduce using rule 54 (exp -> term sem_top_term exp_1 .)
    LESS_THAN       reduce using rule 54 (exp -> term sem_top_term exp_1 .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 54 (exp -> term sem_top_term exp_1 .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 54 (exp -> term sem_top_term exp_1 .)
    AND             reduce using rule 54 (exp -> term sem_top_term exp_1 .)
    OR              reduce using rule 54 (exp -> term sem_top_term exp_1 .)
    RIGHT_BRACKET   reduce using rule 54 (exp -> term sem_top_term exp_1 .)
    SEMICOLON       reduce using rule 54 (exp -> term sem_top_term exp_1 .)
    COMMA           reduce using rule 54 (exp -> term sem_top_term exp_1 .)
    RIGHT_PAR       reduce using rule 54 (exp -> term sem_top_term exp_1 .)


state 134

    (55) exp_1 -> PLUS . sem_push_operator exp
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 156
    empty                          shift and go to state 84

state 135

    (56) exp_1 -> MINUS . sem_push_operator exp
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 157
    empty                          shift and go to state 84

state 136

    (57) exp_1 -> empty .

    IS_EQUAL_TO     reduce using rule 57 (exp_1 -> empty .)
    NOT_EQUAL_TO    reduce using rule 57 (exp_1 -> empty .)
    GREATER_THAN    reduce using rule 57 (exp_1 -> empty .)
    LESS_THAN       reduce using rule 57 (exp_1 -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 57 (exp_1 -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 57 (exp_1 -> empty .)
    AND             reduce using rule 57 (exp_1 -> empty .)
    OR              reduce using rule 57 (exp_1 -> empty .)
    RIGHT_BRACKET   reduce using rule 57 (exp_1 -> empty .)
    SEMICOLON       reduce using rule 57 (exp_1 -> empty .)
    COMMA           reduce using rule 57 (exp_1 -> empty .)
    RIGHT_PAR       reduce using rule 57 (exp_1 -> empty .)


state 137

    (58) term -> factor sem_top_factor term_1 .

    PLUS            reduce using rule 58 (term -> factor sem_top_factor term_1 .)
    MINUS           reduce using rule 58 (term -> factor sem_top_factor term_1 .)
    IS_EQUAL_TO     reduce using rule 58 (term -> factor sem_top_factor term_1 .)
    NOT_EQUAL_TO    reduce using rule 58 (term -> factor sem_top_factor term_1 .)
    GREATER_THAN    reduce using rule 58 (term -> factor sem_top_factor term_1 .)
    LESS_THAN       reduce using rule 58 (term -> factor sem_top_factor term_1 .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 58 (term -> factor sem_top_factor term_1 .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 58 (term -> factor sem_top_factor term_1 .)
    AND             reduce using rule 58 (term -> factor sem_top_factor term_1 .)
    OR              reduce using rule 58 (term -> factor sem_top_factor term_1 .)
    RIGHT_BRACKET   reduce using rule 58 (term -> factor sem_top_factor term_1 .)
    SEMICOLON       reduce using rule 58 (term -> factor sem_top_factor term_1 .)
    COMMA           reduce using rule 58 (term -> factor sem_top_factor term_1 .)
    RIGHT_PAR       reduce using rule 58 (term -> factor sem_top_factor term_1 .)


state 138

    (59) term_1 -> MULTIPLY . sem_push_operator term
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 158
    empty                          shift and go to state 84

state 139

    (60) term_1 -> DIVIDE . sem_push_operator term
    (85) sem_push_operator -> . empty
    (80) empty -> .

    LEFT_PAR        reduce using rule 80 (empty -> .)
    CTE_I           reduce using rule 80 (empty -> .)
    CTE_D           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    TRUE            reduce using rule 80 (empty -> .)
    FALSE           reduce using rule 80 (empty -> .)

    sem_push_operator              shift and go to state 159
    empty                          shift and go to state 84

state 140

    (61) term_1 -> empty .

    PLUS            reduce using rule 61 (term_1 -> empty .)
    MINUS           reduce using rule 61 (term_1 -> empty .)
    IS_EQUAL_TO     reduce using rule 61 (term_1 -> empty .)
    NOT_EQUAL_TO    reduce using rule 61 (term_1 -> empty .)
    GREATER_THAN    reduce using rule 61 (term_1 -> empty .)
    LESS_THAN       reduce using rule 61 (term_1 -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 61 (term_1 -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 61 (term_1 -> empty .)
    AND             reduce using rule 61 (term_1 -> empty .)
    OR              reduce using rule 61 (term_1 -> empty .)
    RIGHT_BRACKET   reduce using rule 61 (term_1 -> empty .)
    SEMICOLON       reduce using rule 61 (term_1 -> empty .)
    COMMA           reduce using rule 61 (term_1 -> empty .)
    RIGHT_PAR       reduce using rule 61 (term_1 -> empty .)


state 141

    (62) factor -> LEFT_PAR sem_false_bottom_begin expression . RIGHT_PAR sem_false_bottom_end

    RIGHT_PAR       shift and go to state 160


state 142

    (22) var_cte -> ID sem_push_operand array .

    MULTIPLY        reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    DIVIDE          reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    PLUS            reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    MINUS           reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    IS_EQUAL_TO     reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    NOT_EQUAL_TO    reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    GREATER_THAN    reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    LESS_THAN       reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    AND             reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    OR              reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    RIGHT_BRACKET   reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    SEMICOLON       reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    COMMA           reduce using rule 22 (var_cte -> ID sem_push_operand array .)
    RIGHT_PAR       reduce using rule 22 (var_cte -> ID sem_push_operand array .)


state 143

    (33) block_2 -> RETURN expression SEMICOLON block_3 .

    $end            reduce using rule 33 (block_2 -> RETURN expression SEMICOLON block_3 .)
    ELSE            reduce using rule 33 (block_2 -> RETURN expression SEMICOLON block_3 .)
    RETURN          reduce using rule 33 (block_2 -> RETURN expression SEMICOLON block_3 .)
    ID              reduce using rule 33 (block_2 -> RETURN expression SEMICOLON block_3 .)
    IF              reduce using rule 33 (block_2 -> RETURN expression SEMICOLON block_3 .)
    WHILE           reduce using rule 33 (block_2 -> RETURN expression SEMICOLON block_3 .)
    READ            reduce using rule 33 (block_2 -> RETURN expression SEMICOLON block_3 .)
    WRITE           reduce using rule 33 (block_2 -> RETURN expression SEMICOLON block_3 .)
    RIGHT_BRACE     reduce using rule 33 (block_2 -> RETURN expression SEMICOLON block_3 .)
    INT             reduce using rule 33 (block_2 -> RETURN expression SEMICOLON block_3 .)
    DOUBLE          reduce using rule 33 (block_2 -> RETURN expression SEMICOLON block_3 .)
    BOOL            reduce using rule 33 (block_2 -> RETURN expression SEMICOLON block_3 .)
    FUNCTION        reduce using rule 33 (block_2 -> RETURN expression SEMICOLON block_3 .)
    MAIN            reduce using rule 33 (block_2 -> RETURN expression SEMICOLON block_3 .)


state 144

    (43) assignment -> ID sem_push_operand ASSIGN sem_push_operator . expression sem_assign_value SEMICOLON
    (44) expression -> . exp expression_1
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    expression                     shift and go to state 161
    exp                            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 145

    (71) function_call -> ID LEFT_PAR param_call RIGHT_PAR .

    SEMICOLON       reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    MULTIPLY        reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    DIVIDE          reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    PLUS            reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    MINUS           reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    IS_EQUAL_TO     reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    NOT_EQUAL_TO    reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    GREATER_THAN    reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    LESS_THAN       reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    AND             reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    OR              reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    RIGHT_BRACKET   reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    COMMA           reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)
    RIGHT_PAR       reduce using rule 71 (function_call -> ID LEFT_PAR param_call RIGHT_PAR .)


state 146

    (72) param_call -> expression param_call_1 .

    RIGHT_PAR       reduce using rule 72 (param_call -> expression param_call_1 .)


state 147

    (74) param_call_1 -> COMMA . param_call
    (72) param_call -> . expression param_call_1
    (73) param_call -> . empty
    (44) expression -> . exp expression_1
    (80) empty -> .
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RIGHT_PAR       reduce using rule 80 (empty -> .)
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    param_call                     shift and go to state 162
    expression                     shift and go to state 117
    empty                          shift and go to state 118
    exp                            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69

state 148

    (75) param_call_1 -> empty .

    RIGHT_PAR       reduce using rule 75 (param_call_1 -> empty .)


state 149

    (68) condition -> IF LEFT_PAR expression RIGHT_PAR . block condition_1
    (30) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 27

    block                          shift and go to state 163

state 150

    (76) while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR . block
    (30) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 27

    block                          shift and go to state 164

state 151

    (77) read -> READ sem_push_operator LEFT_PAR exp . RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_PAR       shift and go to state 165


state 152

    (78) write -> WRITE sem_push_operator LEFT_PAR exp . RIGHT_PAR sem_read_write SEMICOLON

    RIGHT_PAR       shift and go to state 166


state 153

    (11) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration . RIGHT_PAR block

    RIGHT_PAR       shift and go to state 167


state 154

    (12) param_declaration -> var_type . array ID param_declaration_1
    (6) array -> . LEFT_BRACKET expression RIGHT_BRACKET array
    (7) array -> . empty
    (80) empty -> .

    LEFT_BRACKET    shift and go to state 31
    ID              reduce using rule 80 (empty -> .)

    array                          shift and go to state 168
    empty                          shift and go to state 32

state 155

    (13) param_declaration -> empty .

    RIGHT_PAR       reduce using rule 13 (param_declaration -> empty .)


state 156

    (55) exp_1 -> PLUS sem_push_operator . exp
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 169
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 157

    (56) exp_1 -> MINUS sem_push_operator . exp
    (54) exp -> . term sem_top_term exp_1
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    exp                            shift and go to state 170
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 158

    (59) term_1 -> MULTIPLY sem_push_operator . term
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    term                           shift and go to state 171
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 159

    (60) term_1 -> DIVIDE sem_push_operator . term
    (58) term -> . factor sem_top_factor term_1
    (62) factor -> . LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end
    (63) factor -> . var_cte
    (64) factor -> . factor_1 var_cte
    (19) var_cte -> . CTE_I sem_push_constant_int
    (20) var_cte -> . CTE_D sem_push_constant_double
    (21) var_cte -> . cte_b
    (22) var_cte -> . ID sem_push_operand array
    (23) var_cte -> . function_call
    (65) factor_1 -> . PLUS
    (66) factor_1 -> . MINUS
    (67) factor_1 -> . empty
    (24) cte_b -> . TRUE
    (25) cte_b -> . FALSE
    (71) function_call -> . ID LEFT_PAR param_call RIGHT_PAR
    (80) empty -> .

  ! shift/reduce conflict for CTE_I resolved as shift
  ! shift/reduce conflict for CTE_D resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEFT_PAR        shift and go to state 62
    CTE_I           shift and go to state 65
    CTE_D           shift and go to state 66
    ID              shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

  ! CTE_I           [ reduce using rule 80 (empty -> .) ]
  ! CTE_D           [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]
  ! TRUE            [ reduce using rule 80 (empty -> .) ]
  ! FALSE           [ reduce using rule 80 (empty -> .) ]

    term                           shift and go to state 172
    factor                         shift and go to state 61
    var_cte                        shift and go to state 63
    factor_1                       shift and go to state 64
    cte_b                          shift and go to state 67
    function_call                  shift and go to state 69
    empty                          shift and go to state 72

state 160

    (62) factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR . sem_false_bottom_end
    (92) sem_false_bottom_end -> . empty
    (80) empty -> .

    MULTIPLY        reduce using rule 80 (empty -> .)
    DIVIDE          reduce using rule 80 (empty -> .)
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    IS_EQUAL_TO     reduce using rule 80 (empty -> .)
    NOT_EQUAL_TO    reduce using rule 80 (empty -> .)
    GREATER_THAN    reduce using rule 80 (empty -> .)
    LESS_THAN       reduce using rule 80 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    RIGHT_BRACKET   reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    sem_false_bottom_end           shift and go to state 173
    empty                          shift and go to state 174

state 161

    (43) assignment -> ID sem_push_operand ASSIGN sem_push_operator expression . sem_assign_value SEMICOLON
    (93) sem_assign_value -> . empty
    (80) empty -> .

    SEMICOLON       reduce using rule 80 (empty -> .)

    sem_assign_value               shift and go to state 175
    empty                          shift and go to state 176

state 162

    (74) param_call_1 -> COMMA param_call .

    RIGHT_PAR       reduce using rule 74 (param_call_1 -> COMMA param_call .)


state 163

    (68) condition -> IF LEFT_PAR expression RIGHT_PAR block . condition_1
    (69) condition_1 -> . ELSE block
    (70) condition_1 -> . empty
    (80) empty -> .

    ELSE            shift and go to state 178
    RETURN          reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    IF              reduce using rule 80 (empty -> .)
    WHILE           reduce using rule 80 (empty -> .)
    READ            reduce using rule 80 (empty -> .)
    WRITE           reduce using rule 80 (empty -> .)
    RIGHT_BRACE     reduce using rule 80 (empty -> .)
    INT             reduce using rule 80 (empty -> .)
    DOUBLE          reduce using rule 80 (empty -> .)
    BOOL            reduce using rule 80 (empty -> .)

    condition_1                    shift and go to state 177
    empty                          shift and go to state 179

state 164

    (76) while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .

    RETURN          reduce using rule 76 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    ID              reduce using rule 76 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    IF              reduce using rule 76 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    WHILE           reduce using rule 76 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    READ            reduce using rule 76 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    WRITE           reduce using rule 76 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    RIGHT_BRACE     reduce using rule 76 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    INT             reduce using rule 76 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    DOUBLE          reduce using rule 76 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)
    BOOL            reduce using rule 76 (while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block .)


state 165

    (77) read -> READ sem_push_operator LEFT_PAR exp RIGHT_PAR . sem_read_write SEMICOLON
    (94) sem_read_write -> . empty
    (80) empty -> .

    SEMICOLON       reduce using rule 80 (empty -> .)

    sem_read_write                 shift and go to state 180
    empty                          shift and go to state 181

state 166

    (78) write -> WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR . sem_read_write SEMICOLON
    (94) sem_read_write -> . empty
    (80) empty -> .

    SEMICOLON       reduce using rule 80 (empty -> .)

    sem_read_write                 shift and go to state 182
    empty                          shift and go to state 181

state 167

    (11) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR . block
    (30) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 27

    block                          shift and go to state 183

state 168

    (12) param_declaration -> var_type array . ID param_declaration_1

    ID              shift and go to state 184


state 169

    (55) exp_1 -> PLUS sem_push_operator exp .

    IS_EQUAL_TO     reduce using rule 55 (exp_1 -> PLUS sem_push_operator exp .)
    NOT_EQUAL_TO    reduce using rule 55 (exp_1 -> PLUS sem_push_operator exp .)
    GREATER_THAN    reduce using rule 55 (exp_1 -> PLUS sem_push_operator exp .)
    LESS_THAN       reduce using rule 55 (exp_1 -> PLUS sem_push_operator exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 55 (exp_1 -> PLUS sem_push_operator exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 55 (exp_1 -> PLUS sem_push_operator exp .)
    AND             reduce using rule 55 (exp_1 -> PLUS sem_push_operator exp .)
    OR              reduce using rule 55 (exp_1 -> PLUS sem_push_operator exp .)
    RIGHT_BRACKET   reduce using rule 55 (exp_1 -> PLUS sem_push_operator exp .)
    SEMICOLON       reduce using rule 55 (exp_1 -> PLUS sem_push_operator exp .)
    COMMA           reduce using rule 55 (exp_1 -> PLUS sem_push_operator exp .)
    RIGHT_PAR       reduce using rule 55 (exp_1 -> PLUS sem_push_operator exp .)


state 170

    (56) exp_1 -> MINUS sem_push_operator exp .

    IS_EQUAL_TO     reduce using rule 56 (exp_1 -> MINUS sem_push_operator exp .)
    NOT_EQUAL_TO    reduce using rule 56 (exp_1 -> MINUS sem_push_operator exp .)
    GREATER_THAN    reduce using rule 56 (exp_1 -> MINUS sem_push_operator exp .)
    LESS_THAN       reduce using rule 56 (exp_1 -> MINUS sem_push_operator exp .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 56 (exp_1 -> MINUS sem_push_operator exp .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 56 (exp_1 -> MINUS sem_push_operator exp .)
    AND             reduce using rule 56 (exp_1 -> MINUS sem_push_operator exp .)
    OR              reduce using rule 56 (exp_1 -> MINUS sem_push_operator exp .)
    RIGHT_BRACKET   reduce using rule 56 (exp_1 -> MINUS sem_push_operator exp .)
    SEMICOLON       reduce using rule 56 (exp_1 -> MINUS sem_push_operator exp .)
    COMMA           reduce using rule 56 (exp_1 -> MINUS sem_push_operator exp .)
    RIGHT_PAR       reduce using rule 56 (exp_1 -> MINUS sem_push_operator exp .)


state 171

    (59) term_1 -> MULTIPLY sem_push_operator term .

    PLUS            reduce using rule 59 (term_1 -> MULTIPLY sem_push_operator term .)
    MINUS           reduce using rule 59 (term_1 -> MULTIPLY sem_push_operator term .)
    IS_EQUAL_TO     reduce using rule 59 (term_1 -> MULTIPLY sem_push_operator term .)
    NOT_EQUAL_TO    reduce using rule 59 (term_1 -> MULTIPLY sem_push_operator term .)
    GREATER_THAN    reduce using rule 59 (term_1 -> MULTIPLY sem_push_operator term .)
    LESS_THAN       reduce using rule 59 (term_1 -> MULTIPLY sem_push_operator term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 59 (term_1 -> MULTIPLY sem_push_operator term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 59 (term_1 -> MULTIPLY sem_push_operator term .)
    AND             reduce using rule 59 (term_1 -> MULTIPLY sem_push_operator term .)
    OR              reduce using rule 59 (term_1 -> MULTIPLY sem_push_operator term .)
    RIGHT_BRACKET   reduce using rule 59 (term_1 -> MULTIPLY sem_push_operator term .)
    SEMICOLON       reduce using rule 59 (term_1 -> MULTIPLY sem_push_operator term .)
    COMMA           reduce using rule 59 (term_1 -> MULTIPLY sem_push_operator term .)
    RIGHT_PAR       reduce using rule 59 (term_1 -> MULTIPLY sem_push_operator term .)


state 172

    (60) term_1 -> DIVIDE sem_push_operator term .

    PLUS            reduce using rule 60 (term_1 -> DIVIDE sem_push_operator term .)
    MINUS           reduce using rule 60 (term_1 -> DIVIDE sem_push_operator term .)
    IS_EQUAL_TO     reduce using rule 60 (term_1 -> DIVIDE sem_push_operator term .)
    NOT_EQUAL_TO    reduce using rule 60 (term_1 -> DIVIDE sem_push_operator term .)
    GREATER_THAN    reduce using rule 60 (term_1 -> DIVIDE sem_push_operator term .)
    LESS_THAN       reduce using rule 60 (term_1 -> DIVIDE sem_push_operator term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 60 (term_1 -> DIVIDE sem_push_operator term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 60 (term_1 -> DIVIDE sem_push_operator term .)
    AND             reduce using rule 60 (term_1 -> DIVIDE sem_push_operator term .)
    OR              reduce using rule 60 (term_1 -> DIVIDE sem_push_operator term .)
    RIGHT_BRACKET   reduce using rule 60 (term_1 -> DIVIDE sem_push_operator term .)
    SEMICOLON       reduce using rule 60 (term_1 -> DIVIDE sem_push_operator term .)
    COMMA           reduce using rule 60 (term_1 -> DIVIDE sem_push_operator term .)
    RIGHT_PAR       reduce using rule 60 (term_1 -> DIVIDE sem_push_operator term .)


state 173

    (62) factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .

    MULTIPLY        reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    DIVIDE          reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    PLUS            reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    MINUS           reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    IS_EQUAL_TO     reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    NOT_EQUAL_TO    reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    GREATER_THAN    reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    LESS_THAN       reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    AND             reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    OR              reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    RIGHT_BRACKET   reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    SEMICOLON       reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    COMMA           reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)
    RIGHT_PAR       reduce using rule 62 (factor -> LEFT_PAR sem_false_bottom_begin expression RIGHT_PAR sem_false_bottom_end .)


state 174

    (92) sem_false_bottom_end -> empty .

    MULTIPLY        reduce using rule 92 (sem_false_bottom_end -> empty .)
    DIVIDE          reduce using rule 92 (sem_false_bottom_end -> empty .)
    PLUS            reduce using rule 92 (sem_false_bottom_end -> empty .)
    MINUS           reduce using rule 92 (sem_false_bottom_end -> empty .)
    IS_EQUAL_TO     reduce using rule 92 (sem_false_bottom_end -> empty .)
    NOT_EQUAL_TO    reduce using rule 92 (sem_false_bottom_end -> empty .)
    GREATER_THAN    reduce using rule 92 (sem_false_bottom_end -> empty .)
    LESS_THAN       reduce using rule 92 (sem_false_bottom_end -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 92 (sem_false_bottom_end -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 92 (sem_false_bottom_end -> empty .)
    AND             reduce using rule 92 (sem_false_bottom_end -> empty .)
    OR              reduce using rule 92 (sem_false_bottom_end -> empty .)
    RIGHT_BRACKET   reduce using rule 92 (sem_false_bottom_end -> empty .)
    SEMICOLON       reduce using rule 92 (sem_false_bottom_end -> empty .)
    COMMA           reduce using rule 92 (sem_false_bottom_end -> empty .)
    RIGHT_PAR       reduce using rule 92 (sem_false_bottom_end -> empty .)


state 175

    (43) assignment -> ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value . SEMICOLON

    SEMICOLON       shift and go to state 185


state 176

    (93) sem_assign_value -> empty .

    SEMICOLON       reduce using rule 93 (sem_assign_value -> empty .)


state 177

    (68) condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .

    RETURN          reduce using rule 68 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    ID              reduce using rule 68 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    IF              reduce using rule 68 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    WHILE           reduce using rule 68 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    READ            reduce using rule 68 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    WRITE           reduce using rule 68 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    RIGHT_BRACE     reduce using rule 68 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    INT             reduce using rule 68 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    DOUBLE          reduce using rule 68 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)
    BOOL            reduce using rule 68 (condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1 .)


state 178

    (69) condition_1 -> ELSE . block
    (30) block -> . LEFT_BRACE block_1

    LEFT_BRACE      shift and go to state 27

    block                          shift and go to state 186

state 179

    (70) condition_1 -> empty .

    RETURN          reduce using rule 70 (condition_1 -> empty .)
    ID              reduce using rule 70 (condition_1 -> empty .)
    IF              reduce using rule 70 (condition_1 -> empty .)
    WHILE           reduce using rule 70 (condition_1 -> empty .)
    READ            reduce using rule 70 (condition_1 -> empty .)
    WRITE           reduce using rule 70 (condition_1 -> empty .)
    RIGHT_BRACE     reduce using rule 70 (condition_1 -> empty .)
    INT             reduce using rule 70 (condition_1 -> empty .)
    DOUBLE          reduce using rule 70 (condition_1 -> empty .)
    BOOL            reduce using rule 70 (condition_1 -> empty .)


state 180

    (77) read -> READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write . SEMICOLON

    SEMICOLON       shift and go to state 187


state 181

    (94) sem_read_write -> empty .

    SEMICOLON       reduce using rule 94 (sem_read_write -> empty .)


state 182

    (78) write -> WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write . SEMICOLON

    SEMICOLON       shift and go to state 188


state 183

    (11) func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .

    FUNCTION        reduce using rule 11 (func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .)
    MAIN            reduce using rule 11 (func_signature_1 -> ID sem_add_func LEFT_PAR param_declaration RIGHT_PAR block .)


state 184

    (12) param_declaration -> var_type array ID . param_declaration_1
    (14) param_declaration_1 -> . COMMA var_type array ID param_declaration_1
    (15) param_declaration_1 -> . empty
    (80) empty -> .

    COMMA           shift and go to state 190
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    param_declaration_1            shift and go to state 189
    empty                          shift and go to state 191

state 185

    (43) assignment -> ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON .

    RETURN          reduce using rule 43 (assignment -> ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON .)
    ID              reduce using rule 43 (assignment -> ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON .)
    IF              reduce using rule 43 (assignment -> ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON .)
    WHILE           reduce using rule 43 (assignment -> ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON .)
    READ            reduce using rule 43 (assignment -> ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON .)
    WRITE           reduce using rule 43 (assignment -> ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON .)
    RIGHT_BRACE     reduce using rule 43 (assignment -> ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON .)
    INT             reduce using rule 43 (assignment -> ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON .)
    DOUBLE          reduce using rule 43 (assignment -> ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON .)
    BOOL            reduce using rule 43 (assignment -> ID sem_push_operand ASSIGN sem_push_operator expression sem_assign_value SEMICOLON .)


state 186

    (69) condition_1 -> ELSE block .

    RETURN          reduce using rule 69 (condition_1 -> ELSE block .)
    ID              reduce using rule 69 (condition_1 -> ELSE block .)
    IF              reduce using rule 69 (condition_1 -> ELSE block .)
    WHILE           reduce using rule 69 (condition_1 -> ELSE block .)
    READ            reduce using rule 69 (condition_1 -> ELSE block .)
    WRITE           reduce using rule 69 (condition_1 -> ELSE block .)
    RIGHT_BRACE     reduce using rule 69 (condition_1 -> ELSE block .)
    INT             reduce using rule 69 (condition_1 -> ELSE block .)
    DOUBLE          reduce using rule 69 (condition_1 -> ELSE block .)
    BOOL            reduce using rule 69 (condition_1 -> ELSE block .)


state 187

    (77) read -> READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .

    RETURN          reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    ID              reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    IF              reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    WHILE           reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    READ            reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    WRITE           reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    RIGHT_BRACE     reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    INT             reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    DOUBLE          reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    BOOL            reduce using rule 77 (read -> READ sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)


state 188

    (78) write -> WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .

    RETURN          reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    ID              reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    IF              reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    WHILE           reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    READ            reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    WRITE           reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    RIGHT_BRACE     reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    INT             reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    DOUBLE          reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)
    BOOL            reduce using rule 78 (write -> WRITE sem_push_operator LEFT_PAR exp RIGHT_PAR sem_read_write SEMICOLON .)


state 189

    (12) param_declaration -> var_type array ID param_declaration_1 .

    RIGHT_PAR       reduce using rule 12 (param_declaration -> var_type array ID param_declaration_1 .)


state 190

    (14) param_declaration_1 -> COMMA . var_type array ID param_declaration_1
    (16) var_type -> . INT sem_get_type
    (17) var_type -> . DOUBLE sem_get_type
    (18) var_type -> . BOOL sem_get_type

    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    BOOL            shift and go to state 11

    var_type                       shift and go to state 192

state 191

    (15) param_declaration_1 -> empty .

    RIGHT_PAR       reduce using rule 15 (param_declaration_1 -> empty .)


state 192

    (14) param_declaration_1 -> COMMA var_type . array ID param_declaration_1
    (6) array -> . LEFT_BRACKET expression RIGHT_BRACKET array
    (7) array -> . empty
    (80) empty -> .

    LEFT_BRACKET    shift and go to state 31
    ID              reduce using rule 80 (empty -> .)

    array                          shift and go to state 193
    empty                          shift and go to state 32

state 193

    (14) param_declaration_1 -> COMMA var_type array . ID param_declaration_1

    ID              shift and go to state 194


state 194

    (14) param_declaration_1 -> COMMA var_type array ID . param_declaration_1
    (14) param_declaration_1 -> . COMMA var_type array ID param_declaration_1
    (15) param_declaration_1 -> . empty
    (80) empty -> .

    COMMA           shift and go to state 190
    RIGHT_PAR       reduce using rule 80 (empty -> .)

    param_declaration_1            shift and go to state 195
    empty                          shift and go to state 191

state 195

    (14) param_declaration_1 -> COMMA var_type array ID param_declaration_1 .

    RIGHT_PAR       reduce using rule 14 (param_declaration_1 -> COMMA var_type array ID param_declaration_1 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 3 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 3 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 27 resolved as shift
WARNING: shift/reduce conflict for ID in state 27 resolved as shift
WARNING: shift/reduce conflict for IF in state 27 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 27 resolved as shift
WARNING: shift/reduce conflict for READ in state 27 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 27 resolved as shift
WARNING: shift/reduce conflict for RIGHT_BRACE in state 27 resolved as shift
WARNING: shift/reduce conflict for INT in state 27 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 27 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 27 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 31 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 31 resolved as shift
WARNING: shift/reduce conflict for ID in state 31 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 31 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 31 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 38 resolved as shift
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for IF in state 38 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 38 resolved as shift
WARNING: shift/reduce conflict for READ in state 38 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 38 resolved as shift
WARNING: shift/reduce conflict for RIGHT_BRACE in state 38 resolved as shift
WARNING: shift/reduce conflict for INT in state 38 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 38 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 38 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 47 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 47 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 47 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 79 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 79 resolved as shift
WARNING: shift/reduce conflict for ID in state 79 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 79 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 79 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 81 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 81 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 81 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 82 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 82 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 82 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 93 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 93 resolved as shift
WARNING: shift/reduce conflict for ID in state 93 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 93 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 93 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 94 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 94 resolved as shift
WARNING: shift/reduce conflict for ID in state 94 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 94 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 94 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 95 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 95 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 95 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 96 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 96 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 96 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 97 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 97 resolved as shift
WARNING: shift/reduce conflict for ID in state 97 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 97 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 97 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 98 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 98 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 98 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 98 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 99 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 99 resolved as shift
WARNING: shift/reduce conflict for ID in state 99 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 99 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 99 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 100 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 100 resolved as shift
WARNING: shift/reduce conflict for ID in state 100 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 100 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 100 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 106 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 106 resolved as shift
WARNING: shift/reduce conflict for ID in state 106 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 106 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 106 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 121 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 121 resolved as shift
WARNING: shift/reduce conflict for ID in state 121 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 121 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 121 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 122 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 122 resolved as shift
WARNING: shift/reduce conflict for ID in state 122 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 122 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 122 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 144 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 144 resolved as shift
WARNING: shift/reduce conflict for ID in state 144 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 144 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 144 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 147 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 147 resolved as shift
WARNING: shift/reduce conflict for ID in state 147 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 147 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 147 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 156 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 156 resolved as shift
WARNING: shift/reduce conflict for ID in state 156 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 156 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 156 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 157 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 157 resolved as shift
WARNING: shift/reduce conflict for ID in state 157 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 157 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 157 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 158 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 158 resolved as shift
WARNING: shift/reduce conflict for ID in state 158 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 158 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 158 resolved as shift
WARNING: shift/reduce conflict for CTE_I in state 159 resolved as shift
WARNING: shift/reduce conflict for CTE_D in state 159 resolved as shift
WARNING: shift/reduce conflict for ID in state 159 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 159 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 159 resolved as shift

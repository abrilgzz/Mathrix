
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL COMMA CTE_D CTE_I CTE_S DIVIDE DOUBLE ELSE FALSE FUNCTION GREATER_THAN GREATER_THAN_OR_EQUAL_TO ID IF INT IS_EQUAL_TO LEFT_BRACE LEFT_BRACKET LEFT_PAR LESS_THAN LESS_THAN_OR_EQUAL_TO MAIN MINUS MULTIPLY NOT_EQUAL_TO OR PLUS READ RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAR SEMICOLON STRING TRUE VOID WHILE WRITEstart : global_declaration\n    global_declaration : var_declaration global_declaration\n    | func_declaration\n    var_declaration : var_type ID array SEMICOLON\n    | empty\n    array : LEFT_BRACKET expression RIGHT_BRACKET array\n    | empty\n    func_declaration : func_signature func_declaration\n    | main\n    func_signature : FUNCTION func_type array func_signature_1\n    func_signature_1 : ID LEFT_PAR param_declaration RIGHT_PAR block\n    param_declaration : var_type array ID param_declaration_1\n    | empty\n    param_declaration_1 : COMMA var_type array ID param_declaration_1\n    | empty\n    var_type : INT\n    | DOUBLE\n    | BOOL\n    | STRING\n    var_cte : CTE_I\n    | CTE_D\n    | cte_b\n    | CTE_S\n    | ID array\n    | function_call\n    cte_b : TRUE\n    | FALSE\n    func_type : INT\n    | DOUBLE\n    | BOOL\n    | STRING\n    | VOID\n    block : LEFT_BRACE block_1 \n    block_1 : statement block_1\n    | block_2 \n    block_2 : RETURN expression SEMICOLON block_3\n    | block_3\n    block_3 : RIGHT_BRACE\n    statement : var_declaration\n    | assignment\n    | condition\n    | function_call SEMICOLON\n    | while_cycle\n    | read\n    | write\n    assignment : var_type ID ASSIGN expression SEMICOLON\n    expression : exp expression_1\n    expression_1 : IS_EQUAL_TO exp\n    | NOT_EQUAL_TO exp\n    | GREATER_THAN exp\n    | LESS_THAN exp\n    | GREATER_THAN_OR_EQUAL_TO exp\n    | LESS_THAN_OR_EQUAL_TO exp\n    | AND exp\n    | OR exp\n    | empty \n    exp : term exp_1\n    exp_1 : PLUS exp\n    | MINUS exp\n    | empty\n    term : factor term_1\n    term_1 : MULTIPLY term\n    | DIVIDE term\n    | empty\n    factor : LEFT_PAR expression RIGHT_PAR\n    | var_cte\n    | factor_1 var_cte\n    factor_1 : PLUS\n    | MINUS\n    | empty\n    condition : IF LEFT_PAR expression RIGHT_PAR block condition_1\n    condition_1 : ELSE block\n    | empty\n    function_call : ID LEFT_PAR param_call RIGHT_PAR \n    param_call : expression param_call_1\n    param_call_1 : COMMA param_call_1\n    | empty\n    while_cycle : WHILE LEFT_PAR expression RIGHT_PAR block\n    read : READ LEFT_PAR exp RIGHT_PAR SEMICOLON\n    write : WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON\n    main : MAIN block \n    empty :\n    '
    
_lr_action_items = {'INT':([0,3,6,13,25,30,31,32,33,34,35,37,38,39,41,48,49,70,71,101,127,139,141,142,143,144,147,149,151,153,],[9,9,-5,19,9,-33,9,-35,-39,-40,-41,-43,-44,-45,-37,-38,-4,-34,-42,9,-36,-46,-82,-78,-79,-80,-71,-73,9,-72,]),'DOUBLE':([0,3,6,13,25,30,31,32,33,34,35,37,38,39,41,48,49,70,71,101,127,139,141,142,143,144,147,149,151,153,],[10,10,-5,20,10,-33,10,-35,-39,-40,-41,-43,-44,-45,-37,-38,-4,-34,-42,10,-36,-46,-82,-78,-79,-80,-71,-73,10,-72,]),'BOOL':([0,3,6,13,25,30,31,32,33,34,35,37,38,39,41,48,49,70,71,101,127,139,141,142,143,144,147,149,151,153,],[11,11,-5,21,11,-33,11,-35,-39,-40,-41,-43,-44,-45,-37,-38,-4,-34,-42,11,-36,-46,-82,-78,-79,-80,-71,-73,11,-72,]),'STRING':([0,3,6,13,25,30,31,32,33,34,35,37,38,39,41,48,49,70,71,101,127,139,141,142,143,144,147,149,151,153,],[12,12,-5,22,12,-33,12,-35,-39,-40,-41,-43,-44,-45,-37,-38,-4,-34,-42,12,-36,-46,-82,-78,-79,-80,-71,-73,12,-72,]),'FUNCTION':([0,3,6,7,30,32,41,48,49,68,70,127,145,],[13,13,-5,13,-33,-35,-37,-38,-4,-10,-34,-36,-11,]),'MAIN':([0,3,6,7,30,32,41,48,49,68,70,127,145,],[14,14,-5,14,-33,-35,-37,-38,-4,-10,-34,-36,-11,]),'$end':([1,2,4,8,15,17,24,30,32,41,48,70,127,],[0,-1,-3,-9,-2,-8,-81,-33,-35,-37,-38,-34,-36,]),'ID':([5,6,9,10,11,12,18,19,20,21,22,23,25,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,48,49,54,56,63,64,65,70,71,74,75,76,77,78,79,81,82,83,84,85,86,87,88,91,92,95,96,103,110,125,127,138,139,141,142,143,144,147,149,153,154,155,],[16,-5,-16,-17,-18,-19,-82,-28,-29,-30,-31,-32,43,61,-7,69,-33,43,-35,-39,-40,-41,-43,-44,-45,61,-37,73,-38,-4,61,61,-68,-69,-70,-34,-42,61,61,61,61,61,-82,61,61,61,61,61,61,61,61,61,61,61,61,61,-6,-82,-36,146,-46,-82,-78,-79,-80,-71,-73,-72,-82,156,]),'RETURN':([6,25,30,31,32,33,34,35,37,38,39,41,48,49,70,71,127,139,141,142,143,144,147,149,153,],[-5,40,-33,40,-35,-39,-40,-41,-43,-44,-45,-37,-38,-4,-34,-42,-36,-46,-82,-78,-79,-80,-71,-73,-72,]),'IF':([6,25,30,31,32,33,34,35,37,38,39,41,48,49,70,71,127,139,141,142,143,144,147,149,153,],[-5,44,-33,44,-35,-39,-40,-41,-43,-44,-45,-37,-38,-4,-34,-42,-36,-46,-82,-78,-79,-80,-71,-73,-72,]),'WHILE':([6,25,30,31,32,33,34,35,37,38,39,41,48,49,70,71,127,139,141,142,143,144,147,149,153,],[-5,45,-33,45,-35,-39,-40,-41,-43,-44,-45,-37,-38,-4,-34,-42,-36,-46,-82,-78,-79,-80,-71,-73,-72,]),'READ':([6,25,30,31,32,33,34,35,37,38,39,41,48,49,70,71,127,139,141,142,143,144,147,149,153,],[-5,46,-33,46,-35,-39,-40,-41,-43,-44,-45,-37,-38,-4,-34,-42,-36,-46,-82,-78,-79,-80,-71,-73,-72,]),'WRITE':([6,25,30,31,32,33,34,35,37,38,39,41,48,49,70,71,127,139,141,142,143,144,147,149,153,],[-5,47,-33,47,-35,-39,-40,-41,-43,-44,-45,-37,-38,-4,-34,-42,-36,-46,-82,-78,-79,-80,-71,-73,-72,]),'RIGHT_BRACE':([6,25,30,31,32,33,34,35,37,38,39,41,48,49,70,71,102,127,139,141,142,143,144,147,149,153,],[-5,48,-33,48,-35,-39,-40,-41,-43,-44,-45,-37,-38,-4,-34,-42,48,-36,-46,-82,-78,-79,-80,-71,-73,-72,]),'LEFT_BRACKET':([9,10,11,12,16,18,19,20,21,22,23,61,73,79,125,154,],[-16,-17,-18,-19,27,27,-28,-29,-30,-31,-32,27,27,27,27,27,]),'VOID':([13,],[23,]),'LEFT_BRACE':([14,133,134,137,148,],[25,25,25,25,25,]),'SEMICOLON':([16,26,28,36,51,52,53,55,57,58,59,60,61,62,66,67,72,73,79,80,89,90,93,94,97,99,100,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,135,136,],[-82,49,-7,71,-82,-82,-82,-66,-20,-21,-22,-23,-82,-25,-26,-27,102,-82,-82,-47,-56,-57,-60,-61,-64,-67,-24,-6,-48,-49,-50,-51,-52,-53,-54,-55,-58,-59,-62,-63,-65,139,-74,143,144,]),'LEFT_PAR':([27,40,43,44,45,46,47,54,61,69,74,75,76,77,78,81,82,83,84,85,86,87,88,91,92,95,96,103,],[54,54,74,75,76,77,78,54,74,101,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'CTE_I':([27,40,54,56,63,64,65,74,75,76,77,78,81,82,83,84,85,86,87,88,91,92,95,96,103,],[57,57,57,57,-68,-69,-70,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'CTE_D':([27,40,54,56,63,64,65,74,75,76,77,78,81,82,83,84,85,86,87,88,91,92,95,96,103,],[58,58,58,58,-68,-69,-70,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'CTE_S':([27,40,54,56,63,64,65,74,75,76,77,78,81,82,83,84,85,86,87,88,91,92,95,96,103,],[60,60,60,60,-68,-69,-70,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'PLUS':([27,28,40,52,53,54,55,57,58,59,60,61,62,66,67,74,75,76,77,78,79,81,82,83,84,85,86,87,88,91,92,94,95,96,97,99,100,103,110,121,122,123,129,],[63,-7,63,91,-82,63,-66,-20,-21,-22,-23,-82,-25,-26,-27,63,63,63,63,63,-82,63,63,63,63,63,63,63,63,63,63,-61,63,63,-64,-67,-24,63,-6,-62,-63,-65,-74,]),'MINUS':([27,28,40,52,53,54,55,57,58,59,60,61,62,66,67,74,75,76,77,78,79,81,82,83,84,85,86,87,88,91,92,94,95,96,97,99,100,103,110,121,122,123,129,],[64,-7,64,92,-82,64,-66,-20,-21,-22,-23,-82,-25,-26,-27,64,64,64,64,64,-82,64,64,64,64,64,64,64,64,64,64,-61,64,64,-64,-67,-24,64,-6,-62,-63,-65,-74,]),'TRUE':([27,40,54,56,63,64,65,74,75,76,77,78,81,82,83,84,85,86,87,88,91,92,95,96,103,],[66,66,66,66,-68,-69,-70,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'FALSE':([27,40,54,56,63,64,65,74,75,76,77,78,81,82,83,84,85,86,87,88,91,92,95,96,103,],[67,67,67,67,-68,-69,-70,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'MULTIPLY':([28,53,55,57,58,59,60,61,62,66,67,79,99,100,110,123,129,],[-7,95,-66,-20,-21,-22,-23,-82,-25,-26,-27,-82,-67,-24,-6,-65,-74,]),'DIVIDE':([28,53,55,57,58,59,60,61,62,66,67,79,99,100,110,123,129,],[-7,96,-66,-20,-21,-22,-23,-82,-25,-26,-27,-82,-67,-24,-6,-65,-74,]),'IS_EQUAL_TO':([28,51,52,53,55,57,58,59,60,61,62,66,67,79,90,93,94,97,99,100,110,119,120,121,122,123,129,],[-7,81,-82,-82,-66,-20,-21,-22,-23,-82,-25,-26,-27,-82,-57,-60,-61,-64,-67,-24,-6,-58,-59,-62,-63,-65,-74,]),'NOT_EQUAL_TO':([28,51,52,53,55,57,58,59,60,61,62,66,67,79,90,93,94,97,99,100,110,119,120,121,122,123,129,],[-7,82,-82,-82,-66,-20,-21,-22,-23,-82,-25,-26,-27,-82,-57,-60,-61,-64,-67,-24,-6,-58,-59,-62,-63,-65,-74,]),'GREATER_THAN':([28,51,52,53,55,57,58,59,60,61,62,66,67,79,90,93,94,97,99,100,110,119,120,121,122,123,129,],[-7,83,-82,-82,-66,-20,-21,-22,-23,-82,-25,-26,-27,-82,-57,-60,-61,-64,-67,-24,-6,-58,-59,-62,-63,-65,-74,]),'LESS_THAN':([28,51,52,53,55,57,58,59,60,61,62,66,67,79,90,93,94,97,99,100,110,119,120,121,122,123,129,],[-7,84,-82,-82,-66,-20,-21,-22,-23,-82,-25,-26,-27,-82,-57,-60,-61,-64,-67,-24,-6,-58,-59,-62,-63,-65,-74,]),'GREATER_THAN_OR_EQUAL_TO':([28,51,52,53,55,57,58,59,60,61,62,66,67,79,90,93,94,97,99,100,110,119,120,121,122,123,129,],[-7,85,-82,-82,-66,-20,-21,-22,-23,-82,-25,-26,-27,-82,-57,-60,-61,-64,-67,-24,-6,-58,-59,-62,-63,-65,-74,]),'LESS_THAN_OR_EQUAL_TO':([28,51,52,53,55,57,58,59,60,61,62,66,67,79,90,93,94,97,99,100,110,119,120,121,122,123,129,],[-7,86,-82,-82,-66,-20,-21,-22,-23,-82,-25,-26,-27,-82,-57,-60,-61,-64,-67,-24,-6,-58,-59,-62,-63,-65,-74,]),'AND':([28,51,52,53,55,57,58,59,60,61,62,66,67,79,90,93,94,97,99,100,110,119,120,121,122,123,129,],[-7,87,-82,-82,-66,-20,-21,-22,-23,-82,-25,-26,-27,-82,-57,-60,-61,-64,-67,-24,-6,-58,-59,-62,-63,-65,-74,]),'OR':([28,51,52,53,55,57,58,59,60,61,62,66,67,79,90,93,94,97,99,100,110,119,120,121,122,123,129,],[-7,88,-82,-82,-66,-20,-21,-22,-23,-82,-25,-26,-27,-82,-57,-60,-61,-64,-67,-24,-6,-58,-59,-62,-63,-65,-74,]),'RIGHT_BRACKET':([28,50,51,52,53,55,57,58,59,60,61,62,66,67,79,80,89,90,93,94,97,99,100,110,111,112,113,114,115,116,117,118,119,120,121,122,123,129,],[-7,79,-82,-82,-82,-66,-20,-21,-22,-23,-82,-25,-26,-27,-82,-47,-56,-57,-60,-61,-64,-67,-24,-6,-48,-49,-50,-51,-52,-53,-54,-55,-58,-59,-62,-63,-65,-74,]),'RIGHT_PAR':([28,51,52,53,55,57,58,59,60,61,62,66,67,79,80,89,90,93,94,97,98,99,100,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,129,130,131,132,140,146,150,152,156,157,],[-7,-82,-82,-82,-66,-20,-21,-22,-23,-82,-25,-26,-27,-82,-47,-56,-57,-60,-61,-64,123,-67,-24,-82,129,-82,133,134,135,136,-6,-48,-49,-50,-51,-52,-53,-54,-55,-58,-59,-62,-63,-65,137,-13,-74,-75,-82,-77,-76,-82,-12,-15,-82,-14,]),'COMMA':([28,51,52,53,55,57,58,59,60,61,62,66,67,79,80,89,90,93,94,97,99,100,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,129,131,146,156,],[-7,-82,-82,-82,-66,-20,-21,-22,-23,-82,-25,-26,-27,-82,-47,-56,-57,-60,-61,-64,-67,-24,131,-6,-48,-49,-50,-51,-52,-53,-54,-55,-58,-59,-62,-63,-65,-74,131,151,151,]),'ELSE':([30,32,41,48,70,127,141,],[-33,-35,-37,-38,-34,-36,148,]),'ASSIGN':([73,],[103,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'global_declaration':([0,3,],[2,15,]),'var_declaration':([0,3,25,31,],[3,3,33,33,]),'func_declaration':([0,3,7,],[4,4,17,]),'var_type':([0,3,25,31,101,151,],[5,5,42,42,125,154,]),'empty':([0,3,16,18,25,27,31,40,51,52,53,54,61,73,74,75,76,77,78,79,81,82,83,84,85,86,87,88,91,92,95,96,101,103,105,125,131,141,146,154,156,],[6,6,28,28,6,65,6,65,89,93,97,65,28,28,65,65,65,65,65,28,65,65,65,65,65,65,65,65,65,65,65,65,126,65,132,28,132,149,152,28,152,]),'func_signature':([0,3,7,],[7,7,7,]),'main':([0,3,7,],[8,8,8,]),'func_type':([13,],[18,]),'block':([14,133,134,137,148,],[24,141,142,145,153,]),'array':([16,18,61,73,79,125,154,],[26,29,100,26,110,138,155,]),'block_1':([25,31,],[30,70,]),'statement':([25,31,],[31,31,]),'block_2':([25,31,],[32,32,]),'assignment':([25,31,],[34,34,]),'condition':([25,31,],[35,35,]),'function_call':([25,27,31,40,54,56,74,75,76,77,78,81,82,83,84,85,86,87,88,91,92,95,96,103,],[36,62,36,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'while_cycle':([25,31,],[37,37,]),'read':([25,31,],[38,38,]),'write':([25,31,],[39,39,]),'block_3':([25,31,102,],[41,41,127,]),'expression':([27,40,54,74,75,76,103,],[50,72,98,105,106,107,128,]),'exp':([27,40,54,74,75,76,77,78,81,82,83,84,85,86,87,88,91,92,103,],[51,51,51,51,51,51,108,109,111,112,113,114,115,116,117,118,119,120,51,]),'term':([27,40,54,74,75,76,77,78,81,82,83,84,85,86,87,88,91,92,95,96,103,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,121,122,52,]),'factor':([27,40,54,74,75,76,77,78,81,82,83,84,85,86,87,88,91,92,95,96,103,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'var_cte':([27,40,54,56,74,75,76,77,78,81,82,83,84,85,86,87,88,91,92,95,96,103,],[55,55,55,99,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'factor_1':([27,40,54,74,75,76,77,78,81,82,83,84,85,86,87,88,91,92,95,96,103,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'cte_b':([27,40,54,56,74,75,76,77,78,81,82,83,84,85,86,87,88,91,92,95,96,103,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'func_signature_1':([29,],[68,]),'expression_1':([51,],[80,]),'exp_1':([52,],[90,]),'term_1':([53,],[94,]),'param_call':([74,],[104,]),'param_declaration':([101,],[124,]),'param_call_1':([105,131,],[130,140,]),'condition_1':([141,],[147,]),'param_declaration_1':([146,156,],[150,157,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> global_declaration','start',1,'p_start','parser.py',16),
  ('global_declaration -> var_declaration global_declaration','global_declaration',2,'p_global_declaration','parser.py',20),
  ('global_declaration -> func_declaration','global_declaration',1,'p_global_declaration','parser.py',21),
  ('var_declaration -> var_type ID array SEMICOLON','var_declaration',4,'p_var_declaration','parser.py',26),
  ('var_declaration -> empty','var_declaration',1,'p_var_declaration','parser.py',27),
  ('array -> LEFT_BRACKET expression RIGHT_BRACKET array','array',4,'p_array','parser.py',31),
  ('array -> empty','array',1,'p_array','parser.py',32),
  ('func_declaration -> func_signature func_declaration','func_declaration',2,'p_func_declaration','parser.py',37),
  ('func_declaration -> main','func_declaration',1,'p_func_declaration','parser.py',38),
  ('func_signature -> FUNCTION func_type array func_signature_1','func_signature',4,'p_func_signature','parser.py',43),
  ('func_signature_1 -> ID LEFT_PAR param_declaration RIGHT_PAR block','func_signature_1',5,'p_func_signature_1','parser.py',47),
  ('param_declaration -> var_type array ID param_declaration_1','param_declaration',4,'p_param_declaration','parser.py',51),
  ('param_declaration -> empty','param_declaration',1,'p_param_declaration','parser.py',52),
  ('param_declaration_1 -> COMMA var_type array ID param_declaration_1','param_declaration_1',5,'p_param_declaration_1','parser.py',56),
  ('param_declaration_1 -> empty','param_declaration_1',1,'p_param_declaration_1','parser.py',57),
  ('var_type -> INT','var_type',1,'p_var_type','parser.py',61),
  ('var_type -> DOUBLE','var_type',1,'p_var_type','parser.py',62),
  ('var_type -> BOOL','var_type',1,'p_var_type','parser.py',63),
  ('var_type -> STRING','var_type',1,'p_var_type','parser.py',64),
  ('var_cte -> CTE_I','var_cte',1,'p_var_cte','parser.py',68),
  ('var_cte -> CTE_D','var_cte',1,'p_var_cte','parser.py',69),
  ('var_cte -> cte_b','var_cte',1,'p_var_cte','parser.py',70),
  ('var_cte -> CTE_S','var_cte',1,'p_var_cte','parser.py',71),
  ('var_cte -> ID array','var_cte',2,'p_var_cte','parser.py',72),
  ('var_cte -> function_call','var_cte',1,'p_var_cte','parser.py',73),
  ('cte_b -> TRUE','cte_b',1,'p_cte_b','parser.py',77),
  ('cte_b -> FALSE','cte_b',1,'p_cte_b','parser.py',78),
  ('func_type -> INT','func_type',1,'p_func_type','parser.py',82),
  ('func_type -> DOUBLE','func_type',1,'p_func_type','parser.py',83),
  ('func_type -> BOOL','func_type',1,'p_func_type','parser.py',84),
  ('func_type -> STRING','func_type',1,'p_func_type','parser.py',85),
  ('func_type -> VOID','func_type',1,'p_func_type','parser.py',86),
  ('block -> LEFT_BRACE block_1','block',2,'p_block','parser.py',90),
  ('block_1 -> statement block_1','block_1',2,'p_block_1','parser.py',94),
  ('block_1 -> block_2','block_1',1,'p_block_1','parser.py',95),
  ('block_2 -> RETURN expression SEMICOLON block_3','block_2',4,'p_block_2','parser.py',100),
  ('block_2 -> block_3','block_2',1,'p_block_2','parser.py',101),
  ('block_3 -> RIGHT_BRACE','block_3',1,'p_block_3','parser.py',105),
  ('statement -> var_declaration','statement',1,'p_statement','parser.py',110),
  ('statement -> assignment','statement',1,'p_statement','parser.py',111),
  ('statement -> condition','statement',1,'p_statement','parser.py',112),
  ('statement -> function_call SEMICOLON','statement',2,'p_statement','parser.py',113),
  ('statement -> while_cycle','statement',1,'p_statement','parser.py',114),
  ('statement -> read','statement',1,'p_statement','parser.py',115),
  ('statement -> write','statement',1,'p_statement','parser.py',116),
  ('assignment -> var_type ID ASSIGN expression SEMICOLON','assignment',5,'p_assignment','parser.py',120),
  ('expression -> exp expression_1','expression',2,'p_expression','parser.py',125),
  ('expression_1 -> IS_EQUAL_TO exp','expression_1',2,'p_expression_1','parser.py',129),
  ('expression_1 -> NOT_EQUAL_TO exp','expression_1',2,'p_expression_1','parser.py',130),
  ('expression_1 -> GREATER_THAN exp','expression_1',2,'p_expression_1','parser.py',131),
  ('expression_1 -> LESS_THAN exp','expression_1',2,'p_expression_1','parser.py',132),
  ('expression_1 -> GREATER_THAN_OR_EQUAL_TO exp','expression_1',2,'p_expression_1','parser.py',133),
  ('expression_1 -> LESS_THAN_OR_EQUAL_TO exp','expression_1',2,'p_expression_1','parser.py',134),
  ('expression_1 -> AND exp','expression_1',2,'p_expression_1','parser.py',135),
  ('expression_1 -> OR exp','expression_1',2,'p_expression_1','parser.py',136),
  ('expression_1 -> empty','expression_1',1,'p_expression_1','parser.py',137),
  ('exp -> term exp_1','exp',2,'p_exp','parser.py',141),
  ('exp_1 -> PLUS exp','exp_1',2,'p_exp_1','parser.py',145),
  ('exp_1 -> MINUS exp','exp_1',2,'p_exp_1','parser.py',146),
  ('exp_1 -> empty','exp_1',1,'p_exp_1','parser.py',147),
  ('term -> factor term_1','term',2,'p_term','parser.py',151),
  ('term_1 -> MULTIPLY term','term_1',2,'p_term_1','parser.py',155),
  ('term_1 -> DIVIDE term','term_1',2,'p_term_1','parser.py',156),
  ('term_1 -> empty','term_1',1,'p_term_1','parser.py',157),
  ('factor -> LEFT_PAR expression RIGHT_PAR','factor',3,'p_factor','parser.py',161),
  ('factor -> var_cte','factor',1,'p_factor','parser.py',162),
  ('factor -> factor_1 var_cte','factor',2,'p_factor','parser.py',163),
  ('factor_1 -> PLUS','factor_1',1,'p_factor_1','parser.py',167),
  ('factor_1 -> MINUS','factor_1',1,'p_factor_1','parser.py',168),
  ('factor_1 -> empty','factor_1',1,'p_factor_1','parser.py',169),
  ('condition -> IF LEFT_PAR expression RIGHT_PAR block condition_1','condition',6,'p_condition','parser.py',173),
  ('condition_1 -> ELSE block','condition_1',2,'p_condition_1','parser.py',177),
  ('condition_1 -> empty','condition_1',1,'p_condition_1','parser.py',178),
  ('function_call -> ID LEFT_PAR param_call RIGHT_PAR','function_call',4,'p_function_call','parser.py',182),
  ('param_call -> expression param_call_1','param_call',2,'p_param_call','parser.py',186),
  ('param_call_1 -> COMMA param_call_1','param_call_1',2,'p_param_call_1','parser.py',190),
  ('param_call_1 -> empty','param_call_1',1,'p_param_call_1','parser.py',191),
  ('while_cycle -> WHILE LEFT_PAR expression RIGHT_PAR block','while_cycle',5,'p_while_cycle','parser.py',195),
  ('read -> READ LEFT_PAR exp RIGHT_PAR SEMICOLON','read',5,'p_read','parser.py',199),
  ('write -> WRITE LEFT_PAR exp RIGHT_PAR SEMICOLON','write',5,'p_write','parser.py',203),
  ('main -> MAIN block','main',2,'p_main','parser.py',207),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',211),
]
